<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.02</doclet-version-NOT-library-version>
    <class>
        <name>com.AB.ABExtDrawing.ABExtDrawing</name>
        <shortname>ABExtDrawing</shortname>
        <owner>process</owner>
        <method>
            <name>GetAlphaLayer</name>
            <comment>extract the alpha layer from a bitmap into a new bitmap.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>OrigBitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>AlphaGrayBitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>saveLayer2</name>
            <comment>Helper version of saveLayer() that takes 4 values rather than a RectF.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>right</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>bottom</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
            <parameter>
                <name>saveFlags</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>clipRegion</name>
            <comment>Intersect the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>region</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRegion</type>
            </parameter>
        </method>
        <method>
            <name>drawPosText</name>
            <comment>Draw the text in the array, with each character's origin specified by the pos array.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>pos</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>save</name>
            <comment>Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
        </method>
        <method>
            <name>rotate</name>
            <comment>Preconcat the current matrix with the specified rotation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>degrees</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>quickReject</name>
            <comment>Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not).</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>path</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPath</type>
            </parameter>
            <parameter>
                <name>type</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>drawWrapText</name>
            <comment>Draw the text, with origin at (x,y), using the specified paint.
 Width: Wraps the text at width
 Height: clips text to height: If -1 then unlimited
 
 This is NOT a standard Android function</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>width</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>SetDensity</name>
            <comment>Specifies the density for this Canvas' backing bitmap. This modifies the target density of the canvas itself, as well as the density of its backing bitmap.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>density</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>drawText2</name>
            <comment>Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>end</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>clipPath</name>
            <comment>Modify the current clip with the specified path.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>path</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPath</type>
            </parameter>
            <parameter>
                <name>op</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>drawRGB</name>
            <comment>Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>g</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>b</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>copyPixelsFromBuffer</name>
            <comment>Copy the pixels from the buffer, beginning at the current position, overwriting the bitmap's pixels.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>src</name>
                <type>java.nio.Buffer</type>
            </parameter>
        </method>
        <method>
            <name>scale2</name>
            <comment>Preconcat the current matrix with the specified scale.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>sx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>sy</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>px</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>py</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>drawTextOnPath</name>
            <comment>Draw the text, with origin at (x,y), using the specified paint, along the specified path. The paint's Align setting determins where along the path to start the text.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>path</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPath</type>
            </parameter>
            <parameter>
                <name>hOffset</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>vOffset</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>MakeBitmapHorizontalVertical</name>
            <comment>Create a new bitmap: if src = ABC
                               DEF
                               GHI 
 then tgt can be ABBBBBC
                 DEEEEEF
                 DEEEEEF
                 DEEEEEF
                 GHHHHHI  
                 
 This is NOT a standard Android function</comment>
            <returntype>android.graphics.Bitmap</returntype>
            <parameter>
                <name>src</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>tgtWidth</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>tgtHeight</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>PartWidth</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>PartHeight</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>drawPath</name>
            <comment>Draw the specified path using the specified paint. The path will be filled or framed based on the Style in the paint.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>path</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPath</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>restoreToCount</name>
            <comment>Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save().</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>saveCount</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>drawARGB</name>
            <comment>Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>a</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>g</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>b</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>drawText</name>
            <comment>Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>drawLines</name>
            <comment>Draw a series of lines. Each line is taken from 4 consecutive values in the pts array. Thus to draw 1 line, the array must contain at least 4 values. This is logically the same as drawing the array as follows: drawLine(pts[0], pts[1], pts[2], pts[3]) followed by drawLine(pts[4], pts[5], pts[6], pts[7]) and so on.	 *</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>pts</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>drawVertices</name>
            <comment>Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>mode</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>vertexCount</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>verts</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>vertOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>texs</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>texOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>colors</name>
                <type>int[]</type>
            </parameter>
            <parameter>
                <name>colorOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>indices</name>
                <type>short[]</type>
            </parameter>
            <parameter>
                <name>indexOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>indexCount</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>drawRect</name>
            <comment>Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>drawCircle</name>
            <comment>Draw the specified circle using the specified paint. If radius is &lt;= 0, then nothing will be drawn. The circle will be filled or framed based on the Style in the paint.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>cx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>cy</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>radius</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>drawOval</name>
            <comment>Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>oval</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRectF</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>copyPixelsToBuffer</name>
            <comment>Copy the bitmap's pixels into the specified buffer (allocated by the caller).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>dst</name>
                <type>java.nio.Buffer</type>
            </parameter>
        </method>
        <method>
            <name>drawBitmap2</name>
            <comment>Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint, transformed by the current matrix.
 Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated.
 If the bitmap and canvas have different densities, this function will take care of automatically scaling the bitmap to draw at the same density as the canvas.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>drawPoint</name>
            <comment>Helper for drawPoints() for drawing a single point.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>drawRoundRect</name>
            <comment>Draw the specified round-rect using the specified paint. The roundrect will be filled or framed based on the Style in the paint.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>rect</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRectF</type>
            </parameter>
            <parameter>
                <name>rx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>ry</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>restore</name>
            <comment>This call balances a previous call to save(), and is used to remove all modifications to the matrix/clip state since the last save call. It is an error to call restore() more times than save() was called.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
        </method>
        <method>
            <name>drawColor2</name>
            <comment>Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>mode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Recycle</name>
            <comment>Free the native object associated with this bitmap, and clear the reference to the pixel data.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>drawBitmapMesh</name>
            <comment>Draw the bitmap through the mesh, where mesh vertices are evenly distributed across the bitmap. There are meshWidth+1 vertices across, and meshHeight+1 vertices down. The verts array is accessed in row-major order, so that the first meshWidth+1 vertices are distributed across the top of the bitmap from left to right. A more general version of this methid is drawVertices().</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>meshWidth</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>meshHeight</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>verts</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>vertOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>colors</name>
                <type>int[]</type>
            </parameter>
            <parameter>
                <name>colorOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>GetMatrix</name>
            <comment>Return a new matrix with a copy of the canvas' current transformation matrix.</comment>
            <returntype>com.AB.ABExtDrawing.ABExtDrawing.ABMatrix</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
        </method>
        <method>
            <name>drawBitmap</name>
            <comment>Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to draw.
 Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated.
 This function ignores the density associated with the bitmap. This is because the source and destination rectangle coordinate spaces are in their respective densities, so must already have the appropriate scaling factor applied.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>src</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <parameter>
                <name>dst</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>Saturate</name>
            <comment>change the saturation of an image.</comment>
            <returntype>android.graphics.Bitmap</returntype>
            <parameter>
                <name>bmp</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>Ammount</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>scale</name>
            <comment>Preconcat the current matrix with the specified scale.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>sx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>sy</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>GetFullDate</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>year</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>month</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>day</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>saveLayerAlpha2</name>
            <comment>Helper for saveLayerAlpha() that takes 4 values instead of a RectF.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>right</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>bottom</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>alpha</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>saveFlags</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetClipBounds</name>
            <comment>Retrieve the clip bounds.</comment>
            <returntype>android.graphics.Rect</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
        </method>
        <method>
            <name>drawPoints2</name>
            <comment>Helper for drawPoints() that assumes you want to draw the entire array</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>pts</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>isHardwareAccelerated</name>
            <comment>Indicates whether this Canvas uses hardware acceleration. Note that this method does not define what type of hardware acceleration may or may not be used.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
        </method>
        <method>
            <name>drawColor</name>
            <comment>Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>MakeBitmapScale</name>
            <comment>Return a new bitmap where picture is scaled to new width and height
 
 This is NOT a standard Android function</comment>
            <returntype>android.graphics.Bitmap</returntype>
            <parameter>
                <name>bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>newWidth</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>newHeight</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>saveLayer</name>
            <comment>This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>bounds</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRectF</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
            <parameter>
                <name>saveFlags</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>saveLayerAlpha</name>
            <comment>This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>bounds</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRectF</type>
            </parameter>
            <parameter>
                <name>alpha</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>saveFlags</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetSaveCount</name>
            <comment>Returns the number of matrix/clip states on the Canvas' private stack. This will equal # save() calls - # restore() calls.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
        </method>
        <method>
            <name>drawBitmap4</name>
            <comment>Draw the bitmap using the specified matrix.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>matrix</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABMatrix</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>drawBitmap3</name>
            <comment>Treat the specified array of colors as a bitmap, and draw it. This gives the same result as first creating a bitmap from the array, and then drawing it, but this method avoids explicitly creating a bitmap object which can be more efficient if the colors are changing often.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>colors</name>
                <type>int[]</type>
            </parameter>
            <parameter>
                <name>offset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>stride</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>width</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>hasAlpha</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>drawRect2</name>
            <comment>Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>right</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>bottom</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>GetWidth</name>
            <comment>Returns the width of the current drawing layer</comment>
            <returntype>int</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
        </method>
        <method>
            <name>MakeBitmapScaleFromRect</name>
            <comment>Return a scaled version of a part of a bitmap 
 
 This is NOT a standard Android function</comment>
            <returntype>android.graphics.Bitmap</returntype>
            <parameter>
                <name>bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <parameter>
                <name>newWidth</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>newHeight</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>quickReject3</name>
            <comment>Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls).</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>rect</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRectF</type>
            </parameter>
            <parameter>
                <name>type</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>quickReject2</name>
            <comment>eturn true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls).</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>right</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>bottom</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>type</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>clipRect</name>
            <comment>Modify the current clip with the specified rectangle, which is expressed in local coordinates.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <parameter>
                <name>op</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>drawLine</name>
            <comment>Draw a line segment with the specified start and stop x,y coordinates, using the specified paint. NOTE: since a line is always "framed", the Style is ignored in the paint.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>startX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>startY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>stopX</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>stopY</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>SetMatrix</name>
            <comment>Completely replace the current matrix with the specified matrix. If the matrix parameter is null, then the current matrix is reset to identity.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>matrix</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABMatrix</type>
            </parameter>
        </method>
        <method>
            <name>MakeBitmapVertical</name>
            <comment>Create a new bitmap: if src = A
                               B
                               C 
 then tgt can be A
                 B
                 B
                 B
                 B
                 B
                 C 
                 
 This is NOT a standard Android function</comment>
            <returntype>android.graphics.Bitmap</returntype>
            <parameter>
                <name>src</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>tgtHeight</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>PartHeight</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getPixels</name>
            <comment>Returns in pixels[] a copy of the data in the bitmap. Each value is a packed int representing a Color.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>pixels</name>
                <type>int[]</type>
            </parameter>
            <parameter>
                <name>offset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>stride</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>width</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetPaintFlagsDrawFilter</name>
            <comment>DrawFilter that affects every paint by first clearing the specified clearBits in the paint's flags, and then setting the specified setBits in the paint's flags.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>clearBits</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>setBits</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Blur</name>
            <comment>blur and image. 
 Speed: 0 = normal, 1 = fast</comment>
            <returntype>android.graphics.Bitmap</returntype>
            <parameter>
                <name>bmp</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>Level</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>Speed</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetBitmap</name>
            <comment>Specify a bitmap for the canvas to draw into. As a side-effect, also updates the canvas's target density to match that of the bitmap.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>clipRect2</name>
            <comment>Intersect the current clip with the specified rectangle, which is expressed in local coordinates.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>rotate2</name>
            <comment>Preconcat the current matrix with the specified rotation.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>degrees</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>px</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>py</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>MakeBitmapHorizontal</name>
            <comment>Create a new bitmap: if src = ABC then tgt can be ABBBBBBBBBBC 
 
 This is NOT a standard Android function</comment>
            <returntype>android.graphics.Bitmap</returntype>
            <parameter>
                <name>src</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>tgtWidth</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>PartWidth</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isOpaque</name>
            <comment>Return true if the device that the current layer draws into is opaque (i.e. does not support per-pixel alpha)</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
        </method>
        <method>
            <name>concat</name>
            <comment>Preconcat the current matrix with the specified matrix.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>matrix</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABMatrix</type>
            </parameter>
        </method>
        <method>
            <name>GetConfig</name>
            <comment>If the bitmap's internal config is in one of the public formats, return that config, otherwise return null.</comment>
            <returntype EnumType="true">android.graphics.Bitmap.Config</returntype>
            <parameter>
                <name>bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>clipPath2</name>
            <comment>Intersect the current clip with the specified path.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>path</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPath</type>
            </parameter>
        </method>
        <method>
            <name>GetDensity</name>
            <comment>Returns the target density of the canvas. The default density is derived from the density of its backing bitmap, or DENSITY_NONE if there is not one.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
        </method>
        <method>
            <name>drawArc</name>
            <comment>Draw the specified arc, which will be scaled to fit inside the specified oval.
 If the start angle is negative or &gt;= 360, the start angle is treated as start angle modulo 360.
 If the sweep angle is &gt;= 360, then the oval is drawn completely. Note that this differs slightly from SkPath::arcTo, which treats the sweep angle modulo 360. If the sweep angle is negative, the sweep angle is treated as sweep angle modulo 360
 The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o'clock on a watch.)</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>oval</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRectF</type>
            </parameter>
            <parameter>
                <name>startAngle</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>sweepAngle</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>useCenter</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>drawPoints</name>
            <comment>Draw a series of points. Each point is centered at the coordinate specified by pts[], and its diameter is specified by the paint's stroke width (as transformed by the canvas' CTM), with special treatment for a stroke width of 0, which always draws exactly 1 pixel (or at most 4 if antialiasing is enabled). The shape of the point is controlled by the paint's Cap type. The shape is a square, unless the cap type is Round, in which case the shape is a circle.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>pts</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>offset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>count</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>save2</name>
            <comment>Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>saveFlags</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>drawPaint</name>
            <comment>Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>translate</name>
            <comment>Preconcat the current matrix with the specified translation</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>dx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dy</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>Resize</name>
            <comment>Resize an image.</comment>
            <returntype>android.graphics.Bitmap</returntype>
            <parameter>
                <name>bmp</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>Percentage</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setPixels</name>
            <comment>Replace pixels in the bitmap with the colors in the array. Each element in the array is a packed int prepresenting a Color</comment>
            <returntype>void</returntype>
            <parameter>
                <name>bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>pixels</name>
                <type>int[]</type>
            </parameter>
            <parameter>
                <name>offset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>stride</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>width</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>drawLines2</name>
            <comment>Draw a series of lines. Each line is taken from 4 consecutive values in the pts array. Thus to draw 1 line, the array must contain at least 4 values. This is logically the same as drawing the array as follows: drawLine(pts[0], pts[1], pts[2], pts[3]) followed by drawLine(pts[4], pts[5], pts[6], pts[7]) and so on.
 offset: Number of values in the array to skip before drawing</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>pts</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>offset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>count</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>GetHeight</name>
            <comment>Returns the height of the current drawing layer</comment>
            <returntype>int</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
        </method>
        <method>
            <name>skew</name>
            <comment>Preconcat the current matrix with the specified skew.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
            <parameter>
                <name>sx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>sy</name>
                <type>float</type>
            </parameter>
        </method>
        <field>
            <name>ARGB_4444</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>VertexMode_TRIANGLE_STRIP</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>EdgeType_BW</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_SRC</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ALPHA_8</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>PorterDuffMode_SRC_OVER</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MATRIX_SAVE_FLAG</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_DST_ATOP</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CLIP_SAVE_FLAG</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RegionOp_REVERSE_DIFFERENCE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_DST_OVER</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>VertexMode_TRIANGLE_FAN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_MULTIPLY</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RegionOp_UNION</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ALL_SAVE_FLAG</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_SRC_IN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>HAS_ALPHA_LAYER_SAVE_FLAG</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RegionOp_XOR</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RGB_565</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>RegionOp_DIFFERENCE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_SRC_OUT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CLIP_TO_LAYER_SAVE_FLAG</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RegionOp_INTERSECT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RegionOp_REPLACE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_DST_OUT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_SRC_ATOP</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_SCREEN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ARGB_8888</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>PorterDuffMode_DST</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>EdgeType_AA</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_CLEAR</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>VertexMode_TRIANGLES</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_DARKEN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_DST_IN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FULL_COLOR_LAYER_SAVE_FLAG</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_LIGHTEN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_XOR</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.AB.ABExtDrawing.ABExtDrawing.ABRegion</name>
        <shortname>ABRegion</shortname>
        <owner>process</owner>
        <method>
            <name>quickReject</name>
            <comment>Return true if the region is empty, or if the specified rectangle does not intersect the region. Returning false is not a guarantee that they intersect, but returning true is a guarantee that they do not.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setEmpty</name>
            <comment>Set the region to the empty region</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>setPath</name>
            <comment>Set the region to the area described by the path and clip. Return true if the resulting region is non-empty. This produces a region that is identical to the pixels that would be drawn by the path (with no antialiasing).</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>path</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPath</type>
            </parameter>
            <parameter>
                <name>clip</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRegion</type>
            </parameter>
        </method>
        <method>
            <name>isRect</name>
            <comment>Return true if the region contains a single rectangle</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>contains</name>
            <comment>Return true if the region contains the specified point</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>x</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetBounds</name>
            <comment>Set the Rect to the bounds of the region. If the region is empty, the Rect will be set to [0, 0, 0, 0]</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>r</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>isEmpty</name>
            <comment>Return true if this region is empty</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>op2</name>
            <comment>Perform the specified Op on this region and the specified rect. Return true if the result of the op is not empty.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>bottom</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>op</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>op3</name>
            <comment>Perform the specified Op on this region and the specified region. Return true if the result of the op is not empty.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>region</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRegion</type>
            </parameter>
            <parameter>
                <name>op</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>op4</name>
            <comment>Set this region to the result of performing the Op on the specified rect and region. Return true if the result is not empty.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <parameter>
                <name>region</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRegion</type>
            </parameter>
            <parameter>
                <name>op</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>op5</name>
            <comment>Set this region to the result of performing the Op on the specified regions. Return true if the result is not empty.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>region1</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRegion</type>
            </parameter>
            <parameter>
                <name>region2</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRegion</type>
            </parameter>
            <parameter>
                <name>op</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>union</name>
            <comment>Make union with rectangle</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>r</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>isComplex</name>
            <comment>Return true if the region contains more than one rectangle</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize4</name>
            <comment>Return a region set to the specified rectangle</comment>
            <returntype>void</returntype>
            <parameter>
                <name>left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Set</name>
            <comment>Set the region to the specified rectangle</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Return a copy of the specified region</comment>
            <returntype>void</returntype>
            <parameter>
                <name>region</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRegion</type>
            </parameter>
        </method>
        <method>
            <name>Initialize3</name>
            <comment>Return a region set to the specified rectangle</comment>
            <returntype>void</returntype>
            <parameter>
                <name>rect</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>set3</name>
            <comment>Set the region to the specified region.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>region</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRegion</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Create an empty region</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>quickContains2</name>
            <comment>Return true if the region is a single rectangle (not complex) and it contains the specified rectangle. Returning false is not a guarantee that the rectangle is not contained by this region, but return true is a guarantee that the rectangle is contained by this region.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>r</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>op</name>
            <comment>Perform the specified Op on this region and the specified rect. Return true if the result of the op is not empty.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>r</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <parameter>
                <name>op</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>translate2</name>
            <comment>Translate the region by [dx, dy]. If the region is empty, do nothing.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>dx</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>dy</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>dst</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRegion</type>
            </parameter>
        </method>
        <method>
            <name>equals</name>
            <comment>Compares this instance with the specified object and indicates if they are equal. In order to be equal.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>obj</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>quickContains</name>
            <comment>Return true if the region is a single rectangle (not complex) and it contains the specified rectangle. Returning false is not a guarantee that the rectangle is not contained by this region, but return true is a guarantee that the rectangle is contained by this region.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>bottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Set2</name>
            <comment>Set the region to the specified rectangle</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>r</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>SetBoundaryPath</name>
            <comment>Set the path to the boundary of the region. If the region is empty, the path will also be empty.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>path</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPath</type>
            </parameter>
        </method>
        <method>
            <name>translate</name>
            <comment>Set the dst region to the result of translating this region by [dx, dy]. If this region is empty, then dst will be set to empty.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>dx</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>dy</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>toString</name>
            <comment>Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression:
 getClass().getName() + '@' + Integer.toHexString(hashCode())</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>GetBounds</name>
            <comment>Return a new Rect set to the bounds of the region. If the region is empty, the Rect will be set to [0, 0, 0, 0]</comment>
            <returntype>android.graphics.Rect</returntype>
        </method>
        <method>
            <name>GetBoundaryPath</name>
            <comment>Return the boundary of the region as a new Path. If the region is empty, the path will also be empty.</comment>
            <returntype>com.AB.ABExtDrawing.ABExtDrawing.ABPath</returntype>
        </method>
        <field>
            <name>RegionOp_DIFFERENCE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RegionOp_UNION</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RegionOp_XOR</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RegionOp_REPLACE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RegionOp_INTERSECT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RegionOp_REVERSE_DIFFERENCE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.AB.ABExtDrawing.ABExtDrawing.ABMatrix</name>
        <shortname>ABMatrix</shortname>
        <owner>process</owner>
        <method>
            <name>postTranslate</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>dx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dy</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setSinCos2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>sinValue</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>cosValue</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>px</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>py</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>mapVectors</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>dst</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>src</name>
                <type>float[]</type>
            </parameter>
        </method>
        <method>
            <name>mapVectors2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>vecs</name>
                <type>float[]</type>
            </parameter>
        </method>
        <method>
            <name>mapVectors3</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>dst</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>dstIndex</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>src</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>srcIndex</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>vectorCount</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setSkew2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>kx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>ky</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>px</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>py</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>invert</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>inverse</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABMatrix</type>
            </parameter>
        </method>
        <method>
            <name>preScale</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>sx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>sy</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setConcat</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>a</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABMatrix</type>
            </parameter>
            <parameter>
                <name>b</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABMatrix</type>
            </parameter>
        </method>
        <method>
            <name>mapRect</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>dst</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRectF</type>
            </parameter>
            <parameter>
                <name>src</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRectF</type>
            </parameter>
        </method>
        <method>
            <name>isIdentity</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>reset</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Set</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>src</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABMatrix</type>
            </parameter>
        </method>
        <method>
            <name>getValues</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>values</name>
                <type>float[]</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>src</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABMatrix</type>
            </parameter>
        </method>
        <method>
            <name>postConcat</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>other</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABMatrix</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>setPolyToPoly</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>src</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>srcIndex</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>dst</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>dstIndex</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>pointCount</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>postScale</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>sx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>sy</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>equals</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>obj</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>preSkew</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>kx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>ky</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>preRotate</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>degrees</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setScale</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>sx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>sy</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setRotate2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>degrees</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>px</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>py</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>rectStaysRect</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>setTranslate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>dx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dy</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setSkew</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>kx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>ky</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setSinCos</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>sinValue</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>cosValue</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>preTranslate</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>dx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dy</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>preConcat</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>other</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABMatrix</type>
            </parameter>
        </method>
        <method>
            <name>postRotate</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>degrees</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setRectToRect</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>src</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRectF</type>
            </parameter>
            <parameter>
                <name>dst</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRectF</type>
            </parameter>
            <parameter>
                <name>stf</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>mapPoints</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>dst</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>dstIndex</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>src</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>srcIndex</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>pointCount</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setScale2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>sx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>sy</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>px</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>py</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>mapPoints2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>pts</name>
                <type>float[]</type>
            </parameter>
        </method>
        <method>
            <name>postSkew</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>kx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>ky</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>mapPoints3</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>dst</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>src</name>
                <type>float[]</type>
            </parameter>
        </method>
        <method>
            <name>mapRadius</name>
            <comment></comment>
            <returntype>float</returntype>
            <parameter>
                <name>radius</name>
                <type>float</type>
            </parameter>
        </method>
        <property>
            <name>Values</name>
            <parameter>
                <name>values</name>
                <type>float[]</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Rotate</name>
            <parameter>
                <name>degrees</name>
                <type>float</type>
            </parameter>
            <comment></comment>
        </property>
        <field>
            <name>MSKEW_Y</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MatrixScaleToFit_START</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MSKEW_X</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MTRANS_X</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MTRANS_Y</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MPERSP_0</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MPERSP_1</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MatrixScaleToFit_CENTER</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MSCALE_Y</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MSCALE_X</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MPERSP_2</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MatrixScaleToFit_END</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MatrixScaleToFit_FILL</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.AB.ABExtDrawing.ABExtDrawing.ABCamera</name>
        <shortname>ABCamera</shortname>
        <owner>process</owner>
        <method>
            <name>SetLocation</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>z</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>dotWithNormal</name>
            <comment></comment>
            <returntype>float</returntype>
            <parameter>
                <name>dx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dy</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dz</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>save</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>rotate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>z</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>restore</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>rotateX</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>deg</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>translate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>z</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>rotateZ</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>deg</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>rotateY</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>deg</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>GetMatrix</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>matrix</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABMatrix</type>
            </parameter>
        </method>
        <method>
            <name>applyToCanvas</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>mCanvas</name>
                <type>anywheresoftware.b4a.objects.drawable.CanvasWrapper</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</name>
        <shortname>ABPaint</shortname>
        <owner>process</owner>
        <method>
            <name>clearShadowLayer</name>
            <comment>Clear the shadow layer.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>GetStrokeWidth</name>
            <comment>Return the width for stroking.
 A value of 0 strokes in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix.</comment>
            <returntype>float</returntype>
        </method>
        <method>
            <name>SetSweepGradient</name>
            <comment>After setting this shader you can use DoShaderSingle if one shader is set or
 DoShaderComposeXfermodeAvoid,  DoShaderComposeXfermodePixelXor, DoShaderComposeXfermodePorterduffMode 
 if both shaders are set</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Shader1Or2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>cx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>cy</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>colors</name>
                <type>int[]</type>
            </parameter>
            <parameter>
                <name>positions</name>
                <type>float[]</type>
            </parameter>
        </method>
        <method>
            <name>SetLayerRasterizer</name>
            <comment>Set or clear the rasterizer object.		 *</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetDashPathEffect</name>
            <comment>After setting this effect you can use DoPathEffectSingle if one effect is set or
 DoPathEffectSum,  DoPathEffectCompose if both effects are set</comment>
            <returntype>void</returntype>
            <parameter>
                <name>EffectNum1Or2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>intervals</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>phase</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>SetCornerPathEffect</name>
            <comment>After setting this effect you can use DoPathEffectSingle if one effect is set or
 DoPathEffectSum,  DoPathEffectCompose if both effects are set</comment>
            <returntype>void</returntype>
            <parameter>
                <name>EffectNum1Or2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>radius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>SetLinearGradient</name>
            <comment>After setting this shader you can use DoShaderSingle if one shader is set or
 DoShaderComposeXfermodeAvoid,  DoShaderComposeXfermodePixelXor, DoShaderComposeXfermodePorterduffMode 
 if both shaders are set</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Shader1Or2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>x0</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y0</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>colors</name>
                <type>int[]</type>
            </parameter>
            <parameter>
                <name>positions</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>tile</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetFillPath</name>
            <comment>Applies any/all effects (patheffect, stroking) to src, returning the result in dst. The result is that drawing src with this paint will be the same as drawing dst with a default paint (at least from the geometric perspective).</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>src</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPath</type>
            </parameter>
            <parameter>
                <name>dst</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPath</type>
            </parameter>
        </method>
        <method>
            <name>SetPixelXorXfermode</name>
            <comment>Set or clear the PixelXor xfermode object.
 Pass null to clear any previous xfermode</comment>
            <returntype>void</returntype>
            <parameter>
                <name>opColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isDither</name>
            <comment>Helper for getFlags(), returning true if DITHER_FLAG bit is set Dithering affects how colors that are higher precision than the device are down-sampled. No dithering is generally faster, but higher precision colors are just truncated down (e.g. 8888 -&gt; 565). Dithering tries to distribute the error inherent in this process, to reduce the visual artifacts.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>SetShadowLayer</name>
            <comment>This draws a shadow layer below the main layer, with the specified offset and color, and blur radius. If radius is 0, then the shadow layer is removed.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>radius</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dy</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetTextWidths</name>
            <comment>Return the advance widths for the characters in the string.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>widths</name>
                <type>float[]</type>
            </parameter>
        </method>
        <method>
            <name>SetTextAlign</name>
            <comment>Set the paint's text alignment. This controls how the text is positioned relative to its origin. LEFT align means that all of the text will be drawn to the right of its origin (i.e. the origin specifieds the LEFT edge of the text) and so on.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>align</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetEmbossMaskFilter</name>
            <comment>Sets an EmbossFilter</comment>
            <returntype>void</returntype>
            <parameter>
                <name>direction</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>ambient</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>specular</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>blurRadius</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>breakText</name>
            <comment>Measure the text, stopping early if the measured width exceeds maxWidth. Return the number of chars that were measured, and if measuredWidth is not null, return in it the actual width measured.
 Parameters
		text 				The text to measure. Cannot be null.
		measureForwards 	If true, measure forwards, starting with the first character in the string. Otherwise, measure backwards, starting with the last character in the string.
		maxWidth 			The maximum width to accumulate.
		measuredWidth 		Optional. If not null, returns the actual width measured.
 Returns
 	    The number of chars that were measured. Will always be &lt;= abs(count).</comment>
            <returntype>int</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>measureForwards</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>maxWidth</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>measuredWidth</name>
                <type>float[]</type>
            </parameter>
        </method>
        <method>
            <name>SetBlurMaskFilter</name>
            <comment>Sets a MaskFilter</comment>
            <returntype>void</returntype>
            <parameter>
                <name>radius</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>style</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>DoShaderComposeXfermodePixelXor</name>
            <comment>First use setBitmapShader, setLinearGradient, setRadialGradient, setSweepGradient to fill ShaderA and ShaderB</comment>
            <returntype>void</returntype>
            <parameter>
                <name>opColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetDiscretePathEffect</name>
            <comment>After setting this effect you can use DoPathEffectSingle if one effect is set or
 DoPathEffectSum,  DoPathEffectCompose if both effects are set</comment>
            <returntype>void</returntype>
            <parameter>
                <name>EffectNum1Or2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>segmentLength</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>deviation</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>GetDescent</name>
            <comment>Return the distance below (positive) the baseline (descent) based on the current typeface and text size.</comment>
            <returntype>float</returntype>
        </method>
        <method>
            <name>reset</name>
            <comment>Restores the paint to its default settings.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>GetStrokeMiter</name>
            <comment>Return the paint's stroke miter value. Used to control the behavior of miter joins when the joins angle is sharp.</comment>
            <returntype>float</returntype>
        </method>
        <method>
            <name>Set</name>
            <comment>Copy the fields from src into this paint. This is equivalent to calling get() on all of the src fields, and calling the corresponding set() methods on this.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>src</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>SetLightingColorFilter</name>
            <comment>Set or clear the paint's LightingColorfilter, returning the parameter.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mul</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>add</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Create a new paint with the specified flags. Use setFlags() to change these after the paint is created.
 Parameters
		flags: initial flag bits, as if they were passed via setFlags().</comment>
            <returntype>void</returntype>
            <parameter>
                <name>flags</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isFakeBoldText</name>
            <comment>Helper for getFlags(), returning true if FAKE_BOLD_TEXT_FLAG bit is set</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>SetDither</name>
            <comment>Helper for setFlags(), setting or clearing the DITHER_FLAG bit Dithering affects how colors that are higher precision than the device are down-sampled. No dithering is generally faster, but higher precision colors are just truncated down (e.g. 8888 -&gt; 565). Dithering tries to distribute the error inherent in this process, to reduce the visual artifacts.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>dither</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Initialize3</name>
            <comment>Create a new paint, initialized with the attributes in the specified paint parameter.
 Parameters
		paint 	Existing paint used to initialized the attributes of the new paint.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>SetARGB</name>
            <comment>Helper to setColor(), that takes a,r,g,b and constructs the color int</comment>
            <returntype>void</returntype>
            <parameter>
                <name>a</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>r</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>g</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>b</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Create a new paint with default settings.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetStrokeWidth</name>
            <comment>Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>width</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>SetPathDashPathEffect</name>
            <comment>After setting this effect you can use DoPathEffectSingle if one effect is set or
 DoPathEffectSum,  DoPathEffectCompose if both effects are set</comment>
            <returntype>void</returntype>
            <parameter>
                <name>EffectNum1Or2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>shape</name>
                <type>android.graphics.Path</type>
            </parameter>
            <parameter>
                <name>advance</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>phase</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>style</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetFakeBoldText</name>
            <comment>Helper for setFlags(), setting or clearing the FAKE_BOLD_TEXT_FLAG bit</comment>
            <returntype>void</returntype>
            <parameter>
                <name>fakeBoldText</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetAscent</name>
            <comment>Return the distance above (negative) the baseline (ascent) based on the current typeface and text size.
 Returns
       the distance above (negative) the baseline (ascent) based on the current typeface and text size.</comment>
            <returntype>float</returntype>
        </method>
        <method>
            <name>isUnderlineText</name>
            <comment>Helper for getFlags(), returning true if UNDERLINE_TEXT_FLAG bit is set</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>DoPathEffectSingle</name>
            <comment>First use SetCornerPathEffect, SetDashPathEffect, SetDiscretePathEffect, SetPathDashPathEffect to fill Affect1 or Affect2</comment>
            <returntype>void</returntype>
            <parameter>
                <name>EffectNum1Or2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetTypeface</name>
            <comment>Get the paint's typeface object.
 The typeface object identifies which font to use when drawing or measuring text.</comment>
            <returntype>android.graphics.Typeface</returntype>
        </method>
        <method>
            <name>SetAvoidXfermode</name>
            <comment>Set or clear the Avoid xfermode object.
 Pass null to clear any previous xfermode</comment>
            <returntype>void</returntype>
            <parameter>
                <name>opColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>tolerance</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>mode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isAntiAlias</name>
            <comment>Helper for getFlags(), returning true if ANTI_ALIAS_FLAG bit is set AntiAliasing smooths out the edges of what is being drawn, but is has no impact on the interior of the shape. See setDither() and setFilterBitmap() to affect how colors are treated.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>SetFlags</name>
            <comment>Set the paint's flags. Use the Flag enum to specific flag values.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>flags</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetRadialGradient</name>
            <comment>After setting this shader you can use DoShaderSingle if one shader is set or
 DoShaderComposeXfermodeAvoid,  DoShaderComposeXfermodePixelXor, DoShaderComposeXfermodePorterduffMode 
 if both shaders are set</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Shader1Or2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>radius</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>colors</name>
                <type>int[]</type>
            </parameter>
            <parameter>
                <name>positions</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>tile</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetStrokeCap</name>
            <comment>Set the paint's Cap.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>cap</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>DoShaderSingle</name>
            <comment>First use setBitmapShader, setLinearGradient, setRadialGradient, setSweepGradient to fill ShaderA or ShaderB</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Shader1Or2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetStrokeJoin</name>
            <comment>Set the paint's Join.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>join</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>DoShaderComposeXfermodeAvoid</name>
            <comment>First use setBitmapShader, setLinearGradient, setRadialGradient, setSweepGradient to fill ShaderA and ShaderB</comment>
            <returntype>void</returntype>
            <parameter>
                <name>opColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>tolerance</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>mode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetBitmapShader</name>
            <comment>After setting this shader you can use DoShaderSingle if one shader is set or
 DoShaderComposeXfermodeAvoid,  DoShaderComposeXfermodePixelXor, DoShaderComposeXfermodePorterduffMode 
 if both shaders are set</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Shader1Or2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <parameter>
                <name>tileX</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>tileY</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetColor</name>
            <comment>Set the paint's color. Note that the color is an int containing alpha as well as r,g,b. This 32bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b. See the Color class for more details.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>addRasterizerLayer2</name>
            <comment>Add a new layer (above any previous layers) to the rasterizer. The layer will extract those fields that affect the mask from the specified paint, but will not retain a reference to the paint object itself, so it may be reused without danger of side-effects.
 Use SetLayerRasterizer after all layers are set.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
            <parameter>
                <name>dx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dy</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>SetTextSize</name>
            <comment>Set the paint's text size. This value must be &gt; 0</comment>
            <returntype>void</returntype>
            <parameter>
                <name>textSize</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>DoShaderComposeXfermodePorterduffMode</name>
            <comment>First use setBitmapShader, setLinearGradient, setRadialGradient, setSweepGradient to fill ShaderA and ShaderB</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetColorMatrixColorFilter2</name>
            <comment>Set or clear the paint's MatrixColorfilter, returning the parameter.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mat</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABColorMatrix</type>
            </parameter>
        </method>
        <method>
            <name>GetColor</name>
            <comment>Helper to getColor() that just returns the color's alpha value. This is the same as calling getColor() &gt;&gt;&gt; 24. It always returns a value between 0 (completely transparent) and 255 (completely opaque).</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>SetLinearText</name>
            <comment>Helper for setFlags(), setting or clearing the LINEAR_TEXT_FLAG bit</comment>
            <returntype>void</returntype>
            <parameter>
                <name>linearText</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetStyle</name>
            <comment>Return the paint's style, used for controlling how primitives' geometries are interpreted (except for drawBitmap, which always assumes FILL_STYLE).</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>GetTextPath</name>
            <comment>Return the path (outline) for the specified text. Note: just like Canvas.drawText, this will respect the Align setting in the paint.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>end</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>path</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPath</type>
            </parameter>
        </method>
        <method>
            <name>DoPathEffectCompose</name>
            <comment>First use SetCornerPathEffect, SetDashPathEffect, SetDiscretePathEffect, SetPathDashPathEffect to fill Affect1 and Affect2</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>ClearLayerRasterizer</name>
            <comment>Clear the Rasterizer</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>isFilterBitmap</name>
            <comment>Whether or not the bitmap filter is activated. Filtering affects the sampling of bitmaps when they are transformed. Filtering does not affect how the colors in the bitmap are converted into device pixels. That is dependent on dithering and xfermodes.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>setTypeface</name>
            <comment>Set or clear the typeface object.
 Pass null to clear any previous typeface. As a convenience, the parameter passed is also returned.</comment>
            <returntype>android.graphics.Typeface</returntype>
            <parameter>
                <name>typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
        </method>
        <method>
            <name>SetLinearGradient2</name>
            <comment>After setting this shader you can use DoShaderSingle if one shader is set or
 DoShaderComposeXfermodeAvoid,  DoShaderComposeXfermodePixelXor, DoShaderComposeXfermodePorterduffMode 
 if both shaders are set</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Shader1Or2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>x0</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y0</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>color0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>color1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>tile</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetFilterBitmap</name>
            <comment>Helper for setFlags(), setting or clearing the FILTER_BITMAP_FLAG bit. Filtering affects the sampling of bitmaps when they are transformed. Filtering does not affect how the colors in the bitmap are converted into device pixels. That is dependent on dithering and xfermodes.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>filter</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetFlags</name>
            <comment>Return the paint's flags. Use the Flag enum to test flag values.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>isLinearText</name>
            <comment>Helper for getFlags(), returning true if LINEAR_TEXT_FLAG bit is set</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetStrokeJoin</name>
            <comment>Return the paint's stroke join type.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>SetPorterDuffColorFilter</name>
            <comment>Set or clear the paint's PorterDuffColorfilter, returning the parameter.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>srcColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>mode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>addRasterizerLayer</name>
            <comment>Add a new layer (above any previous layers) to the rasterizer. The layer will extract those fields that affect the mask from the specified paint, but will not retain a reference to the paint object itself, so it may be reused without danger of side-effects.
 Use SetLayerRasterizer after all layers are set.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>paint</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPaint</type>
            </parameter>
        </method>
        <method>
            <name>SetColorMatrixColorFilter</name>
            <comment>Set or clear the paint's MatrixColorfilter, returning the parameter.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>array</name>
                <type>float[]</type>
            </parameter>
        </method>
        <method>
            <name>SetTextScaleX</name>
            <comment>Set the paint's horizontal scale factor for text. The default value is 1.0. Values &gt; 1.0 will stretch the text wider. Values &lt; 1.0 will stretch the text narrower.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>scaleX</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>SetStrikeThruText</name>
            <comment>Helper for setFlags(), setting or clearing the STRIKE_THRU_TEXT_FLAG bit</comment>
            <returntype>void</returntype>
            <parameter>
                <name>strikeThruText</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetTextScaleX</name>
            <comment>Return the paint's horizontal scale factor for text. The default value is 1.0.</comment>
            <returntype>float</returntype>
        </method>
        <method>
            <name>GetFontSpacing</name>
            <comment>Return the recommend line spacing based on the current typeface and text size.</comment>
            <returntype>float</returntype>
        </method>
        <method>
            <name>GetTextSkewX</name>
            <comment>Return the paint's horizontal skew factor for text. The default value is 0.</comment>
            <returntype>float</returntype>
        </method>
        <method>
            <name>SetRadialGradient2</name>
            <comment>After setting this shader you can use DoShaderSingle if one shader is set or
 DoShaderComposeXfermodeAvoid,  DoShaderComposeXfermodePixelXor, DoShaderComposeXfermodePorterduffMode 
 if both shaders are set</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Shader1Or2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>radius</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>color0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>color1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>tile</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isStrikeThruText</name>
            <comment>Helper for getFlags(), returning true if STRIKE_THRU_TEXT_FLAG bit is set</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>SetAlpha</name>
            <comment>Helper to setColor(), that only assigns the color's alpha value, leaving its r,g,b values unchanged. Results are undefined if the alpha value is outside of the range [0..255]</comment>
            <returntype>void</returntype>
            <parameter>
                <name>a</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetSweepGradient2</name>
            <comment>After setting this shader you can use DoShaderSingle if one shader is set or
 DoShaderComposeXfermodeAvoid,  DoShaderComposeXfermodePixelXor, DoShaderComposeXfermodePorterduffMode 
 if both shaders are set</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Shader1Or2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>cx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>cy</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>color0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>color1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetStrokeCap</name>
            <comment>Return the paint's Cap, controlling how the start and end of stroked lines and paths are treated.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>SetAntiAlias</name>
            <comment>Helper for setFlags(), setting or clearing the ANTI_ALIAS_FLAG bit AntiAliasing smooths out the edges of what is being drawn, but is has no impact on the interior of the shape. See setDither() and setFilterBitmap() to affect how colors are treated.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>aa</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetTextSize</name>
            <comment>Return the paint's text size.</comment>
            <returntype>float</returntype>
        </method>
        <method>
            <name>SetLocalMatrix</name>
            <comment>Set the shader's local matrix.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Shader1Or2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>localM</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABMatrix</type>
            </parameter>
        </method>
        <method>
            <name>SetTextSkewX</name>
            <comment>Set the paint's horizontal skew factor for text. The default value is 0. For approximating oblique text, use values around -0.25.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>skewX</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>DoPathEffectSum</name>
            <comment>First use SetCornerPathEffect, SetDashPathEffect, SetDiscretePathEffect, SetPathDashPathEffect to fill Affect1 and Affect2</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>GetAlpha</name>
            <comment>Helper to getColor() that just returns the color's alpha value. This is the same as calling getColor() &gt;&gt;&gt; 24. It always returns a value between 0 (completely transparent) and 255 (completely opaque).</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>GetTextAlign</name>
            <comment>Return the paint's Align value for drawing text. This controls how the text is positioned relative to its origin. LEFT align means that all of the text will be drawn to the right of its origin (i.e. the origin specifieds the LEFT edge of the text) and so on.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>SetStrokeMiter</name>
            <comment>Set the paint's stroke miter value. This is used to control the behavior of miter joins when the joins angle is sharp. This value must be &gt;= 0.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>miter</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>SetStyle</name>
            <comment>Set the paint's style, used for controlling how primitives' geometries are interpreted (except for drawBitmap, which always assumes Fill).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>style</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetPorterDuffXfermode</name>
            <comment>Set or clear the PorterDuff xfermode object.
 Pass null to clear any previous xfermode</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mode</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isSubpixelText</name>
            <comment>Helper for getFlags(), returning true if SUBPIXEL_TEXT_FLAG bit is set</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>SetUnderlineText</name>
            <comment>Helper for setFlags(), setting or clearing the UNDERLINE_TEXT_FLAG bit</comment>
            <returntype>void</returntype>
            <parameter>
                <name>underlineText</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>SetSubpixelText</name>
            <comment>Helper for setFlags(), setting or clearing the SUBPIXEL_TEXT_FLAG bit</comment>
            <returntype>void</returntype>
            <parameter>
                <name>subpixelText</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetTextBounds</name>
            <comment>Return in bounds (allocated by the caller) the smallest rectangle that encloses all of the characters, with an implied origin at (0,0).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>end</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>bounds</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>measureText</name>
            <comment>Return the width of the text.</comment>
            <returntype>float</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>FontMetricsLeading</name>
            <returntype>float</returntype>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
            <comment>The recommended additional space to add between lines of text.</comment>
        </property>
        <property>
            <name>FontMetricsTop</name>
            <returntype>float</returntype>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
            <comment>The maximum distance above the baseline for the tallest glyph in the font at a given text size.</comment>
        </property>
        <property>
            <name>FontMetricsDescent</name>
            <returntype>float</returntype>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
            <comment>The recommended distance below the baseline for singled spaced text.</comment>
        </property>
        <property>
            <name>FontMetricsAscent</name>
            <returntype>float</returntype>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
            <comment>The recommended distance above the baseline for singled spaced text.</comment>
        </property>
        <property>
            <name>FontMetricsBottom</name>
            <returntype>float</returntype>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
            <comment>The maximum distance below the baseline for the lowest glyph in the font at a given text size.</comment>
        </property>
        <field>
            <name>flag_STRIKE_THRU_TEXT_FLAG</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PathDashPathEffectStyle_MORPH</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Blur_NORMAL</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>flag_SUBPIXEL_TEXT_FLAG</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_SRC</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_OVERLAY</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>flag_HINTING_ON</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>flag_FILTER_BITMAP_FLAG</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_DST_OVER</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ShaderTileMode_CLAMP</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Align_CENTER</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_SRC_IN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PathDashPathEffectStyle_ROTATE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Join_BEVEL</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_SRC_OUT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ShaderTileMode_REPEAT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_DST_OUT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Cap_BUTT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_SRC_ATOP</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_SCREEN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ShaderTileMode_MIRROR</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Blur_INNER</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Align_LEFT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_DARKEN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_DST_IN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Join_MITER</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>flag_HINTING_OFF</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Join_ROUND</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>flag_FAKE_BOLD_TEXT_FLAG</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Style_FILL</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>AvoidXfermodeMode_AVOID</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PathDashPathEffectStyle_TRANSLATE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_SRC_OVER</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Cap_SQUARE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Blur_SOLID</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_DST_ATOP</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>flag_LINEAR_TEXT_FLAG</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_MULTIPLY</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>AvoidXfermodeMode_TARGET</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Style_FILL_AND_STROKE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>flag_DEV_KERN_TEXT_FLAG</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_ADD</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Style_STROKE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Align_RIGHT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_DST</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>flag_UNDERLINE_TEXT_FLAG</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_CLEAR</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>flag_ANTI_ALIAS_FLAG</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Cap_ROUND</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>flag_DITHER_FLAG</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_LIGHTEN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PorterDuffMode_XOR</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Blur_OUTER</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.AB.ABExtDrawing.ABExtDrawing.ABColorMatrix</name>
        <shortname>ABColorMatrix</shortname>
        <owner>process</owner>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetYUV2RGB</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetRotate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>axis</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>degrees</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>SetSaturation</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>sat</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>Set2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>src</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABColorMatrix</type>
            </parameter>
        </method>
        <method>
            <name>preConcat</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>prematrix</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABColorMatrix</type>
            </parameter>
        </method>
        <method>
            <name>setConcat</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>matA</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABColorMatrix</type>
            </parameter>
            <parameter>
                <name>matB</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABColorMatrix</type>
            </parameter>
        </method>
        <method>
            <name>reset</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetScale</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>rScale</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>gScale</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>bScale</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>aScale</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>Set</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>src</name>
                <type>float[]</type>
            </parameter>
        </method>
        <method>
            <name>SetRGB2YUV</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Initialize2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>src</name>
                <type>float[]</type>
            </parameter>
        </method>
        <method>
            <name>Initialize3</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>src</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABColorMatrix</type>
            </parameter>
        </method>
        <method>
            <name>postConcat</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>postmatrix</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABColorMatrix</type>
            </parameter>
        </method>
        <property>
            <name>Array</name>
            <returntype>float[]</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>com.AB.ABExtDrawing.ABExtDrawing.ABPath</name>
        <shortname>ABPath</shortname>
        <owner>process</owner>
        <method>
            <name>addRoundRect</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>rect</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRectF</type>
            </parameter>
            <parameter>
                <name>rx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>ry</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dir</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>quadTo</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>x1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>addRoundRect2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>rect</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRectF</type>
            </parameter>
            <parameter>
                <name>radii</name>
                <type>float[]</type>
            </parameter>
            <parameter>
                <name>dir</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetLastPoint</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>dx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dy</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>addCircle</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>radius</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dir</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isRect</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>rect</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRectF</type>
            </parameter>
        </method>
        <method>
            <name>rewind</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>rLineTo</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>dx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dy</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>close</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>transform</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>matrix</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABMatrix</type>
            </parameter>
        </method>
        <method>
            <name>isEmpty</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>SetFillType</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>cubicTo</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>x1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x3</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y3</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>addArc</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>oval</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRectF</type>
            </parameter>
            <parameter>
                <name>startAngle</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>sweepAngle</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>SetDirection</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>reset</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>offset</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>dx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dy</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>path</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPath</type>
            </parameter>
        </method>
        <method>
            <name>isInverseFillType</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>moveTo</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>transform2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>matrix</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABMatrix</type>
            </parameter>
            <parameter>
                <name>path</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPath</type>
            </parameter>
        </method>
        <method>
            <name>addPath3</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>src</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPath</type>
            </parameter>
            <parameter>
                <name>dx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dy</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>addPath2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>src</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPath</type>
            </parameter>
            <parameter>
                <name>matrix</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABMatrix</type>
            </parameter>
        </method>
        <method>
            <name>rQuadTo</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>dx1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dy1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dx2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dy2</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>offset2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>dx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dy</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dst</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPath</type>
            </parameter>
        </method>
        <method>
            <name>rCubicTo</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>x1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y1</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y2</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>x3</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y3</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>lineTo</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>addRect</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>rect</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRectF</type>
            </parameter>
            <parameter>
                <name>dir</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>addOval</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>oval</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRectF</type>
            </parameter>
            <parameter>
                <name>dir</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>toggleInverseFillType</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>rMoveTo</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>dx</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dy</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>GetFillType</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>incReverse</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>extraPtCount</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>addRect2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>right</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>bottom</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>dir</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>arcTo2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>oval</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRectF</type>
            </parameter>
            <parameter>
                <name>startAngle</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>sweepAngle</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>forceMoveTo</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>arcTo</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>oval</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRectF</type>
            </parameter>
            <parameter>
                <name>startAngle</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>sweepAngle</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>GetDirection</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>addPath</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>src</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABPath</type>
            </parameter>
        </method>
        <method>
            <name>computeBounds</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>bounds</name>
                <type>com.AB.ABExtDrawing.ABExtDrawing.ABRectF</type>
            </parameter>
            <parameter>
                <name>exact</name>
                <type>boolean</type>
            </parameter>
        </method>
        <field>
            <name>FillType_EVEN_ODD</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FillType_WINDING</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FillType_INVERSE_EVEN_ODD</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FillType_INVERSE_WINDING</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Direction_CCW</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Direction_CW</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.AB.ABExtDrawing.ABExtDrawing.ABRectF</name>
        <shortname>ABRectF</shortname>
        <owner>process</owner>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>left</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>top</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>right</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>bottom</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>isInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Bottom</name>
            <returntype>float</returntype>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Right</name>
            <returntype>float</returntype>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>CenterX</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>float</returntype>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>CenterY</name>
            <returntype>float</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Left</name>
            <returntype>float</returntype>
            <parameter>
                <name>value</name>
                <type>float</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>com.AB.ABExtDrawing.ABExtDrawing.ABRgbFunctions</name>
        <shortname>ABRgbFunctions</shortname>
        <comment>Helper class for manipulating RGB values. All functions are static.
 This is NOT a standard Android class.</comment>
        <owner>process</owner>
        <method>
            <name>getR</name>
            <comment>Extracts red byte from input ARGB word.
 The bit fields in ARGB word are unsigned, ranging from 0x00 to 0xff.
 To convert these to the returned signed byte value we must add
 Byte.MIN_VALUE.
ARGB: the input color ARGB word.
Return type: @return:the red byte value, converted to a signed byte</comment>
            <returntype>byte</returntype>
            <parameter>
                <name>ARGB</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getB</name>
            <comment>Extracts blue byte from input ARGB word.
 The bit fields in ARGB word are unsigned, ranging from 0x00 to 0xff.
 To convert these to the returned signed byte value we must add
 Byte.MIN_VALUE.
ARGB: the input color ARGB word.
Return type: @return:the blue byte value, converted to a signed byte</comment>
            <returntype>byte</returntype>
            <parameter>
                <name>ARGB</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>toRgb</name>
            <comment>Converts byte R, G, and B values to an ARGB word.
 byte is a signed data type but the ARGB word has unsigned bit fields.
 In other words the minimum byte value is Byte.MIN_VALUE but the color black in
 the ARGB word is represented as 0x00. So we must subtract Byte.MIN_VALUE to get an
 unsigned byte value before shifting and combining the bit fields.
R: input signed red byte
G: input signed green byte
B: input signed blue byte
Return type: @return:the color ARGB word.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>R</name>
                <type>byte</type>
            </parameter>
            <parameter>
                <name>G</name>
                <type>byte</type>
            </parameter>
            <parameter>
                <name>B</name>
                <type>byte</type>
            </parameter>
        </method>
        <method>
            <name>getMaxDiff</name>
            <comment>Computes maximum difference (largest difference in
 color, R, G, or B) of two color values.
ARGB1: first color
ARGB2: second color
Return type: @return:largest difference. Will always be &gt;= 0,
 &lt;= 256.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>ARGB1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ARGB2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getVecDiff</name>
            <comment>Return "vector" difference of Rgb values. Treating each Rgb value
 as a 3-element vector form the value (ARGB-ARGBTarg) . ARGBVec where
 . is dot product. Useful for determining whether an Rgb value is
 near another weighted the different channels differently.
ARGB: tested Rgb value
ARGBTarg: target Rgb value
ARGBVec: weighting
Return type: @return:(ARGB-ARGBTarg) . ARGBVec where . is dot product and the
 Rgb values are treated as 3-vectors.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>ARGB</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ARGBTarg</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ARGBVec</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getAbsDiff</name>
            <comment>Compare two RgbVals in absolute value.
Return type: @return:sum of absolute differences between pixel values</comment>
            <returntype>int</returntype>
            <parameter>
                <name>rgb1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>rgb2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>toSignedByte</name>
            <comment>Converts from an unsigned bit field (as stored in an ARGB word
 to a signed byte value (that we can do computation on).
b: the unsigned byte value.
Return type: @return:the signed byte value</comment>
            <returntype>byte</returntype>
            <parameter>
                <name>b</name>
                <type>byte</type>
            </parameter>
        </method>
        <method>
            <name>toUnsignedInt</name>
            <comment>Converts from a signed byte value (which we do computation on)
 to an unsigned bit field (as stored in an ARGB word). The result
 is returned as an int because the unsigned 8 bit value cannot be
 represented as a byte.
b: the signed byte value.
Return type: @return:the unsigned bit field</comment>
            <returntype>int</returntype>
            <parameter>
                <name>b</name>
                <type>byte</type>
            </parameter>
        </method>
        <method>
            <name>toString</name>
            <comment>Provide a way to turn color values into strings
ARGB: the input color value
Return type: @return:a string describing the color</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>ARGB</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getSqrDiff</name>
            <comment>Compare two RgbVals in sum of squares difference.
Return type: @return:sum of squares differences between pixel values</comment>
            <returntype>int</returntype>
            <parameter>
                <name>rgb1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>rgb2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getG</name>
            <comment>Extracts green byte from input ARGB word.
 The bit fields in ARGB word are unsigned, ranging from 0x00 to 0xff.
 To convert these to the returned signed byte value we must add
 Byte.MIN_VALUE.
ARGB: the input color ARGB word.
Return type: @return:the green byte value, converted to a signed byte</comment>
            <returntype>byte</returntype>
            <parameter>
                <name>ARGB</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getProportionateDiff</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>ARGB1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ARGB2</name>
                <type>int</type>
            </parameter>
        </method>
    </class>
    <version>1.7</version>
    <author>Alain Bailleul</author>
</root>
