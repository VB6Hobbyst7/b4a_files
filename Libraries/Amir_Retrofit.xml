<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.07</doclet-version-NOT-library-version>
    <class>
        <name>aghajari.retrofit.Amir_CallBack</name>
        <shortname>Amir_CallBack</shortname>
        <comment>&lt;b&gt; Call : &lt;/b&gt;
 An invocation of a Retrofit method that sends a request to a webserver and returns a response.
 Each call yields its own HTTP request and response pair. Use {@link #clone} to make multiple
 calls with the same parameters to the same webserver; this may be used to implement polling or
 to retry a failed call.

 Calls may be executed synchronously with  Execute, or asynchronously with Enqueue. 
 In either case the call can be canceled at any time with Cancel. A call that
 is busy writing its request or reading its response may receive a  IOException this is
 working as designed.
 
 &lt;b&gt; CallBack : &lt;/b&gt;
 Communicates responses from a server or offline requests. One and only one method will be
 invoked in response to a given request.

 Callback methods are executed using the  Retrofit callback executor. When none is
 specified, the following defaults are used:
 
 Android: Callbacks are executed on the application's main (UI) thread.
 JVM: Callbacks are executed on the background thread which performed the request.</comment>
        <owner>process</owner>
        <event>onFailure (Call as Amir_CallBack,Message as String)


'Invoked for a received HTTP response.
</event>
        <event>onResponse (Call as Amir_CallBack,Response as Amir_RetrofitResponse,Body as Amir_ResponseBody)
'Invoked when a network exception occurred talking to the server or when an unexpected&#xd;
'exception occurred creating the request or processing the response.
</event>
        <method>
            <name>isCanceled</name>
            <comment>True if was called.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>isExecuted</name>
            <comment>Returns true if this call has been either Executed or Enqueued.
 It is an error to execute or enqueue a call more than once.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Execute</name>
            <comment>Synchronously send the request and return its response.
 _________________________________________________________
 &lt;b&gt; NetworkOnMainThread exception : &lt;/b&gt;&lt;i&gt;You Should Disable Strict Mode!&lt;/i&gt;
 _________________________________________________________
 &lt;b&gt; Example : &lt;/b&gt;&lt;code&gt;
 DisableStrictMode 
 
 Dim Call As Amir_CallBack = _ 
 Retrofit.RequestWithCallback(Null,"Get",Array ("URL",CreateMap()))
 Dim Response As Amir_RetrofitResponse = Call.Execute
 Log(Response.isSuccessful)

 Sub DisableStrictMode
  Dim jo As JavaObject
  jo.InitializeStatic("android.os.Build.VERSION")
 If jo.GetField("SDK_INT") &gt; 9 Then
  Dim policy As JavaObject
  policy = policy.InitializeNewInstance("android.os.StrictMode.ThreadPolicy.Builder", Null)
  policy = policy.RunMethodJO("permitAll", Null).RunMethodJO("build", Null)
  Dim sm As JavaObject
  sm.InitializeStatic("android.os.StrictMode").RunMethod("setThreadPolicy", Array(policy))
 End If
End Sub &lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitResponse</returntype>
        </method>
        <method>
            <name>Cancel</name>
            <comment>Cancel this call. An attempt will be made to cancel in-flight calls, and if the call has not
 yet been executed it never will be.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Enqueue</name>
            <comment>Asynchronously send the request and notify callback of its response or if an error
 occurred talking to the server, creating the request, or processing the response.
 _____________________________________________________________________________________
 &lt;b&gt; Example : &lt;/b&gt; &lt;code&gt;
	Dim Call As Amir_CallBack = _
Retrofit.RequestWithCallback(Null,"Post",Array ("URL",PARAMS))
Call.Enqueue("Amir",Null)

Sub Amir_onResponse (Call As Amir_CallBack,Response As Amir_RetrofitResponse,Body As Amir_ResponseBody)
	If Response.isSuccessful Then
		Log(Body.String)
		Else
		Log(Response.ErrorBody.String)
	End If
End Sub
Sub Amir_onFailure (Call As Amir_CallBack,Message As String)
	Log(Message)
End Sub &lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Sender</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>RequestHeaders</name>
            <comment>The original HTTP RequestHeaders.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>Call</name>
                <type>retrofit2.Call</type>
            </parameter>
        </method>
        <method>
            <name>Clone</name>
            <comment>Create a new, identical call to this one which can be enqueued or executed even if this call
 has already been.</comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>RequestMethod</name>
            <returntype>java.lang.String</returntype>
            <comment>The original HTTP Request Method Name.</comment>
        </property>
        <property>
            <name>RequestHeadersNames</name>
            <returntype>java.lang.Object[]</returntype>
            <comment>The original HTTP RequestHeaders Names Array as String.</comment>
        </property>
        <property>
            <name>RequestBody</name>
            <returntype>okhttp3.RequestBody</returntype>
            <comment>The original HTTP RequestBody.</comment>
        </property>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_ConnectionSpec</name>
        <shortname>Amir_ConnectionSpec</shortname>
        <objectwrapper>okhttp3.ConnectionSpec</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsCompatible</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>socket</name>
                <type>javax.net.ssl.SSLSocket</type>
            </parameter>
        </method>
        <method>
            <name>Initializer</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_ConnectionSpec.ConnectionSpecBuilder</returntype>
            <parameter>
                <name>ConnectionSpec</name>
                <type>okhttp3.ConnectionSpec</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>MakeList</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_ConnectionSpec.Lists</returntype>
        </method>
        <property>
            <name>SupportsTlsExtensions</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TlsVersions</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IsTls</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CipherSuites</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <field>
            <name>MODERN_TLS</name>
            <comment></comment>
            <returntype>okhttp3.ConnectionSpec</returntype>
        </field>
        <field>
            <name>TLS_1_2_JAVANAME</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>COMPATIBLE_TLS</name>
            <comment></comment>
            <returntype>okhttp3.ConnectionSpec</returntype>
        </field>
        <field>
            <name>TLS_1_1</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>TLS_1_0</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>SSL_3_0_JAVANAME</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>TLS_1_1_JAVANAME</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>SSL_3_0</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>TLS_1_0_JAVANAME</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>TLS_1_3</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>TLS_1_3_JAVANAME</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>TLS_1_2</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>CLEARTEXT</name>
            <comment></comment>
            <returntype>okhttp3.ConnectionSpec</returntype>
        </field>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_ConnectionSpec.ConnectionSpecBuilder</name>
        <owner>process</owner>
        <method>
            <name>SupportsTlsExtensions</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_ConnectionSpec.ConnectionSpecBuilder</returntype>
            <parameter>
                <name>supportsTlsExtensions</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>AllEnabledTlsVersions</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_ConnectionSpec.ConnectionSpecBuilder</returntype>
        </method>
        <method>
            <name>Build</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>AllEnabledCipherSuites</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_ConnectionSpec.ConnectionSpecBuilder</returntype>
        </method>
        <method>
            <name>TlsVersions</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_ConnectionSpec.ConnectionSpecBuilder</returntype>
            <parameter>
                <name>tlsVersions</name>
                <type>java.lang.String[]</type>
            </parameter>
        </method>
        <method>
            <name>CipherSuites</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_ConnectionSpec.ConnectionSpecBuilder</returntype>
            <parameter>
                <name>cipherSuites</name>
                <type>java.lang.String[]</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_ConnectionSpec.Lists</name>
        <objectwrapper>java.util.List</objectwrapper>
        <owner>process</owner>
        <method>
            <name>Add</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_ConnectionSpec.Lists</returntype>
            <parameter>
                <name>ConnectionSpec</name>
                <type>okhttp3.ConnectionSpec</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_Gson</name>
        <shortname>Amir_Json</shortname>
        <comment>Json Parser And Json Producer using Gson</comment>
        <owner>process</owner>
        <method>
            <name>JsonParserToString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>JsonString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isJsonNull</name>
            <comment>provides check for verifying if this element represents a null value or not.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>JsonString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>FromJsonMap</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_Json</returntype>
            <parameter>
                <name>json</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ToJsonTree</name>
            <comment></comment>
            <returntype>java.lang.Class</returntype>
            <parameter>
                <name>json</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>fromJsonTree2</name>
            <comment>Get Json Tree Use com.google.gson.JsonParser
 &lt;b&gt; Example : &lt;/b&gt;&lt;code&gt;
 Dim src As String = Json.fromJsonTree("JsonString","String")&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>JsonString</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Type</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isJsonArray</name>
            <comment>provides check for verifying if this element is an array or not.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>JsonString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Object Name : GSON (Hide)</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>fromJsonTree</name>
            <comment>Get Json Tree
 &lt;b&gt; Example : &lt;/b&gt;&lt;code&gt;
 Dim src As String = Json.fromJsonTree("JsonString","String")&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>JsonString</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Type</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isJSONValid</name>
            <comment>check whether a given string Can Parse in JsonParser or no
 Use JsonSyntaxException
 &lt;b&gt;Example : &lt;/b&gt;&lt;code&gt;
 if Json.isJSONValid("JsonString") then
 'Now You Can parse this jsonString
 End if&lt;/code&gt;</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>jsonInString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isJsonPrimitive</name>
            <comment>provides check for verifying if this element is a primitive or not.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>JsonString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getAsList</name>
            <comment>Get List Of Objects</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>JsonString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Initialize With Custom GsonBuilder</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Builder</name>
                <type>aghajari.retrofit.Amir_JsonBuilder</type>
            </parameter>
        </method>
        <method>
            <name>ToJson</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>src</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>isJsonObject</name>
            <comment>provides check for verifying if this element is a Json object or not.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>JsonString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>FromJson</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>json</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isJSONValidMessage</name>
            <comment>Return OK Or Error Message</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>jsonInString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isJSONValid3</name>
            <comment>check whether a given string is valid json or no | Start With { or [ And 
 Ends With } or ] | Use JsonSyntaxException.
 &lt;b&gt;Example : &lt;/b&gt;&lt;code&gt;
 if Json.isJSONValid("JsonString") And RB.isJSONValid3("JsonString") then
 'Now You Can parse this jsonString
 End if&lt;/code&gt;</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>jsonInString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isJSONValid2</name>
            <comment>check whether a given string Can Parse and use in JsonParser or no
 Use JsonSyntaxException
 &lt;b&gt;Example : &lt;/b&gt;&lt;code&gt;
 if Json.isJSONValid2("JsonString") then
 'Now You Can parse this jsonString
 End if&lt;/code&gt;</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>jsonInString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ToJsonTree2</name>
            <comment>Get Json Tree
 &lt;b&gt; Example : &lt;/b&gt;&lt;code&gt;
 Dim JsonString As String = Json.toJsonTree2("mySrc","String")&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>src</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>Type</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_Json</name>
        <shortname>Amir_JsonMap</shortname>
        <comment>A map of comparable keys to values. Unlike &lt;b&gt;TreeMap&lt;/b&gt;, this class uses
 insertion order for iteration order. Comparison order is only used as an
 optimization for efficient insertion and removal.

&lt;b&gt;Note : &lt;/b&gt;
 &lt;b&gt;&lt;i&gt;LinkedTreeMap : &lt;/i&gt;&lt;/b&gt;
 &lt;i&gt;This implementation was derived from Android 4.1's TreeMap class.&lt;/i&gt;
 &lt;b&gt;&lt;i&gt;LinkedHashTreeMap : &lt;/i&gt;&lt;/b&gt;
 &lt;i&gt;This implementation was derived from Android 4.1's TreeMap and
 LinkedHashMap classes.&lt;/i&gt;</comment>
        <owner>process</owner>
        <method>
            <name>Replace</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Remove2</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>ContainsValue</name>
            <comment>Returns true if this map maps one or more keys to the specified value. 
 More formally, returns true if and only if this map contains at least 
 one mapping to a value v such that (value==null ? v==null : value.equals(v)). 
 This operation will probably require time linear in the map size for
 most implementations. 
 &lt;b&gt;Parameters:&lt;/b&gt;
 value whose presence in this map is to be tested
 &lt;b&gt;Returns:&lt;/b&gt;
 true if a mapping to value exists; false otherwise</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>value</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Replace2</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>GetMap</name>
            <comment>Convert Json TreeMap To B4A Map
 Useing entrySet...
 &lt;b&gt;Example : &lt;/b&gt; &lt;code&gt;
 Dim M as Map = JsonMap.GetMap
 Log(M.Get("Key")) &lt;/code&gt;</comment>
            <returntype>anywheresoftware.b4a.objects.collections.Map</returntype>
        </method>
        <method>
            <name>Remove</name>
            <comment>Removes the mapping for this key from this TreeMap if present. 
 &lt;b&gt;Parameters:&lt;/b&gt;
 key for which mapping should be removed
 &lt;b&gt;Returns:&lt;/b&gt;
 the previous value associated with key, or null if there was no 
 mapping for key. (A null return can also indicate that the map 
 previously associated null with key.)</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initialize With set Auto Map
 &lt;b&gt;Example : &lt;/b&gt; &lt;code&gt;
 Sub Amir_onNext (ResponseBody as Amir_ResponseBody)
 
 'Get String of Request
 Dim Json As Amir_Json
 Json.Initialize
 Dim Res as String = ResponseBody.String
 
 'example : [{id=0, name=amir},{id=1, name=retrofit}]
 Log(Json.fromJson(Res))
 
 'Check Json
 if Json.isJsonArray(Res) Then
 'Convert To List
 Dim List as List = Json.fromJson(Res)
 
 'List Item's To Amir_JsonMap
 For i = 0 to List.Size-1
 Dim Json as Amir_JsonMap
 Json.Initialize(List.Get(i))
 Log(Json.Get("name"))
 Next
 End if
 End Sub &lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Linked</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Put</name>
            <comment>Associates the specified value with the specified key in this map.
 If the map previously contained a mapping for the key, the old value 
 is replaced.  
 &lt;b&gt;Parameters:&lt;/b&gt;
 key with which the specified value is to be associated
 value to be associated with the specified key
 &lt;b&gt;Returns:&lt;/b&gt;
 the previous value associated with key, or null if there was no mapping
 for key. (A null return can also indicate that the map previously 
 associated null with key.)</comment>
            <returntype>void</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>ContainsKey</name>
            <comment>Returns true if this map contains a mapping for the specified key.
 &lt;b&gt;Parameters:&lt;/b&gt;
 key whose presence in this map is to be tested
 &lt;b&gt;Returns:&lt;/b&gt;
 true if this map contains a mapping for the specified key</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Clear</name>
            <comment>Removes all of the mappings from this map. The map will be
 empty after this call returns.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Equals</name>
            <comment>Compares the specified object with this map for equality. 
 Returns true if the given object is also a map and the two maps 
 represent the same mappings. More formally, two maps m1 and m2 
 represent the same mappings if m1.entrySet().equals(m2.entrySet()).
 This ensures that the equals method works properly across different
 implementations of the Map interface. This implementation first
 checks if the specified object is this map; if so it returns true.
 Then, it checks if the specified object is a map whose size is 
 identical to the size of this map; if not, it returns false. If so,
 it iterates over this map's entrySet collection, and checks that the 
 specified map contains each mapping that this map contains. If the 
 specified map fails to contain such a mapping, false is returned. 
 If the iteration completes, true is returned.
 &lt;b&gt;Parameters:&lt;/b&gt;
 object to be compared for equality with this map
 &lt;b&gt;Returns:&lt;/b&gt;
 true if the specified object is equal to this map</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Initialize4</name>
            <comment>Create New LinkedTreeMap Or LinkedHashTreeMap</comment>
            <returntype>void</returntype>
            <parameter>
                <name>isTreeMap</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Initialize3</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>LinkedTreeMap</name>
                <type>com.google.gson.internal.LinkedTreeMap</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>LinkedHashTreeMap</name>
                <type>com.google.gson.internal.LinkedHashTreeMap</type>
            </parameter>
        </method>
        <method>
            <name>Get</name>
            <comment>Returns the value to which the specified key is mapped, or null if 
 this map contains no mapping for the key. More formally, if this map 
 contains a mapping from a key k to a value v such that key compares 
 equal to k according to the map's ordering, then this method returns v;
 otherwise it returns null. (There can be at most one such mapping.) 
 A return value of null does not necessarily indicate that the map 
 contains no mapping for the key; it's also possible that the map 
 explicitly maps the key to null. The containsKey operation may be used 
 to distinguish these two cases.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>PutAll</name>
            <comment>Copies all of the mappings from the specified map to this map. These 
 mappings replace any mappings that this map had for any of the keys 
 currently in the specified map.  
 &lt;b&gt;Parameters:&lt;/b&gt;
 map mappings to be stored in this map</comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg</name>
                <type>java.util.Map</type>
            </parameter>
        </method>
        <method>
            <name>GetOrDefault</name>
            <comment>Try To Get Value From Key (arg0)
 if key is null : get a Defualt Value(arg1)</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <property>
            <name>LinkedTreeMap</name>
            <returntype>com.google.gson.internal.LinkedTreeMap</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LinkedHashTreeMap</name>
            <returntype>com.google.gson.internal.LinkedHashTreeMap</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Size</name>
            <returntype>int</returntype>
            <comment>Returns the number of key-value mappings in this map.</comment>
        </property>
        <property>
            <name>Keys</name>
            <returntype>java.lang.Object[]</returntype>
            <comment>Returns a Array of the keys contained in this map</comment>
        </property>
        <property>
            <name>Values</name>
            <returntype>java.lang.Object[]</returntype>
            <comment>Returns a List of the values contained in this map.</comment>
        </property>
        <property>
            <name>isEmpty</name>
            <returntype>boolean</returntype>
            <comment>This implementation returns size() == 0.</comment>
        </property>
        <field>
            <name>isTreeMap</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </field>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_JsonBuilder</name>
        <shortname>Amir_JsonBuilder</shortname>
        <comment>&lt;p&gt;Use this builder to construct a Amir_Json instance when you need to set configuration
 options other than the default. For Amir_Json with default configuration, it is simpler to
 use new Amir_Json. Amir_JsonBuilder is best used by creating it, and then invoking its
 various configuration methods, and finally calling create.&lt;/p&gt;</comment>
        <owner>process</owner>
        <event>ShouldSkipClass (ClassName As String) As Boolean</event>
        <event>ShouldSkipField (FieldAttributesName As String) As Boolean</event>
        <event>TranslateName (FieldName as String) as String</event>
        <method>
            <name>setFieldNamingPolicy</name>
            <comment>Configures Gson to apply a specific naming policy to an object's field during serialization
 and deserialization.
 IDENTITY | LOWER_CASE_WITH_DASHES | LOWER_CASE_WITH_UNDERSCORES 
 UPPER_CAMEL_CASE | UPPER_CAMEL_CASE_WITH_SPACES</comment>
            <returntype>aghajari.retrofit.Amir_JsonBuilder</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetDateFormat</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_JsonBuilder</returntype>
            <parameter>
                <name>style</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GenerateNonExecutableJson</name>
            <comment>Makes the output JSON non-executable in Javascript by prefixing the generated JSON with some
 special text. This prevents attacks from third-party sites through script sourcing.</comment>
            <returntype>aghajari.retrofit.Amir_JsonBuilder</returntype>
        </method>
        <method>
            <name>setVersion</name>
            <comment>Configures Gson to enable versioning support.

 ignoreVersionsAfter : any field or type marked with a version higher than this value
 are ignored during serialization or deserialization.</comment>
            <returntype>aghajari.retrofit.Amir_JsonBuilder</returntype>
            <parameter>
                <name>ignoreVersionsAfter</name>
                <type>double</type>
            </parameter>
        </method>
        <method>
            <name>ExcludeFieldsWithModifiers</name>
            <comment>Configures Gson to excludes all class fields that have the specified modifiers. By default,
 Gson will exclude all fields marked transient or static. This method will override that
 behavior.</comment>
            <returntype>aghajari.retrofit.Amir_JsonBuilder</returntype>
            <parameter>
                <name>modifiers</name>
                <type>int[]</type>
            </parameter>
        </method>
        <method>
            <name>SerializeNulls</name>
            <comment>Configure Gson to serialize null fields. By default, Gson omits all fields that are null
 during serialization.</comment>
            <returntype>aghajari.retrofit.Amir_JsonBuilder</returntype>
        </method>
        <method>
            <name>setFieldNamingStrategy</name>
            <comment>Configures Gson to apply a specific naming policy strategy to an object's field during
 serialization and deserialization.
 &lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt; EventName_TranslateName (FieldName as String) as String &lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_JsonBuilder</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>DisableInnerClassSerialization</name>
            <comment>Configures Gson to exclude inner classes during serialization.</comment>
            <returntype>aghajari.retrofit.Amir_JsonBuilder</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_JsonBuilder</returntype>
        </method>
        <method>
            <name>setLenient</name>
            <comment>By default, Gson is strict and only accepts JSON as specified by
 RFC 4627. This option makes the parser
 liberal in what it accepts.</comment>
            <returntype>aghajari.retrofit.Amir_JsonBuilder</returntype>
        </method>
        <method>
            <name>DisableHtmlEscaping</name>
            <comment>By default, Gson escapes HTML characters such as &amp;lt; &amp;gt; etc. Use this option to configure
 Gson to pass-through HTML characters as is.</comment>
            <returntype>aghajari.retrofit.Amir_JsonBuilder</returntype>
        </method>
        <method>
            <name>SetDateFormat3</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_JsonBuilder</returntype>
            <parameter>
                <name>dateStyle</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>timeStyle</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>addSerializationExclusionStrategy</name>
            <comment>Configures Gson to apply the passed in exclusion strategy during serialization.
 If this method is invoked numerous times with different exclusion strategy objects
 then the exclusion strategies that were added will be applied as a disjunction rule.
 This means that if one of the added exclusion strategies suggests that a field (or
 class) should be skipped then that field (or object) is skipped during its
 serialization.
 
 &lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_ShouldSkipClass (ClassName As String) As Boolean &lt;/code&gt;
 &lt;code&gt;EventName_ShouldSkipField (FieldAttributesName As String) As Boolean &lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_JsonBuilder</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addDeserializationExclusionStrategy</name>
            <comment>Configures Gson to apply the passed in exclusion strategy during deserialization.
 If this method is invoked numerous times with different exclusion strategy objects
 then the exclusion strategies that were added will be applied as a disjunction rule.
 This means that if one of the added exclusion strategies suggests that a field (or
 class) should be skipped then that field (or object) is skipped during its
 deserialization.

 &lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_ShouldSkipClass (ClassName As String) As Boolean &lt;/code&gt;
 &lt;code&gt;EventName_ShouldSkipField (FieldAttributesName As String) As Boolean &lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_JsonBuilder</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SerializeSpecialFloatingPointValues</name>
            <comment>Section 2.4 of JSON specification disallows
 special double values (NaN, Infinity, -Infinity). However,
 Javascript specification (see section 4.3.20, 4.3.22, 4.3.23) allows these values as valid 
 Javascript values. Moreover, most JavaScript engines will accept these special values in JSON
 without problem. So, at a practical level, it makes sense to accept these values as valid
 JSON even though JSON specification disallows them.</comment>
            <returntype>aghajari.retrofit.Amir_JsonBuilder</returntype>
        </method>
        <method>
            <name>setLongSerializationPolicy</name>
            <comment>Configures Gson to apply a specific serialization policy for {@code Long} and {@code long}
 objects.
 DEFAULT | STRING</comment>
            <returntype>aghajari.retrofit.Amir_JsonBuilder</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setPrettyPrinting</name>
            <comment>Configures Gson to output Json that fits in a page for pretty printing. This option only
 affects Json serialization.</comment>
            <returntype>aghajari.retrofit.Amir_JsonBuilder</returntype>
        </method>
        <method>
            <name>Build</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_Gson</returntype>
        </method>
        <method>
            <name>SetDateFormat2</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_JsonBuilder</returntype>
            <parameter>
                <name>pattern</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ExcludeFieldsWithoutExposeAnnotation</name>
            <comment>Configures Gson to exclude all fields from consideration for serialization or deserialization
 that do not have the  com.google.gson.annotations.Expose annotation.</comment>
            <returntype>aghajari.retrofit.Amir_JsonBuilder</returntype>
        </method>
        <method>
            <name>EnableComplexMapKeySerialization</name>
            <comment>Enabling this feature will only change the serialized form if the map key is
 a complex type (i.e. non-primitive) in its &lt;strong&gt;serialized&lt;/strong&gt; JSON
 form. The default implementation of map serialization uses  toString()
 on the key; however, when this is called then one of the following cases</comment>
            <returntype>aghajari.retrofit.Amir_JsonBuilder</returntype>
        </method>
        <field>
            <name>IDENTITY</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>UPPER_CAMEL_CASE_WITH_SPACES</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>UPPER_CAMEL_CASE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>LOWER_CASE_WITH_UNDERSCORES</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>STRING</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>DEFAULT</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>LOWER_CASE_WITH_DASHES</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_NetworkInfo</name>
        <owner>process</owner>
        <property>
            <name>TypeName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IsConnectedOrConnecting</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DescribeContents</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DetailedState</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ExtraInfo</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IsFailover</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Reason</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IsRoaming</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SubtypeName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>State</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IsAvailable</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Subtype</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IsConnected</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <field>
            <name>STATE_CONNECTING</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>DETAILED_SCANNING</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>DETAILED_DISCONNECTING</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>DETAILED_SUSPENDED</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>DETAILED_AUTHENTICATING</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>DETAILED_FAILED</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>STATE_SUSPENDED</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>STATE_DISCONNECTED</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>STATE_DISCONNECTING</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>DETAILED_CONNECTED</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>DETAILED_DISCONNECTED</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>DETAILED_IDLE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>STATE_CONNECTED</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>DETAILED_VERIFYING_POOR_LINK</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>DETAILED_CONNECTING</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>DETAILED_BLOCKED</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>STATE_UNKNOWN</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>DETAILED_OBTAINING_IPADDR</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_ResponseBody</name>
        <shortname>Amir_ResponseBody</shortname>
        <comment>this class is for get Information of Data Request 
 
 A one-shot stream from the origin server to the client application with the raw bytes of the
 response body. Each response body is supported by an active connection to the webserver. This
 imposes both obligations and limits on the client application.

 &lt;h3&gt;The response body must be closed.&lt;/h3&gt;</comment>
        <owner>process</owner>
        <method>
            <name>Import</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ResponseBody</name>
                <type>okhttp3.ResponseBody</type>
            </parameter>
        </method>
        <method>
            <name>Initializer</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_ResponseBody.Initializer</returntype>
            <parameter>
                <name>MediaType</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isReleased</name>
            <comment>Check the Response .</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>close</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Release</name>
            <comment>Release This Response.
 &lt;b&gt; Example : &lt;/b&gt;&lt;code&gt;
 if RespnseBody.isReleased=False then
 RespnseBody.Release
 End if &lt;/code&gt;</comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Bytes</name>
            <returntype>byte[]</returntype>
            <comment>Returns the response as a byte array.

 This method loads entire response body into memory. If the response body is very large this
 may trigger an  OutOfMemoryError. Prefer to stream the response body if this is a
 possibility for your response.</comment>
        </property>
        <property>
            <name>Type</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the Content-Type header for this body.</comment>
        </property>
        <property>
            <name>SubType</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the Content-SubType header for this body.</comment>
        </property>
        <property>
            <name>byteStream</name>
            <returntype>java.io.InputStream</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Length</name>
            <returntype>long</returntype>
            <comment>Returns the number of bytes in that will returned by  bytes, or byteStream, or
 -1 if unknown.</comment>
        </property>
        <property>
            <name>Charset</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>String</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the response as a string decoded with the charset of the Content-Type header. If that
 header is either absent or lacks a charset, this will attempt to decode the response body in
 accordance to its BOM or UTF-8. Closes  ResponseBody automatically.

 This method loads entire response body into memory. If the response body is very large this
 may trigger an  OutOfMemoryError. Prefer to stream the response body if this is a
 possibility for your response.
 
 &lt;b&gt; What is BOM? : Byte order mark | &lt;/b&gt;&lt;link&gt;More|https://en.wikipedia.org/wiki/Byte_order_mark&lt;/link&gt;</comment>
        </property>
        <property>
            <name>sourceStream</name>
            <returntype>java.io.InputStream</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_ResponseBody.Initializer</name>
        <owner>process</owner>
        <method>
            <name>Byte</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name>String</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_RetrofitManager</name>
        <shortname>Amir_RetrofitManager</shortname>
        <comment>Manage Requests.
 &lt;b&gt; Don't Forgot Enable Manager In Builder &lt;/b&gt;</comment>
        <owner>process</owner>
        <method>
            <name>CancelByUrls</name>
            <comment>Cancel Requests
 &lt;b&gt; Event : &lt;/b&gt;&lt;code&gt;
 RequestEventName_onCancel &lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Urls</name>
                <type>java.lang.String[]</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>GetSender</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>Url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>RemoveRequest</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>Url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetRetrofitRequest</name>
            <comment>You Can Use This Method After Finished</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>Url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetUrlFromPosition</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Position</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetSubscription</name>
            <comment>Get Request Object</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>Url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetFullUrlFromUrl</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Manage Requests.
 &lt;b&gt; Don't Forgot Enable Manager In Builder &lt;/b&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitManager</returntype>
            <parameter>
                <name>retrofit</name>
                <type>aghajari.retrofit.Retrofit</type>
            </parameter>
        </method>
        <method>
            <name>CancelLastRequest</name>
            <comment>Cancel Last Requests
 &lt;b&gt; Event : &lt;/b&gt;&lt;code&gt;
 RequestEventName_onCancel &lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>Clear</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>CancelByFullUrl</name>
            <comment>Cancel Request By Full Url
 &lt;b&gt; Event : &lt;/b&gt;&lt;code&gt;
 RequestEventName_onCancel &lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>FullUrl</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>CancelByEventName</name>
            <comment>Cancel Request By EventName
 &lt;b&gt; Event : &lt;/b&gt;&lt;code&gt;
 RequestEventName_onCancel &lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>IsCanceled</name>
            <comment>Check the Whether Is Canceled</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetUrlFromFullUrl</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>FullUrl</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CancelBySender</name>
            <comment>Cancel Request By Sender Object
 &lt;b&gt; Event : &lt;/b&gt;&lt;code&gt;
 RequestEventName_onCancel &lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Sender</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>CancelByPosition</name>
            <comment>Cancel Request By Position
 &lt;b&gt; Event : &lt;/b&gt;&lt;code&gt;
 RequestEventName_onCancel &lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Position</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>isRunning</name>
            <comment>Check the Whether Is Running</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CancelByFullUrls</name>
            <comment>Cancel Requests
 &lt;b&gt; Event : &lt;/b&gt;&lt;code&gt;
 RequestEventName_onCancel &lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>FullUrls</name>
                <type>java.lang.String[]</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>GetEventName</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>Url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CancelByUrl</name>
            <comment>Cancel Request By Url
 &lt;b&gt; Event : &lt;/b&gt;&lt;code&gt;
 RequestEventName_onCancel &lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>IsUnsubscribed</name>
            <comment>Check the Whether Is Unsubscribed</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CancelAll</name>
            <comment>Cancel All Requests
 &lt;b&gt; Event : &lt;/b&gt;&lt;code&gt;
 RequestEventName_onCancel &lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>ContainsUrl</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>RequestsSize</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>RunningUrls</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>RunningRequestsSize</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Urls</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_RetrofitRequest</name>
        <shortname>Amir_RetrofitRequest</shortname>
        <comment>Retrofit Request</comment>
        <owner>process</owner>
        <method>
            <name>Start2</name>
            <comment>Start Request With Custom Retrofit</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>Retrofit</name>
                <type>aghajari.retrofit.Retrofit</type>
            </parameter>
        </method>
        <method>
            <name>Start</name>
            <comment>Start Request With Last Retrofit
 if You have not used Request , set the retrofit
 &lt;b&gt; Example : &lt;/b&gt;&lt;code&gt;
 Request.Retrofit=Retrofit
 Retrofit.Sender=Request.Sender
 Request=Request.Start&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
        </method>
        <method>
            <name>DownloadRequest</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest.Amir_RetrofitDownloadRequest</returntype>
        </method>
        <method>
            <name>Unsubscribe</name>
            <comment>&lt;b&gt;Unsubscribe&lt;/b&gt; Request</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initialize Retrofit Request.
 &lt;b&gt;Method :&lt;/b&gt; Amir_Retrofit Method Name
 &lt;b&gt;EventName :&lt;/b&gt; Request EventName
 &lt;b&gt;Url :&lt;/b&gt; Request Url
 &lt;b&gt;Params :&lt;/b&gt; Amir_Retrofit Method Parameters WithOut EventName And Url.
 
 &lt;b&gt; Example : &lt;/b&gt;&lt;code&gt;
 Dim Request As Amir_RetrofitRequest
 ' Retrofit.Get("Amir","URL",CreateMap("Key":"Value"))
 Request.Initialize("get","Amir","URL",Array(CreateMap("Key":"Value")))
 Request=Request.Start2(Retrofit)&lt;/code&gt;
 
 You can reuse Request : &lt;code&gt;
 Dim Request As Amir_RetrofitRequest
 Request = Retrofit.Get("Amir","URL",CreateMap("Key":"Value"))
 ...
 Retrofit.Sender=Request.Sender
 Request=Request.Start&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Method</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Params</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <property>
            <name>IsSuccess</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Parameters</name>
            <returntype>java.lang.Object[]</returntype>
            <parameter>
                <name>params</name>
                <type>java.lang.Object[]</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Message</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>EndTime</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IsRunning</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>FullUrlInfo</name>
            <returntype>aghajari.retrofit.baseUrl</returntype>
            <comment></comment>
        </property>
        <property>
            <name>StartTime</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Time</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>EventName</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>ev</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>IsComplete</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Url</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>ResponseBody</name>
            <returntype>aghajari.retrofit.Amir_ResponseBody</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Sender</name>
            <returntype>java.lang.Object</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IsCanceled</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Retrofit</name>
            <returntype>aghajari.retrofit.Retrofit</returntype>
            <parameter>
                <name>Retrofit</name>
                <type>aghajari.retrofit.Retrofit</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IsDownloadRequest</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MethodName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IsUnsubscribed</name>
            <returntype>boolean</returntype>
            <comment>&lt;b&gt;IsUnsubscribed : &lt;/b&gt; Check the Subscribe of the the Request</comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>Tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>FullUrl</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>RequestObject</name>
            <returntype>java.lang.Object</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_RetrofitRequest.Amir_RetrofitDownloadRequest</name>
        <owner>process</owner>
        <property>
            <name>Path</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>FileSize</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_RetrofitResponse</name>
        <shortname>Amir_RetrofitResponse</shortname>
        <comment>An HTTP response.</comment>
        <owner>process</owner>
        <method>
            <name>Import</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>Body</name>
                <type>retrofit2.Response</type>
            </parameter>
        </method>
        <method>
            <name>BodyResponse</name>
            <comment>The deserialized response body of a successful response.</comment>
            <returntype>aghajari.retrofit.Amir_ResponseBody</returntype>
        </method>
        <method>
            <name>isSuccessful</name>
            <comment>Returns true if Code is in the range [200..300).</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>ErrorBody</name>
            <comment>The raw response body of an unsuccessful response.</comment>
            <returntype>aghajari.retrofit.Amir_ResponseBody</returntype>
        </method>
        <method>
            <name>Export</name>
            <comment>Get Response</comment>
            <returntype>retrofit2.Response</returntype>
        </method>
        <method>
            <name>BodyObject</name>
            <comment>The deserialized response body of a successful response.</comment>
            <returntype>java.lang.Object</returntype>
        </method>
        <method>
            <name>BodyRetrofitResponse</name>
            <comment>The deserialized response body of a successful response.</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitResponse</returntype>
        </method>
        <method>
            <name>getHeader</name>
            <comment>HTTP headers.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>HeadersNames</name>
            <returntype>java.lang.Object[]</returntype>
            <comment>HTTP headers Names.</comment>
        </property>
        <property>
            <name>Message</name>
            <returntype>java.lang.String</returntype>
            <comment>HTTP status message or null if unknown.</comment>
        </property>
        <property>
            <name>Raw</name>
            <returntype>okhttp3.Response</returntype>
            <comment>The raw response from the HTTP client.</comment>
        </property>
        <property>
            <name>Code</name>
            <returntype>int</returntype>
            <comment>HTTP status code.</comment>
        </property>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_SSLContext</name>
        <shortname>Amir_SSLContext</shortname>
        <objectwrapper>javax.net.ssl.SSLContext</objectwrapper>
        <owner>process</owner>
        <method>
            <name>InitContext</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>javax.net.ssl.KeyManager[]</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>javax.net.ssl.TrustManager[]</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>java.security.SecureRandom</type>
            </parameter>
        </method>
        <method>
            <name>Initializer</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_SSLContext.Initializer</returntype>
        </method>
        <method>
            <name>CreateSSLEngine</name>
            <comment></comment>
            <returntype>javax.net.ssl.SSLEngine</returntype>
        </method>
        <method>
            <name>CreateSSLEngine2</name>
            <comment></comment>
            <returntype>javax.net.ssl.SSLEngine</returntype>
            <parameter>
                <name>peerHost</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>peerPort</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>ProviderName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SocketFactory</name>
            <returntype>javax.net.ssl.SSLSocketFactory</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ServerSocketFactory</name>
            <returntype>javax.net.ssl.SSLServerSocketFactory</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SupportedSSLParameters</name>
            <returntype>javax.net.ssl.SSLParameters</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DefaultSSLParameters</name>
            <returntype>javax.net.ssl.SSLParameters</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Protocol</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_SSLContext.Initializer</name>
        <owner>process</owner>
        <method>
            <name>NewInstance2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Default</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>NewInstance</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_SSLSocket</name>
        <shortname>Amir_SSLSocket</shortname>
        <objectwrapper>javax.net.ssl.SSLSocket</objectwrapper>
        <owner>process</owner>
        <event>GetSSLSocket (Socket As Amir_SSLSocket) As Amir_SSLSocket</event>
        <event>GetSupportedCipherSuites As String()</event>
        <event>GetDefaultCipherSuites As String()</event>
        <method>
            <name>InitializeSSLSocketFactory</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_SSLSocket.MySSLSocketFactory</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>SSLSocketFactory</name>
                <type>javax.net.ssl.SSLSocketFactory</type>
            </parameter>
        </method>
        <method>
            <name>InitializeSSLSocket</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>SSLSocket</name>
                <type>javax.net.ssl.SSLSocket</type>
            </parameter>
        </method>
        <method>
            <name>StartHandshake</name>
            <comment>Starts a new SSL handshake on this connection.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>SSLParameters</name>
            <returntype>javax.net.ssl.SSLParameters</returntype>
            <parameter>
                <name>p</name>
                <type>javax.net.ssl.SSLParameters</type>
            </parameter>
            <comment>Returns a new SSLParameters based on this SSLSocket's current
 cipher suites, protocols, and client authentication settings.

 since 1.6</comment>
        </property>
        <property>
            <name>UseClientMode</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>mode</name>
                <type>boolean</type>
            </parameter>
            <comment>Returns true if this connection will act in client mode when handshaking.</comment>
        </property>
        <property>
            <name>SupportedProtocols</name>
            <returntype>java.lang.String[]</returntype>
            <comment>Returns the names of the supported protocols.</comment>
        </property>
        <property>
            <name>NeedClientAuth</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>need</name>
                <type>boolean</type>
            </parameter>
            <comment>Returns true if the server socket should require client authentication.
 This does not apply to sockets in getUseClientMode() client mode.</comment>
        </property>
        <property>
            <name>WantClientAuth</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>want</name>
                <type>boolean</type>
            </parameter>
            <comment>Returns true if the server should request client authentication. This
 does not apply to sockets in getUseClientMode() client mode.</comment>
        </property>
        <property>
            <name>EnabledProtocols</name>
            <returntype>java.lang.String[]</returntype>
            <parameter>
                <name>protocols</name>
                <type>java.lang.String[]</type>
            </parameter>
            <comment>Returns the names of the enabled protocols.</comment>
        </property>
        <property>
            <name>EnableSessionCreation</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>flag</name>
                <type>boolean</type>
            </parameter>
            <comment>Returns whether new SSL sessions may be created by this socket or if
 existing sessions must be reused.

 return  true if new sessions may be created, otherwise false.</comment>
        </property>
        <property>
            <name>SupportedCipherSuites</name>
            <returntype>java.lang.String[]</returntype>
            <comment>Returns the names of the supported cipher suites.</comment>
        </property>
        <property>
            <name>EnabledCipherSuites</name>
            <returntype>java.lang.String[]</returntype>
            <parameter>
                <name>suites</name>
                <type>java.lang.String[]</type>
            </parameter>
            <comment>Returns the names of the enabled cipher suites.</comment>
        </property>
        <property>
            <name>Session</name>
            <returntype>javax.net.ssl.SSLSession</returntype>
            <comment>Returns the {@code SSLSession} for this connection. If necessary, a
 handshake will be initiated, in which case this method will block until the handshake
 has been established. If the handshake fails, an invalid session object
 will be returned.</comment>
        </property>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_SSLSocket.MySSLSocketFactory</name>
        <owner>process</owner>
        <method>
            <name>createSocket</name>
            <comment></comment>
            <returntype>java.net.Socket</returntype>
        </method>
        <property>
            <name>DefaultCipherSuites</name>
            <returntype>java.lang.String[]</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SupportedCipherSuites</name>
            <returntype>java.lang.String[]</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Default</name>
            <returntype>javax.net.SocketFactory</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_TrustManagerFactory</name>
        <shortname>Amir_TrustManagerFactory</shortname>
        <objectwrapper>javax.net.ssl.TrustManagerFactory</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsX509TrustManager</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>TrustManager</name>
                <type>javax.net.ssl.TrustManager</type>
            </parameter>
        </method>
        <method>
            <name>Initializer</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_TrustManagerFactory.Initializer</returntype>
        </method>
        <method>
            <name>InitManagerFactoryParameters</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>javax.net.ssl.ManagerFactoryParameters</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>InitKeyStore</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.security.KeyStore</type>
            </parameter>
        </method>
        <property>
            <name>ProviderName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DefaultAlgorithm</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TrustManagers</name>
            <returntype>javax.net.ssl.TrustManager[]</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Algorithm</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_TrustManagerFactory.Initializer</name>
        <owner>process</owner>
        <method>
            <name>NewInstance2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Default</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>NewInstance</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_Utils</name>
        <shortname>Amir_RetrofitUtils</shortname>
        <comment>&lt;b&gt; Network Utils &lt;/b&gt;
 Check the Network State. get Local Ip. get Network Mode. Check Proxy And...
 &lt;b&gt; File Utils &lt;/b&gt;
 get File Information . get File Name From Uri . get Thumbnail Bitmap ...</comment>
        <owner>process</owner>
        <method>
            <name>URLEscape</name>
            <comment>Returns the escaped form of a given literal string.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>arg</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsLocal</name>
            <comment>Whether the URI is a local one.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetThumbnailFromUri</name>
            <comment>Attempt to retrieve the thumbnail of given Uri from the MediaStore. 
 This should not be called on the UI thread.
 &lt;i&gt;You can only retrieve thumbnails for images and videos.&lt;/i&gt;
 &lt;b&gt; Kind : &lt;/b&gt;
 Mini Kind = 1 [0x1]
 Full Screen Kind = 2 [0x2]
 Micro Kind = 3 [0x3]</comment>
            <returntype>android.graphics.Bitmap</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>uri</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Kind</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsMediaUri</name>
            <comment>Return True if Uri is a MediaStore Uri.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>uri</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetNetworkInfo</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_Utils.NetworkInfoState</returntype>
        </method>
        <method>
            <name>GetThumbnailFromFile</name>
            <comment>Attempt to retrieve the thumbnail of given File from the MediaStore. 
 This should not be called on the UI thread.
 &lt;i&gt; Cann't Accept DirAssets !&lt;/i&gt;
 &lt;i&gt;You can only retrieve thumbnails for images and videos.&lt;/i&gt;
 &lt;b&gt; Kind : &lt;/b&gt;
 Mini Kind = 1 [0x1]
 Full Screen Kind = 2 [0x2]
 Micro Kind = 3 [0x3]</comment>
            <returntype>android.graphics.Bitmap</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Kind</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetBroadcast</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>Retrofit</name>
                <type>aghajari.retrofit.Retrofit</type>
            </parameter>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IsNetworkAvailable2</name>
            <comment>check NetworkAvailable
 &lt;i&gt;Active Network + Mobile + Wifi&lt;/i&gt;</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Is3G</name>
            <comment>check is3G</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>context2</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>URLEncoder</name>
            <comment>Translates a string into application/x-www-form-urlencoded format using
 a specific encoding scheme. This method uses the supplied encoding scheme
 to obtain the bytes for unsafe characters.
 &lt;b&gt;Note:&lt;/b&gt; The World Wide Web Consortium Recommendation states that UTF-8
 should be used. Not doing so may introduce incompatibilites. 
___________________________________________________________________________
&lt;b&gt; Parameters:&lt;/b&gt;
 string : String to be translated.
 enc : The name of a supported character encoding.
&lt;b&gt; Returns:&lt;/b&gt;
 the translated String.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>string</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>enc</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsDownloadsDocument</name>
            <comment>Whether the Uri authority is DownloadsProvider.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>uri</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetNetState</name>
            <comment>NET_CNNT_BAIDU_OK (NetworkAvailable) = 1
 NET_CNNT_BAIDU_TIMEOUT (no NetworkAvailable) = 2
 NET_NOT_PREPARE (Net no ready) = 3
 NET_ERROR (net error) = 4</comment>
            <returntype>int</returntype>
            <parameter>
                <name>context2</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>IsExternalStorageDocument</name>
            <comment>Whether the Uri authority is ExternalStorageProvider.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>uri</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetUrlWithoutParameters</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetMimeTypeFromUri</name>
            <comment>return The MIME type for the given Uri.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>uri</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetMimeTypeFromFile</name>
            <comment>return The MIME type for the given file.
 &lt;i&gt; Cann't Accept DirAssets !&lt;/i&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetMediaType</name>
            <comment>&lt;i&gt; Cann't Accept DirAssets !&lt;/i&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsGooglePhotosUri</name>
            <comment>Whether the Uri authority is Google Photos.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>uri</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetReadableFileSize</name>
            <comment>Get the file size in a human-readable string.
 &lt;i&gt;KB,MB,GB&lt;/i&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>size</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ConvertResponseBody</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_Utils.AsClass</returntype>
            <parameter>
                <name>ResponseBody</name>
                <type>aghajari.retrofit.Amir_ResponseBody</type>
            </parameter>
        </method>
        <method>
            <name>IsWifiEnabled</name>
            <comment>is wifi on</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>CheckNetwork</name>
            <comment>Check Network Enabled</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetFileNameWithURL</name>
            <comment>&lt;b&gt;Example : &lt;/b&gt;&lt;code&gt;
 Dim Body as Amir_RetrofitUtils
 Log(Body.getFileNameWithURL("File Link"))&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>URLInfo</name>
            <comment></comment>
            <returntype>aghajari.retrofit.baseUrl</returntype>
            <parameter>
                <name>Url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsRetrofitManagerEnabled</name>
            <comment>&lt;b&gt; Example : &lt;/b&gt; &lt;code&gt;
 Sub GetManager (Retrofit As Amir_Retrofit) As Amir_RetrofitManager
 Dim Utils As Amir_RetrofitUtils
 If Utils.IsRetrofitManagerEnabled(Retrofit) Then
 Return Utils.GetRetrofitManager(Retrofit)
 End if
 Return Null
 End Sub &lt;/code&gt;</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Retrofit</name>
                <type>aghajari.retrofit.Retrofit</type>
            </parameter>
        </method>
        <method>
            <name>IsWifi</name>
            <comment>isWifi</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>context2</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>RunRequest</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>Retrofit</name>
                <type>aghajari.retrofit.Retrofit</type>
            </parameter>
            <parameter>
                <name>Method</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>params</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>SetSingleEventCallAdapterEnabled</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>Retrofit</name>
                <type>aghajari.retrofit.Retrofit</type>
            </parameter>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IsNetworkAvailable</name>
            <comment>check NetworkAvailable 
 &lt;i&gt;Active Network &lt;/i&gt;</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>context2</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>IsMediaDocument</name>
            <comment>Whether the Uri authority is MediaProvider.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>uri</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>URLDecoder</name>
            <comment>Decodes a application/x-www-form-urlencoded string using a specific
 encoding scheme. The supplied encoding is used to determine what 
 characters are represented by any consecutive sequences of the form "%xy". 
 &lt;b&gt;Note:&lt;/b&gt;The World Wide Web Consortium Recommendation states that UTF-8
 should be used. Not doing so may introduce incompatibilites.
___________________________________________________________________________
&lt;b&gt; Parameters:&lt;/b&gt;
 string : the String to decode
 enc : The name of a supported character encoding.
&lt;b&gt; Returns:&lt;/b&gt;
 the newly decoded String</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>string</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>enc</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>EnableRetrofitManager</name>
            <comment>&lt;b&gt; Example : &lt;/b&gt; &lt;code&gt;
 Dim Utils As Amir_RetrofitUtils
 If Utils.IsRetrofitManagerEnabled(Retrofit) =False Then
 Utils.EnableRetrofitManager(Retrofit,True)
 End if &lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Retrofit</name>
                <type>aghajari.retrofit.Retrofit</type>
            </parameter>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetRetrofitManager</name>
            <comment>&lt;b&gt; Example : &lt;/b&gt; &lt;code&gt;
 Sub GetManager (Retrofit As Amir_Retrofit) As Amir_RetrofitManager
 Dim Utils As Amir_RetrofitUtils
 If Utils.IsRetrofitManagerEnabled(Retrofit) Then
 Return Utils.GetRetrofitManager(Retrofit)
 End if
 Return Null
 End Sub &lt;/code&gt;
 _________________________________________________________ 
 &lt;b&gt; Example 2 : &lt;/b&gt; &lt;code&gt;
 Dim Retrofit As Amir_Retrofit
 Dim Manager As Amir_RetrofitManager
 Dim Builder As Amir_RetrofitBuilder
 'Initialize Retrofit With Manager
 Builder.Initialize.baseUrl("BaseUrl").addCache(False).WithManager
 Retrofit.Initialize(Builder)
 'Get Manager From Retrofit
 Manager = Retrofit.Utils.GetRetrofitManager(Retrofit)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitManager</returntype>
            <parameter>
                <name>Retrofit</name>
                <type>aghajari.retrofit.Retrofit</type>
            </parameter>
        </method>
        <method>
            <name>Is2G</name>
            <comment>is2G</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>context2</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>CheckProxy</name>
            <comment>Check Proxy
____________________________________________________
 &lt;b&gt;Type&lt;/b&gt; : 
 HTTP : 1
 DIRECT : 2
 SOCKS : 3</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Type</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ProxyHost</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>proxyPort</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetThumbnailFromUri2</name>
            <comment>Attempt to retrieve the thumbnail of given Uri from the MediaStore. 
 This should not be called on the UI thread.
 &lt;i&gt;You can only retrieve thumbnails for images and videos.&lt;/i&gt;
 &lt;b&gt; Kind : &lt;/b&gt;
 Mini Kind = 1 [0x1]
 Full Screen Kind = 2 [0x2]
 Micro Kind = 3 [0x3]</comment>
            <returntype>android.graphics.Bitmap</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>uri</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>MimeType</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Kind</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsBroadcast</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Retrofit</name>
                <type>aghajari.retrofit.Retrofit</type>
            </parameter>
        </method>
        <property>
            <name>Errors</name>
            <returntype>aghajari.retrofit.Amir_Utils.Errors</returntype>
            <comment>Get Errors Code</comment>
        </property>
        <property>
            <name>IsRoaming</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IsConnectedOrConnectingToWiFi</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LocalIpAddress</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IsConnectedToWiFi</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IsConnectedOrConnectingToVpn</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>GetDetailError</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>enabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>IsConnectedToVpn</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_Utils.NetworkInfoState</name>
        <owner>process</owner>
        <property>
            <name>Bluetooth</name>
            <returntype>aghajari.retrofit.Amir_NetworkInfo</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MobileDUN</name>
            <returntype>aghajari.retrofit.Amir_NetworkInfo</returntype>
            <comment></comment>
        </property>
        <property>
            <name>VPN</name>
            <returntype>aghajari.retrofit.Amir_NetworkInfo</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MobileSUPL</name>
            <returntype>aghajari.retrofit.Amir_NetworkInfo</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Ethernet</name>
            <returntype>aghajari.retrofit.Amir_NetworkInfo</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MobileHIPRI</name>
            <returntype>aghajari.retrofit.Amir_NetworkInfo</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MobileMMS</name>
            <returntype>aghajari.retrofit.Amir_NetworkInfo</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Wimax</name>
            <returntype>aghajari.retrofit.Amir_NetworkInfo</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ActiveNetwork</name>
            <returntype>aghajari.retrofit.Amir_NetworkInfo</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Wifi</name>
            <returntype>aghajari.retrofit.Amir_NetworkInfo</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Dummy</name>
            <returntype>aghajari.retrofit.Amir_NetworkInfo</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Mobile</name>
            <returntype>aghajari.retrofit.Amir_NetworkInfo</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_Utils.Errors</name>
        <owner>process</owner>
        <field>
            <name>INTERNAL_SERVER_ERROR</name>
            <comment>500</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>REQUEST_TIMEOUT</name>
            <comment>408</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>NULL</name>
            <comment>-100</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>NOT_FOUND</name>
            <comment>404</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FORMAT_ERROR</name>
            <comment>1008</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FORBIDDEN</name>
            <comment>403</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SSL_ERROR</name>
            <comment>1005</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>HANDEL_ERRROR</name>
            <comment>417</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>HTTP_ERROR</name>
            <comment>1003</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TIMEOUT_ERROR</name>
            <comment>1006</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ACCESS_DENIED</name>
            <comment>302</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>NETWORD_ERROR</name>
            <comment>1002</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>BAD_GATEWAY</name>
            <comment>502</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SSL_NOT_FOUND</name>
            <comment>1007</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>UNAUTHORIZED</name>
            <comment>401</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SERVICE_UNAVAILABLE</name>
            <comment>503</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>GATEWAY_TIMEOUT</name>
            <comment>504</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>UNKNOWN</name>
            <comment>1000</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PARSE_ERROR</name>
            <comment>1001</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>aghajari.retrofit.Amir_Utils.AsClass</name>
        <owner>process</owner>
        <method>
            <name>As</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Converter</returntype>
        </method>
    </class>
    <class>
        <name>aghajari.retrofit.baseUrl</name>
        <owner>process</owner>
        <method>
            <name>queryParameterName</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>queryParameterValues</name>
            <comment></comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>arg</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>queryParameter</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>arg</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>queryParameterValue</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Resolve</name>
            <comment></comment>
            <returntype>aghajari.retrofit.baseUrl</returntype>
            <parameter>
                <name>link</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>encodedPath</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>query</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>encodedFragment</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Redact</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>fragment</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>password</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>encodedQuery</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TopPrivateDomain</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>pathSize</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>port</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>encodedPathSegments</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>encodedPassword</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>host</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>isHttps</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>encodedUsername</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>toString</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>pathSegments</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>username</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>aghajari.retrofit.Builder</name>
        <shortname>Amir_RetrofitBuilder</shortname>
        <comment>&lt;i&gt;Instance which uses the interface and the Builder API which 
 allows defining the URL end point for the HTTP operation.&lt;/i&gt;
 First Setting Of Amir_Retrofit
 You Should Initialize Amir_Retrofit With This Builder
 &lt;code&gt;Retrofit.Initialize(Builder)&lt;/code&gt;</comment>
        <owner>process</owner>
        <method>
            <name>FollowSslRedirects</name>
            <comment>Configure this client to follow redirects from HTTPS to HTTP and from HTTP to HTTPS.

 If unset, protocol redirects will be followed. This is different than the built-in
 HttpURLConnection's default.</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>followProtocolRedirects</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>OkHttpTLSCompat</name>
            <comment>Fix OpenSSL Handshake on PreLollipop OS</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
        </method>
        <method>
            <name>ContentType</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>ContentType</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Create New Retrofit Builder
 
 &lt;b&gt;Base URL required.&lt;/b&gt;&lt;code&gt;Builder.baseUrl("http://lcoders.ir")&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>addConverterFactory</name>
            <comment>&lt;b&gt;Custom&lt;/b&gt;
 Add converter factory for serialization and deserialization of objects.
 &lt;i&gt; You Should Use This Method With inline Java!&lt;/i&gt;
 ______________________________________________________________________
 &lt;b&gt; Example : &lt;/b&gt; &lt;i&gt;This is a Sample for GsonConverterFactory&lt;/i&gt;&lt;code&gt;
 Dim J as JavaObject : J.InitializeContext
 Builder.addConverterFactory(J.RunMethod("getNewGsonConverterFactory",Null))
 
 #if java
 import retrofit2.converter.gson.GsonConverterFactory;
 public GsonConverterFactory getNewGsonConverterFactory(){
 return GsonConverterFactory.create();
 }
 #End if&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>Factory</name>
                <type>retrofit2.Converter.Factory</type>
            </parameter>
        </method>
        <method>
            <name>addCookie</name>
            <comment>open sync default Cookie

 Provides &lt;strong&gt;policy&lt;/strong&gt; and &lt;strong&gt;persistence&lt;/strong&gt; for HTTP cookies.
 As policy, implementations of this interface are responsible for selecting which cookies to
 accept and which to reject. A reasonable policy is to reject all cookies, though that may
 interfere with session-based authentication schemes that require cookies.</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>isCookie</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Build</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Retrofit</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>DeflateRequest</name>
            <comment>&lt;b&gt;Deflate : &lt;/b&gt;Compresses the HTTP request body. Many webservers can't handle this! 

 &lt;b&gt;noHeader :&lt;/b&gt; True indicates that no ZLIB header should be written.</comment>
            <returntype>aghajari.retrofit.Builder.DeflaterBuilder</returntype>
            <parameter>
                <name>noHeader</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>connectTimeout</name>
            <comment>Sets the default connect timeout for new connections. A value of 0 means 
no timeout, otherwise values must be between 1 and Integer.MAX_VALUE 
when converted to milliseconds.
Default : 15</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>timeout</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Client</name>
            <comment>The HTTP client used for requests. default OkHttpClient 
 
 How To use ? For Example I have a Retrofit And i 
 Initialize It . My Retrofit Name is R1 &lt;code&gt;
 Dim Builder2 as Amir_Builder
 Builder2.Initialize
 Builder2.Client(R1.Client)
 Dim R2 As Amir_Retrofit
 R2.Initialize(Builder2)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>client</name>
                <type>okhttp3.OkHttpClient</type>
            </parameter>
        </method>
        <method>
            <name>addSSL</name>
            <comment>Sets the handler that can accept cookies from incoming HTTP responses 
 and provides cookies to outgoing HTTP requests. 
If unset, no cookies will be accepted nor provided.</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>hosts</name>
                <type>java.lang.String[]</type>
            </parameter>
            <parameter>
                <name>certificates</name>
                <type>int[]</type>
            </parameter>
        </method>
        <method>
            <name>addCache</name>
            <comment>open default Cache</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>isCache</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>skipSSLSocketFactory</name>
            <comment>skipSSLSocketFactory</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>isSkip</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Client2</name>
            <comment>The HTTP client used for requests. default OkHttpClient 
 
 How To use ? For Example I have a OkHttpClientWrapper (OkHttp Library) And i 
 Initialize It . My OkHttpClientWrapper Name is okHttp &lt;code&gt;
 Dim Builder2 as Amir_Builder
 Builder2.Initialize
 Builder2.Client(okHttp)
 Dim R2 As Amir_Retrofit
 R2.Initialize(Builder2)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>client</name>
                <type>anywheresoftware.b4h.okhttp.OkHttpClientWrapper</type>
            </parameter>
        </method>
        <method>
            <name>HttpLoggingInterceptor2</name>
            <comment>&lt;b&gt;Level : &lt;/b&gt;
 BODY : 1 | BASIC : 2 | HEADERS : 3 | NONE : 4
 &lt;b&gt;Type : &lt;/b&gt;
 &lt;code&gt;"NetworkInterceptor"&lt;/code&gt; &lt;code&gt;"Interceptor"&lt;/code&gt;
 ____________________________________________________________________________
 &lt;b&gt; Event : &lt;/b&gt; &lt;code&gt;
 EventName_onLog (LogMessage As String)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>Level</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Type</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>KeyCache</name>
            <comment>Default = Amir_Retrofit</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>KEY_CACHE</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addGsonConverterFactory2</name>
            <comment>&lt;b&gt;GsonConverterFactory&lt;/b&gt;
 Add converter factory for serialization and deserialization of objects.</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>Amir_Json</name>
                <type>aghajari.retrofit.Amir_Gson</type>
            </parameter>
        </method>
        <method>
            <name>Event_Complete</name>
            <comment>An event when requests are completed
 ________________________________________
 &lt;b&gt; Event : &lt;/b&gt; &lt;code&gt;
 EventName_Complete (DefaultEventName As String)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>HostnameVerifier</name>
            <comment>HostnameVerifier : &lt;b&gt;New HostnameVerifier&lt;/b&gt;
&lt;b&gt; Events : &lt;/b&gt;
&lt;code&gt; EventName_verify (hostname as string,session as Object) as boolean &lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>AutoEvict</name>
            <comment>&lt;b&gt; AutoEvict : &lt;/b&gt;
 Delete Cache before start Request
 
 &lt;b&gt; You Should Call This Method Before 
 AddCache And AddResponseCache ! &lt;/b&gt;</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>addInterceptor</name>
            <comment>&lt;b&gt;Custom&lt;/b&gt;
 Returns a modifiable list of interceptors that observe a single network
 request and response. These interceptors must call Interceptor.Chain.proceed
 exactly once: it is an error for a network interceptor to short-circuit
 or repeat a network request.
 &lt;i&gt; You Should Use This Method With inline Java!&lt;/i&gt;
 ______________________________________________________________________
 &lt;b&gt; Example : &lt;/b&gt; &lt;i&gt;This is a Sample for HttpLoggingInterceptor&lt;/i&gt;&lt;code&gt;
 Dim J as JavaObject : J.InitializeContext
 Builder.addInterceptor(J.RunMethod("getNewHttpLoggingInterceptor",Null))
 
 #if java
 import okhttp3.logging.HttpLoggingInterceptor;
 public HttpLoggingInterceptor getNewHttpLoggingInterceptor(){
 HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();
 interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);
 return interceptor;
 }
 #End if&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>Interceptor</name>
                <type>okhttp3.Interceptor</type>
            </parameter>
        </method>
        <method>
            <name>WithManager</name>
            <comment>Enable Retrofit Manager
 &lt;b&gt; Example : &lt;/b&gt; &lt;code&gt;
 Dim Retrofit As Amir_Retrofit
 Dim Manager As Amir_RetrofitManager
 Dim Builder As Amir_RetrofitBuilder
 'Initialize Retrofit With Manager
 Builder.Initialize.baseUrl("BaseUrl").WithManager
 Retrofit.Initialize(Builder)
 'Get Manager From Retrofit
 Manager = Retrofit.Utils.GetRetrofitManager(Retrofit)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
        </method>
        <method>
            <name>ProxyAuthenticator</name>
            <comment>Use Proxy With Password
 &lt;b&gt;Example : &lt;/b&gt;&lt;code&gt;
 Builder.proxy(1,"proxyHost",8080)
 Builder.proxyAuthenticator("username","password")&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>username</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>password</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Header</name>
            <comment>&lt;b&gt;Type :&lt;/b&gt;  ADD , REMOVE , UPDATE</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>headers</name>
                <type>java.util.Map</type>
            </parameter>
            <parameter>
                <name>Type</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>WithBroadcast</name>
            <comment>&lt;code&gt; com.aghajari.retrofit.ERROR &lt;/code&gt;
 &lt;code&gt; com.aghajari.retrofit.NETWORK_ERROR &lt;/code&gt;
 &lt;code&gt; com.aghajari.retrofit.ERROR_(Error Message) &lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
        </method>
        <method>
            <name>CookieLanguage</name>
            <comment>set Cookie Intercepter Language
 Just Country Code : ch - en ...
 Don't Forget To Enable Cookie With
 Builder.addCookie(True)</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>language</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addResponseCache</name>
            <comment>&lt;b&gt; MaxAge : &lt;/b&gt;
 If the same network request is sent within &lt;u&gt;MaxAge&lt;/u&gt;, the response is retrieved from cache.
 &lt;b&gt; MaxStale : &lt;/b&gt;
 If the device is offline, stale response is fetched from the cache.
 _________________________________
 &lt;b&gt; Example : &lt;/b&gt; &lt;code&gt;
 	Dim Builder As Amir_RetrofitBuilder
	Builder.Initialize.baseUrl("http://lcoders.ir").KeyCache("Amir_Retrofit_Test").CacheMaxSize( 5 * 1024 * 1024)
	Builder.AutoEvict.addCache(False).addResponseCache(1,2419200)
   Retrofit.Initialize(Builder)
   
   Retrofit.Get... &lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>MaxAge</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>MaxStale</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>addInfoInterceptor</name>
            <comment>&lt;b&gt; Event : &lt;/b&gt; &lt;code&gt;
 EventName_onInfo(Chain As Object,Request As Object) As Object&lt;/code&gt;
 Event Return New Response !</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Sender</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Retry</name>
            <comment>&lt;b&gt; Event : &lt;/b&gt;
 &lt;code&gt;EventName_onRetry (TryCount As int,MaxCount As Int,RetryType As String,Request As Object)&lt;/code&gt;
 ___________________________________
 &lt;b&gt; Example : &lt;/b&gt; &lt;code&gt;
  Dim Builder As Amir_RetrofitBuilder
  Builder.Initialize.BaseUrl("BaseUrl")
 	Builder.Retry(5,"Amir").NetworkAvailable
 	Builder.Retry(5,"Amir").NetworkResponse.IsNotSuccessful
  Dim Retrofit As Amir_Retrofit
  Retrofit.Initialize(Builder)
  Retrofit....
  
  Sub Amir_onRetry (TryCount As Int,MaxCount As Int,RetryType As String,Request As Object)
  Log(RetryType&amp;" : Try "&amp;TryCount&amp;"/"&amp;MaxCount)
  End Sub&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Builder.RetryClass</returntype>
            <parameter>
                <name>MaxRetryCount</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ConnectionSpecs</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>connectionSpecs</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>AddSSLSocketFactory</name>
            <comment>&lt;b&gt;X.509&lt;/b&gt;
 In cryptography, X.509 is a standard that defines the format of
 public key certificates. X.509 certificates are used in many 
 Internet protocols, including TLS/SSL, which is the basis for 
 HTTPS, the secure protocol for browsing the web. They're also 
 used in offline applications, like electronic signatures. An X.509
 certificate contains a public key and an identity (a hostname, or
 an organization, or an individual), and is either signed by a 
 certificate authority or self-signed. When a certificate is signed 
 by a trusted certificate authority, or validated by other means, 
 someone holding that certificate can rely on the public key it 
 contains to establish secure communications with another party, or
 Besides the format for certificates themselves, X.509 specifies
 certificate revocation lists as a means to distribute information
 about certificates that are no longer valid, and a certification
 path validation algorithm, which allows for certificates to be 
 signed by intermediate CA certificates, which are in turn signed 
 by other certificates, eventually reaching a trust anchor.
 X.509 is defined by the International Telecommunications Union's
 Standardization sector (ITU-T), and is based on ASN.1, another ITU-T
 standard....
 
 &lt;link&gt;English|https://en.wikipedia.org/wiki/X.509&lt;/link&gt; | &lt;link&gt;Farsi|https://fa.wikipedia.org/wiki/%D8%A7%D8%B3%D8%AA%D8%A7%D9%86%D8%AF%D8%A7%D8%B1%D8%AF_%D8%A7%DA%A9%D8%B3%DB%B5%DB%B0%DB%B9&lt;/link&gt;
 
 &lt;b&gt;name&lt;/b&gt; : Assets Certificate file name</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>Name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GzipRequest</name>
            <comment>&lt;b&gt;Gzip : &lt;/b&gt;Compresses the HTTP request body. Many webservers can't handle this!</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
        </method>
        <method>
            <name>ConnectionPool</name>
            <comment>Sets the connection pool used to recycle HTTP and HTTPS connections. 
 If unset, a new connection pool will be used. 
 &lt;i&gt; TimeUnit Is SECONDS &lt;/i&gt;
 &lt;b&gt;Example : &lt;/b&gt; &lt;code&gt;
 Builder.ConnectionPool(5,8)&lt;/code&gt;
 This is Default Values in Example</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>maxldleConnections</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>keepAliveDuration</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>FollowRedirects</name>
            <comment>Configure this client to follow redirects. If unset, redirects will be followed.</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>followRedirects</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>AutoASCIIEncoder</name>
            <comment>Url representation in ASCII format</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
        </method>
        <method>
            <name>writeTimeout</name>
            <comment>Sets the default connect timeout for new connections. A value of 0 means 
no timeout, otherwise values must be between 1 and Integer.MAX_VALUE when 
converted to milliseconds.</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>timeout</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>addInfoNetworkInterceptor</name>
            <comment>&lt;b&gt; Event : &lt;/b&gt; &lt;code&gt;
 EventName_onInfo(Chain As Object,Request As Object) As Object&lt;/code&gt;
 Event Return New Response !</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Sender</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>AddSSLSocketFactory2</name>
            <comment>Set Default SSLSocket</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
        </method>
        <method>
            <name>AddSSLSocketFactory3</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>sslSocketFactory</name>
                <type>javax.net.ssl.SSLSocketFactory</type>
            </parameter>
        </method>
        <method>
            <name>Proxy</name>
            <comment>add Proxy With SocketAddress
 &lt;b&gt;Type&lt;/b&gt; : 
 HTTP : 1
 DIRECT : 2
 SOCKS : 3
 &lt;b&gt;ProxyHost&lt;/b&gt; : "proxy"
 	&lt;b&gt;Example :&lt;/b&gt;
&lt;code&gt;Builder.proxy(1,"proxy",8080)&lt;/code&gt;
If your Proxy has Password use  proxyAuthenticator</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>Type</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>ProxyHost</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>proxyPort</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>HeaderRuntime</name>
            <comment>&lt;b&gt;Type :&lt;/b&gt;  ADD , REMOVE , UPDATE</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>Type</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Event_Error</name>
            <comment>An event for all unsuccessful requests
 ________________________________________
 &lt;b&gt; Event : &lt;/b&gt; &lt;code&gt;
 EventName_Error (DefaultEventName As String,ErrorMessage As String)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>addResponseProgress</name>
            <comment>&lt;b&gt; Event : &lt;/b&gt; &lt;code&gt;
 EventName_onResponseProgress(bytesRead As long,contentLength As long,done As boolean,Chain As Object,Response As Object)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Sender</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>addCallAdapterFactory</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>factory</name>
                <type>retrofit2.CallAdapter.Factory</type>
            </parameter>
        </method>
        <method>
            <name>SkipHostnameVerifier</name>
            <comment>HostnameVerifier : &lt;b&gt;creatSkipHostnameVerifier&lt;/b&gt;

 The HostnameVerifier runs after the TLS handshake,
 over a TLS connection that is already valid from
 the TLS point of view, so at that point you know 
 that the certificate is valid, signed by a trusted 
 issuer, non-expired (?), etc., and all you have 
 to do is decide (a) whether it's from the 
 correct server and (b) whether you trust that 
 server.</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
        </method>
        <method>
            <name>SingleEventCallAdapterFactory</name>
            <comment>Add RxJava Events To Single Event.
 &lt;b&gt; Advanced Download Requests are not included &lt;/b&gt;
 After Call This Method You Can Use This Events : 
 &lt;code&gt;EventName_onDone (isSuccess As Boolean,Message As String,Response As Amir_ResponseBody)&lt;/code&gt;
 &lt;code&gt;EventName_onDownloadDone (isSuccess As Boolean,Message As String,Path As String,Name As String)&lt;/code&gt;
 _______________________________________________________________________________________
 &lt;b&gt; Example : &lt;/b&gt;&lt;code&gt;
 Dim Builder As Amir_RetrofitBuilder
 Builder.Initialize.baseUrl("BaseUrl").SingleEventCallAdapterFactory(True)
 Dim Retrofit As Amir_Retrofit
 Retrofit.Initialize(Builder)
 
 Retrofit.Sender = "Tag"
 Retrofit.Get("Amir","Url",CreateMap())
 
 Sub Amir_onDone (isSuccess As Boolean,Message As String,Response As Amir_ResponseBody)
 Log(Sender) ' Tag
 If isSuccess = True Then
 Log(Response.String)
 Else
 Log(Message)
 End If
 End Sub&lt;/code&gt;
 _______________________________________________________________________________________
 &lt;b&gt; Download Example : &lt;/b&gt;&lt;code&gt;
 Dim Builder As Amir_RetrofitBuilder
 Builder.Initialize.baseUrl("BaseUrl").SingleEventCallAdapterFactory(True)
 Dim Retrofit As Amir_Retrofit
 Retrofit.Initialize(Builder)
 
 Retrofit.Sender = "Tag"
 Retrofit.Download("Amir","Url")
 
 Sub Amir_onDownloadDone (isSuccess As Boolean,Message As String,Path As String,Name As String)
 Log(Sender) 'Tag
 If isSuccess = True Then
 Log(Path&amp;Name)
 Log("Key : "&amp;Message)
 Else
 Log(Message)
 End If
 End Sub&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>UnsafeMode2</name>
            <comment>Fix OpenSSL Handshake on PreLollipop OS with unsafe mode</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
        </method>
        <method>
            <name>RetryOnConnectionFailure</name>
            <comment>Configure this client to retry or not when a connectivity problem is encountered. By default,
 this client silently recovers from the following problems:

   &lt;strong&gt;Unreachable IP addresses.&lt;/strong&gt; If the URL's host has multiple IP addresses,
       failure to reach any individual IP address doesn't fail the overall request. This can
       increase availability of multi-homed services.
   &lt;strong&gt;Stale pooled connections.&lt;/strong&gt; The ConnectionPool reuses sockets
       to decrease request latency, but these connections will occasionally time out.
   &lt;strong&gt;Unreachable proxy servers.&lt;/strong&gt; A ProxySelector can be used to
       attempt multiple proxy servers in sequence, eventually falling back to a direct
       connection.

 Set this to false to avoid retrying requests when doing so is destructive. In this case the
 calling application should do its own recovery of connectivity failures.</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>addScalarsConverterFactory</name>
            <comment>A converter for strings and both primitives and their boxed types  to text/plain bodies.</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
        </method>
        <method>
            <name>HttpLoggingInterceptor</name>
            <comment>Returns a modifiable list of interceptors that observe a single network
 request and response. These interceptors must call Interceptor.Chain.proceed
 exactly once: it is an error for a network interceptor to short-circuit
 or repeat a network request.
 ____________________________________________________________________________
 An OkHttp interceptor which logs request and response information. Can 
 be applied as an application interceptor or as a network interceptor.
 The format of the logs created by this class should not be considered 
 stable and may change slightly between releases. If you need a stable 
 logging format, use your own interceptor.
 ____________________________________________________________________________
 &lt;b&gt;Level : &lt;/b&gt;
 BODY : 1 | BASIC : 2 | HEADERS : 3 | NONE : 4
 &lt;b&gt;Type : &lt;/b&gt;
 &lt;code&gt;"NetworkInterceptor"&lt;/code&gt; &lt;code&gt;"Interceptor"&lt;/code&gt;
 ____________________________________________________________________________
 &lt;b&gt;Example : &lt;/b&gt;&lt;code&gt;
 Dim Builder as Amir_RetrofitBuilder
 Builder.Initialize
 Builder.HttpLoggingInterceptor(1,"NetworkInterceptor")&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>Level</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Type</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Event_DownloadSuccess</name>
            <comment>An event for all successful download requests
 ________________________________________
 &lt;b&gt; Event : &lt;/b&gt; &lt;code&gt;
 EventName_DownloadSucess (DefaultEventName As String,Key As String,Path As String,Name As String,FileSize As Long)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>RunOkHttpBuilderMethod</name>
            <comment>Run OkHttpBuilder Method
 &lt;b&gt; Example : &lt;/b&gt;&lt;code&gt;
 Builder.RunOkHttpBuilderMethod("followRedirects",Array (true))&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>MethodName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Params</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>addHeader</name>
            <comment>Add Header for serialization and deserialization of objects.
If there are any authenticated query parameters, they can be added in the
 form of headers as shown below:
 
 &lt;i&gt;Type Is ADD. You Can Use Header Method For Set Type &lt;/i&gt;
 
&lt;b&gt;Example :&lt;/b&gt;
&lt;code&gt;Builder.addHeader(CreateMap("Authorization":"replace this text with your token"))&lt;/code&gt;
 
 The header fields of a single HTTP message. Values are uninterpreted strings; use  Request
 and  Response for interpreted headers. This class maintains the order of the header fields
 within the HTTP message.

 This class tracks header values line-by-line. A field with multiple comma- separated values on
 the same line will be treated as a field with a single value by this class. It is the caller's
 responsibility to detect and split on commas if their field permits multiple values. This
 simplifies use of single-valued fields whose values routinely contain commas, such as cookies or
 dates.</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>headers</name>
                <type>java.util.Map</type>
            </parameter>
        </method>
        <method>
            <name>addParameters</name>
            <comment>Add parameters for serialization and deserialization of objects.
 &lt;b&gt;Type :&lt;/b&gt;  ADD , REMOVE , UPDATE</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>parameters</name>
                <type>java.util.Map</type>
            </parameter>
            <parameter>
                <name>Type</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Encoded</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>addGsonConverterFactory</name>
            <comment>&lt;b&gt;GsonConverterFactory&lt;/b&gt;
 Add converter factory for serialization and deserialization of objects.</comment>
            <returntype>aghajari.retrofit.Amir_Gson</returntype>
        </method>
        <method>
            <name>Event_Success</name>
            <comment>An event for all successful requests
 &lt;b&gt; Download Requests are not included &lt;/b&gt; You Should Use Event_DownloadSuccess
 ________________________________________
 &lt;b&gt; Event : &lt;/b&gt; &lt;code&gt;
 EventName_Sucess (DefaultEventName As String,ResponseBody As Amir_ResponseBody)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CacheTimeOut</name>
            <comment>setCache</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>TimeOut</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>HostnameVerifier2</name>
            <comment>HostnameVerifier : &lt;b&gt;New HostnameVerifier With Urls&lt;/b&gt;
Just Set hostUrls</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>hostUrls</name>
                <type>java.lang.String[]</type>
            </parameter>
        </method>
        <method>
            <name>addCallAdapterFactory2</name>
            <comment>Add Custom Call Adapter Factory With B4A Class
 &lt;b&gt; Add This Class Events : &lt;/b&gt;
 &lt;code&gt; getEvents(Name As String) As String() &lt;/code&gt;
 &lt;code&gt; onCompleted(Name As String) As Object() &lt;/code&gt;
 &lt;code&gt; onNext(ResponseBody As Amir_ResponseBody,Name As String) As Object() &lt;/code&gt;
 &lt;code&gt; onError(Error As String,Name As String) As Object() &lt;/code&gt;
 _____________________________________________________
 &lt;b&gt; Example : &lt;/b&gt; 
 1.Crrate a Standard Class (MyCallAdapter) 
 2.Add This Codes To Class : &lt;code&gt;
 private Sub Class_Globals
 End Sub
 Public Sub Initialize 
 End Sub
 
 Public Sub getEvents(Name As String) As String()
 	Return Array As String ("Finish","Sucess","Error")
 End Sub
 
 Public Sub onCompleted(Name As String) As Object()
 	Return Array()
 End Sub
 Public Sub onNext (ResponseBody As Amir_ResponseBody,Name As String) As Object()
 	Return Array (ResponseBody.String,ResponseBody)
 End Sub
 Public Sub onError (Error As String,Name As String) As Object()
 	Return Array (Error)
 End Sub&lt;/code&gt;
 3.Add Your Class To Retrofit Builder : &lt;code&gt;
 	Dim Call As MyCallAdapter
	Call.Initialize
	
 Dim Builder As Amir_RetrofitBuilder
	Builder.Initialize.baseUrl("http://lcoders.ir")
	Builder.addCallAdapterFactory2(Call,True)

 Retrofit.Initialize(Builder)&lt;/code&gt;
 4. Now You Can Use Your Events : 
 EventName_Finish
 EventName_Sucess (ResponseString As String,Body As Amir_ResponseBody)
 EventName_Error (Error As String)</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>CallAdapterFactory</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>HttpUrl</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder.HttpUrlBuilder</returntype>
        </method>
        <method>
            <name>OAuth</name>
            <comment>Oauth1SigningInterceptor</comment>
            <returntype>aghajari.retrofit.Builder.OAuthBuilder</returntype>
        </method>
        <method>
            <name>baseUrl</name>
            <comment>Set an API base URL which can change over time.

For Example : 
Your BaseUrl is : "http://example.com"
In The Requests you can just Set Url Like this :"/arg.php"
Now Requests Address is : "http://example.com/arg.php"</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>baseUrl</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>MultipartBody</name>
            <comment>Set Default Body</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>MultipartBody</name>
                <type>aghajari.retrofit.RequestBodyCreate.MultipartBodyBuilder</type>
            </parameter>
        </method>
        <method>
            <name>readTimeout</name>
            <comment>Sets the handler that can accept cookies from incoming HTTP responses 
and provides cookies to outgoing HTTP requests. If unset, no cookies 
will be accepted nor provided.</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>timeout</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>UnsafeMode</name>
            <comment>&lt;b&gt; Accept Any SSL Certificate &lt;/b&gt;
 It basically set OkHttp client with custom SSL verification, which accepts every certificate.
 Using this unsafe OkHttp client allows us to connect to the dangerous subdomains of BadSSL.</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>Enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>CacheMaxSize</name>
            <comment>set Cache MaxSize
Parameters:size MaxSize unit kb def 10 * 1024 * 1024</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>size</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ValidateEagerly</name>
            <comment>When calling create on the resulting Retrofit instance, eagerly validate
 the configuration of all methods in the supplied interface.</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>validateEagerly</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>addNetworkInterceptor</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder</returntype>
            <parameter>
                <name>Interceptor</name>
                <type>okhttp3.Interceptor</type>
            </parameter>
        </method>
        <property>
            <name>CallAdapterFactories</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ConverterFactories</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CacheControlBuilder</name>
            <returntype>aghajari.retrofit.CacheControlBuilder</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>aghajari.retrofit.Builder.RetryClass</name>
        <owner>process</owner>
        <method>
            <name>Response</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder.RetryTypeClass</returntype>
        </method>
        <method>
            <name>CustomType</name>
            <comment>&lt;b&gt; Type : &lt;/b&gt;
 &lt;i&gt;Response : &lt;/i&gt;              &lt;code&gt;"IsNull"&lt;/code&gt;        &lt;code&gt;"IsBodyNull"&lt;/code&gt;       &lt;code&gt;"IsNotSuccessful"&lt;/code&gt;
 &lt;i&gt;NetworkResponse : &lt;/i&gt;&lt;code&gt;"IsNRNull"&lt;/code&gt;  &lt;code&gt;"IsNRBodyNull"&lt;/code&gt;  &lt;code&gt;"NRIsNotSuccessful"&lt;/code&gt;
 &lt;i&gt;PriorResponse : &lt;/i&gt;      &lt;code&gt;"IsPRNull"&lt;/code&gt;   &lt;code&gt;"IsPRBodyNull"&lt;/code&gt;  &lt;code&gt;"PRIsNotSuccessful"&lt;/code&gt;
 &lt;i&gt;CacheResponse : &lt;/i&gt;   &lt;code&gt;"IsCRNull"&lt;/code&gt;  &lt;code&gt;"IsCRBodyNull"&lt;/code&gt;  &lt;code&gt;"CRIsNotSuccessful"&lt;/code&gt;
 &lt;i&gt;Network : &lt;/i&gt;    &lt;code&gt;"NetworkAvailable"&lt;/code&gt;
 _______________________________
 &lt;b&gt; Custom Type Code : &lt;/b&gt;
 Dim CodeInt As int = 404 
 &lt;i&gt;Response : &lt;/i&gt;                   &lt;code&gt;"Code#"&amp;CodeInt&lt;/code&gt;
 &lt;i&gt;NetworkResponse : &lt;/i&gt;    &lt;code&gt;"NRCode#"&amp;CodeInt&lt;/code&gt;
 &lt;i&gt;PriorResponse : &lt;/i&gt;          &lt;code&gt;"PRCode#"&amp;CodeInt&lt;/code&gt;
 &lt;i&gt;CacheResponse : &lt;/i&gt;       &lt;code&gt;"CRCode#"&amp;CodeInt&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Type</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>CacheResponse</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder.RetryTypeClass</returntype>
        </method>
        <method>
            <name>NetworkAvailable</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>PriorResponse</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder.RetryTypeClass</returntype>
        </method>
        <method>
            <name>NetworkResponse</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder.RetryTypeClass</returntype>
        </method>
    </class>
    <class>
        <name>aghajari.retrofit.Builder.RetryTypeClass</name>
        <owner>process</owner>
        <method>
            <name>IsBodyNull</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Message</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>Msg</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsNull</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsNotSuccessful</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Code</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>Code</name>
                <type>int</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>aghajari.retrofit.Builder.HttpUrlBuilder</name>
        <owner>process</owner>
        <method>
            <name>Scheme</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder.HttpUrlBuilder</returntype>
            <parameter>
                <name>scheme</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Query</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder.HttpUrlBuilder</returntype>
            <parameter>
                <name>query</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Username</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder.HttpUrlBuilder</returntype>
            <parameter>
                <name>username</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Log</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder.HttpUrlBuilder</returntype>
            <parameter>
                <name>Log</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Build</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Port</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder.HttpUrlBuilder</returntype>
            <parameter>
                <name>port</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Host</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder.HttpUrlBuilder</returntype>
            <parameter>
                <name>Host</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Fragment</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder.HttpUrlBuilder</returntype>
            <parameter>
                <name>fragment</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Password</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder.HttpUrlBuilder</returntype>
            <parameter>
                <name>password</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>aghajari.retrofit.Builder.OAuthBuilder</name>
        <owner>process</owner>
        <method>
            <name>AccessSecret</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder.OAuthBuilder</returntype>
            <parameter>
                <name>AccessSecret</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Random</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder.OAuthBuilder</returntype>
            <parameter>
                <name>Random</name>
                <type>java.util.Random</type>
            </parameter>
        </method>
        <method>
            <name>AccessToken</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder.OAuthBuilder</returntype>
            <parameter>
                <name>AccessToken</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ConsumerKey</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder.OAuthBuilder</returntype>
            <parameter>
                <name>ConsumerKey</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Build</name>
            <comment>Type : &lt;code&gt;"NetworkInterceptor"&lt;/code&gt; &lt;code&gt;"Interceptor"&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Type</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ConsumerSecret</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder.OAuthBuilder</returntype>
            <parameter>
                <name>consumerSecret</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Clock</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Builder.OAuthBuilder</returntype>
            <parameter>
                <name>Clock</name>
                <type>com.aghajari.Oauth1SigningInterceptor.Clock</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>aghajari.retrofit.Builder.DeflaterBuilder</name>
        <owner>process</owner>
        <method>
            <name>DEFAULT_STRATEGY</name>
            <comment>The default compression strategy.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>DEFAULT_COMPRESSION</name>
            <comment>The default compression level.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SYNC_FLUSH</name>
            <comment>Flush buffers so recipients can immediately decode the data sent thus
 far. This mode may degrade compression.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>BEST_COMPRESSION</name>
            <comment>Upper bound for the compression level range.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>HUFFMAN_ONLY</name>
            <comment>A compression strategy.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>NO_COMPRESSION</name>
            <comment>A compression level.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>NO_FLUSH</name>
            <comment>Use buffering for best compression.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>DEFLATED</name>
            <comment>The default compression method.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>BEST_SPEED</name>
            <comment>Lower bound for compression level range.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>FILTERED</name>
            <comment>A compression strategy.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>FULL_FLUSH</name>
            <comment>Flush buffers so recipients can immediately decode the data sent thus
 far. The compression state is also reset to permit random access and
 recovery for clients who have discarded or damaged their own copy. This
 mode may degrade compression.</comment>
            <returntype>void</returntype>
        </method>
    </class>
    <class>
        <name>aghajari.retrofit.CacheControlBuilder</name>
        <owner>process</owner>
        <method>
            <name>Immutable</name>
            <comment></comment>
            <returntype>aghajari.retrofit.CacheControlBuilder</returntype>
        </method>
        <method>
            <name>MaxStale</name>
            <comment></comment>
            <returntype>aghajari.retrofit.CacheControlBuilder</returntype>
            <parameter>
                <name>maxStale</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>MinFresh</name>
            <comment></comment>
            <returntype>aghajari.retrofit.CacheControlBuilder</returntype>
            <parameter>
                <name>minFresh</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>BuildAsInterceptor</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>BaseUrl</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>MaxAge</name>
            <comment></comment>
            <returntype>aghajari.retrofit.CacheControlBuilder</returntype>
            <parameter>
                <name>maxAge</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>NoStore</name>
            <comment></comment>
            <returntype>aghajari.retrofit.CacheControlBuilder</returntype>
        </method>
        <method>
            <name>NoCache</name>
            <comment></comment>
            <returntype>aghajari.retrofit.CacheControlBuilder</returntype>
        </method>
        <method>
            <name>NoTransform</name>
            <comment></comment>
            <returntype>aghajari.retrofit.CacheControlBuilder</returntype>
        </method>
        <method>
            <name>OnlyIfCached</name>
            <comment></comment>
            <returntype>aghajari.retrofit.CacheControlBuilder</returntype>
        </method>
        <method>
            <name>BuildAsNetworkInterceptor</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>BaseUrl</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>aghajari.retrofit.Converter</name>
        <owner>process</owner>
        <method>
            <name>InputStream</name>
            <comment></comment>
            <returntype>java.io.InputStream</returntype>
        </method>
        <method>
            <name>BigFile</name>
            <comment>&lt;b&gt; Events : &lt;/b&gt;&lt;code&gt;
 EventName_onProgress(Progress As Int,Transfered As Long,total As Long)&lt;/code&gt;</comment>
            <returntype>java.io.File</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Drawable</name>
            <comment></comment>
            <returntype>anywheresoftware.b4a.objects.drawable.BitmapDrawable</returntype>
        </method>
        <method>
            <name>String</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>Json</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>Double</name>
            <comment></comment>
            <returntype>double</returntype>
        </method>
        <method>
            <name>Integer</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>Float</name>
            <comment></comment>
            <returntype>float</returntype>
        </method>
        <method>
            <name>Bytes</name>
            <comment></comment>
            <returntype>byte[]</returntype>
        </method>
        <method>
            <name>ShortFile</name>
            <comment></comment>
            <returntype>java.io.File</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Bitmap</name>
            <comment></comment>
            <returntype>android.graphics.Bitmap</returntype>
        </method>
        <method>
            <name>Long</name>
            <comment></comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>Boolean</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Chars</name>
            <comment></comment>
            <returntype>char[]</returntype>
        </method>
        <method>
            <name>Short</name>
            <comment></comment>
            <returntype>short</returntype>
        </method>
    </class>
    <class>
        <name>aghajari.retrofit.DownloadOptions</name>
        <owner>process</owner>
        <method>
            <name>Streaming</name>
            <comment>Treat the response body on methods returning Response as is, i.e. without converting body() to byte[]</comment>
            <returntype>aghajari.retrofit.DownloadOptions</returntype>
            <parameter>
                <name>Streaming</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Cut</name>
            <comment>&lt;i&gt; Name : "" = Default File Name&lt;/i&gt;</comment>
            <returntype>aghajari.retrofit.DownloadOptions</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>WithName</name>
            <comment>Set Download File Name</comment>
            <returntype>aghajari.retrofit.DownloadOptions</returntype>
            <parameter>
                <name>Name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Copy</name>
            <comment>Copy File After Download 
 &lt;i&gt; Name : "" = Default File Name&lt;/i&gt;</comment>
            <returntype>aghajari.retrofit.DownloadOptions</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetMaxProgress</name>
            <comment></comment>
            <returntype>aghajari.retrofit.DownloadOptions</returntype>
            <parameter>
                <name>Max</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Build</name>
            <comment>Set Download Options In Retrofit</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>WithKey</name>
            <comment>Set Download File Key</comment>
            <returntype>aghajari.retrofit.DownloadOptions</returntype>
            <parameter>
                <name>Key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IntoProgressBar</name>
            <comment></comment>
            <returntype>aghajari.retrofit.DownloadOptions</returntype>
            <parameter>
                <name>View</name>
                <type>android.widget.ProgressBar</type>
            </parameter>
        </method>
        <method>
            <name>IntoTextView</name>
            <comment></comment>
            <returntype>aghajari.retrofit.DownloadOptions</returntype>
            <parameter>
                <name>TextView</name>
                <type>android.widget.TextView</type>
            </parameter>
            <parameter>
                <name>arg0</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>WithPath</name>
            <comment>Set Download Path</comment>
            <returntype>aghajari.retrofit.DownloadOptions</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Default</name>
            <comment>Set Default Values</comment>
            <returntype>aghajari.retrofit.DownloadOptions</returntype>
        </method>
        <method>
            <name>IntoProgressDialog</name>
            <comment></comment>
            <returntype>aghajari.retrofit.DownloadOptions</returntype>
            <parameter>
                <name>Dialog</name>
                <type>android.app.ProgressDialog</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>aghajari.retrofit.myObservable</name>
        <shortname>Amir_Observable</shortname>
        <comment>Create New Request in Retrofit With RxJava.</comment>
        <owner>process</owner>
        <method>
            <name>Take</name>
            <comment>Returns an Observable that emits those items emitted by source 
 Observable before a specified time runs out.</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>count</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>RunMethod</name>
            <comment>Run Method in Observable
 &lt;b&gt; Example : &lt;/b&gt;&lt;code&gt;
 Dim Rx as Amir_Observable
 Dim myObject as Object
 myObject=Rx.RunMethod("timeInterval",Null)
 
 if myObject=Null Then
 Log("Method Not Found!")
 Else
 Rx.Observable=myObject
 End If&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>MethodName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Params</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>Serialize</name>
            <comment>Forces an Observable's emissions and notifications to be serialized 
 and for it to obey the Rx contract in other ways. It is possible for
 an Observable to invoke its Subscribers' methods asynchronously, 
 perhaps from different threads. This could make such an Observable 
 poorly-behaved, in that it might try to invoke onCompleted or onError 
 before one of its onNext invocations, or it might call onNext from 
 two different threads concurrently. You can force such an Observable 
 to be well-behaved and sequential by applying the serialize method to 
 it.
 &lt;b&gt; Scheduler: &lt;/b&gt;
  serialize does not operate by default on a particular Scheduler.</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
        </method>
        <method>
            <name>TimeOut</name>
            <comment>Returns an Observable that mirrors the source Observable but 
 applies a timeout policy for each emitted item. If the next item 
 isn't emitted within the specified timeout duration starting from 
 its predecessor, the resulting Observable terminates and notifies 
 observers of a TimeoutException. 
 
 &lt;b&gt;TimeUnit : SECONDS&lt;/b&gt;</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>t</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>Repeat</name>
            <comment>Returns an Observable that repeats the sequence of items emitted by
 the source Observable indefinitely, on a particular Scheduler.</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
        </method>
        <method>
            <name>Subscribe</name>
            <comment>&lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (Response as Object)&lt;/code&gt;
 ____________________________________________________________________
 Subscribes to an Observable and provides an Observer that implements 
 functions to handle the items the Observable emits and any error or 
 completion notification it issues.</comment>
            <returntype>rx.Subscription</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Sender</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>asObservable</name>
            <comment>Disguises a object of an Observable subclass as a simple Observable 
 object. Useful for instance when you have an implementation of a 
 subclass of Observable but you want to hide the properties and methods
 of this subclass from whomever you are passing the Observable to.</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Use NewRequest2 Method . You Don't Need To Initialize After That!</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>Observable</name>
                <type>rx.Observable</type>
            </parameter>
        </method>
        <method>
            <name>Delay</name>
            <comment>Returns an Observable that emits the items emitted by the source 
 Observable shifted forward in time by a specified delay. Error 
 notifications from the source Observable are not delayed.
 &lt;b&gt;Scheduler:&lt;/b&gt;
 you specify which Scheduler this operator will use 
 TimeUnit : SECONDS</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>delay</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>Compose</name>
            <comment>Transform an Observable by applying a particular Transformer function 
 to it. This method operates on the Observable itself whereas 
 lift(rx.Observable.Operator) operates on the Observable's Subscribers 
 or Observers. If the operator you are creating is designed to act on 
 the individual items emitted by a source Observable, use 
 lift(rx.Observable.Operator). If your operator is designed to transform
 the source Observable as a whole (for instance, by applying a 
 particular set of existing RxJava operators to it) use compose.
&lt;b&gt;Scheduler:&lt;/b&gt;
 compose does not operate by default on a particular Scheduler.
&lt;b&gt; Parameters: &lt;/b&gt;
 transformer implements the function that transforms the source Observable</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>transformer</name>
                <type>rx.Observable.Transformer</type>
            </parameter>
        </method>
        <method>
            <name>Last</name>
            <comment>Converts a Observable that emits a sequence of objects into one 
 that only emits the last object in this sequence before completing.</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
        </method>
        <method>
            <name>Distinct</name>
            <comment>Returns an Observable that emits all items emitted by the source
 Observable that are distinct.</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
        </method>
        <method>
            <name>ignoreElements</name>
            <comment>Ignores all items emitted by the source Observable and only calls
 &lt;i&gt;onCompleted&lt;/i&gt; or &lt;i&gt;onError&lt;/i&gt;.</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
        </method>
        <method>
            <name>ObserveOn4</name>
            <comment></comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>scheduler</name>
                <type>rx.Scheduler</type>
            </parameter>
            <parameter>
                <name>DelayError</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>buffersize</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ObserveOn3</name>
            <comment></comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>scheduler</name>
                <type>rx.Scheduler</type>
            </parameter>
            <parameter>
                <name>buffersize</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ObserveOn2</name>
            <comment></comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>scheduler</name>
                <type>rx.Scheduler</type>
            </parameter>
            <parameter>
                <name>DelayError</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Retry2</name>
            <comment>Returns an Observable that mirrors the source Observable, resubscribing
 to it if it calls onError and the predicate returns true for that 
 specific exception and retry count.
 &lt;b&gt;Scheduler: &lt;/b&gt;
 retry operates by default on the trampoline Scheduler.
 &lt;b&gt;Parameters:&lt;/b&gt;
  predicate the predicate that determines if a resubscription may happen in 
  case of a specific exception and retry count</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>Count</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>Debounce</name>
            <comment>Returns an Observable that mirrors the source Observable, except 
 that it drops items emitted by the source Observable that are 
 followed by newer items before a timeout value expires. The timer 
 resets on each emission.
&lt;b&gt;Note:&lt;/b&gt; If items keep being emitted by the source Observable faster than 
the timeout then no items will be emitted by the resulting Observable. 
Information on debounce vs throttle:
&lt;i&gt;  Debounce and Throttle: visual explanation &lt;/i&gt;
&lt;i&gt;  Debouncing: javascript methods &lt;/i&gt;
&lt;i&gt;  Javascript - don't spam your server: debounce and throttle &lt;/i&gt;
 &lt;b&gt;Backpressure Support:&lt;/b&gt;
  This operator does not support backpressure as it uses time to control
  data flow.
 &lt;b&gt;Scheduler:&lt;/b&gt;
  This version of debounce operates by default on the computation Scheduler. 
  
 &lt;b&gt;TimeUnit : SECONDS&lt;/b&gt;</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>TimeOut</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>First</name>
            <comment>Returns an Observable that emits only the very first item emitted by
 the source Observable, or notifies of an NoSuchElementException if 
 the source Observable is empty.</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
        </method>
        <method>
            <name>RetryWithDelays</name>
            <comment>Retry
 Uses retryWhen in Observable</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>maxRetries</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>retryDelayMillis</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SkipLast</name>
            <comment>Returns an Observable that drops items emitted by the source Observable
 during a specified time window before the source completes.
&lt;b&gt;Note:&lt;/b&gt; this action will cache the latest items arriving in the specified 
time window.
&lt;b&gt; Scheduler: &lt;/b&gt;
 This version of skipLast operates by default on the computation Scheduler.</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>count</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Delay2</name>
            <comment>TimeUnit : SECONDS</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>TimeOut</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>scheduler</name>
                <type>rx.Scheduler</type>
            </parameter>
        </method>
        <method>
            <name>Repeat2</name>
            <comment></comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>Count</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>Repeat3</name>
            <comment></comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>scheduler</name>
                <type>rx.Scheduler</type>
            </parameter>
        </method>
        <method>
            <name>Repeat4</name>
            <comment></comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>scheduler</name>
                <type>rx.Scheduler</type>
            </parameter>
            <parameter>
                <name>Count</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>Sorted</name>
            <comment></comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
        </method>
        <method>
            <name>ObserveOn</name>
            <comment>Modifies an Observable to perform its emissions and notifications on a 
 specified Scheduler, asynchronously with an unbounded buffer.</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>scheduler</name>
                <type>rx.Scheduler</type>
            </parameter>
        </method>
        <method>
            <name>UnsubscribeOn</name>
            <comment></comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>scheduler</name>
                <type>rx.Scheduler</type>
            </parameter>
        </method>
        <method>
            <name>TakeLast</name>
            <comment>Returns an Observable that emits at most a specified number of 
 items from the source Observable that were emitted in a specified
 window of time before the Observable completed.</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>count</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Single</name>
            <comment>Returns an Observable that emits the single item emitted by the source
 Observable that matches a specified predicate, if that Observable 
 emits one such item. If the source Observable emits more than one such
 item or no such items, notify of an IllegalArgumentException or 
 NoSuchElementException respectively. 
 &lt;b&gt; Scheduler: &lt;/b&gt;
  serialize does not operate by default on a particular Scheduler.</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
        </method>
        <method>
            <name>Replay</name>
            <comment>Returns a rx.observables.ConnectableObservable that shares a single
 subscription to the underlying Observable that will replay all of 
 its items and notifications to any future Observer. A Connectable 
 Observable resembles an ordinary Observable, except that it does not 
 begin emitting items when it is subscribed to, but only when its 
 connect method is called.</comment>
            <returntype>rx.observables.ConnectableObservable</returntype>
        </method>
        <method>
            <name>Skip</name>
            <comment>Returns an Observable that skips values emitted by the source 
 Observable before a specified time window elapses.
 &lt;b&gt;Scheduler: &lt;/b&gt;
 This version of skip operates by default on the computation Scheduler.</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>count</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Replay3</name>
            <comment></comment>
            <returntype>rx.observables.ConnectableObservable</returntype>
            <parameter>
                <name>buffersize</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Retry</name>
            <comment>Returns an Observable that mirrors the source Observable, resubscribing
 to it if it calls onError (infinite retry count). If the source 
 Observable calls Observer.onError(java.lang.Throwable), this method 
 will resubscribe to the source Observable rather than propagating the 
 onError call. Any and all items emitted by the source Observable will
 be emitted by the resulting Observable, even those emitted during 
 failed subscriptions. For example, if an Observable fails at first 
 but emits [1, 2] then succeeds the second time and emits [1, 2, 3, 4,
  5] then the complete sequence of emissions and notifications would be
 [1, 2, 1, 2, 3, 4, 5, onCompleted].
 &lt;b&gt; Scheduler:&lt;/b&gt;
  retry operates by default on the trampoline Scheduler.</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
        </method>
        <method>
            <name>Limit</name>
            <comment>Returns an Observable that emits only the first num items emitted by
 the source Observable. Alias of take(int) to match Java 8 Stream API
 naming convention. This method returns an Observable that will invoke 
 a subscribing Observer's onNext function a maximum of num times before
 invoking onCompleted.</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>Count</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SubscribeOn2</name>
            <comment></comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>scheduler</name>
                <type>rx.Scheduler</type>
            </parameter>
            <parameter>
                <name>requestOn</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Share</name>
            <comment>Returns an Observable that emits the single item emitted by the source
 Observable, if that Observable emits only a single item. If the source
 Observable emits more than one item or no items, notify of an 
 IllegalArgumentException or NoSuchElementException respectively. 
 &lt;b&gt; Scheduler: &lt;/b&gt;
  serialize does not operate by default on a particular Scheduler.</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
        </method>
        <method>
            <name>SubscribeOn</name>
            <comment>Asynchronously subscribes Observers to this Observable on the specified Scheduler.
 &lt;b&gt;Scheduler: &lt;/b&gt;
 you specify which Scheduler this operator will use</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>scheduler</name>
                <type>rx.Scheduler</type>
            </parameter>
        </method>
        <method>
            <name>Replay2</name>
            <comment></comment>
            <returntype>rx.observables.ConnectableObservable</returntype>
            <parameter>
                <name>scheduler</name>
                <type>rx.Scheduler</type>
            </parameter>
        </method>
        <method>
            <name>Cache</name>
            <comment>Caches the emissions from the source Observable and replays them in order 
 to any subsequent Subscribers. This method has similar behavior to replay()
 except that this auto-subscribes to the source Observable rather than 
 returning a rx.observables.ConnectableObservable for which you must call 
 connect to activate the subscription. This is useful when you want an 
 Observable to cache responses and you can't control the subscribe/unsubscribe
 behavior of all the Subscribers. When you call cache, it does not yet 
 subscribe to the source Observable and so does not yet begin cacheing items.
 This only happens when the first Subscriber calls the resulting Observable's
 subscribe method. &lt;b&gt;Note:&lt;/b&gt; You sacrifice the ability to unsubscribe from the
 origin when you use the cache Observer so be careful not to use this Observer
 on Observables that emit an infinite or very large number of items that will
 use up memory.
&lt;b&gt; Backpressure Support: &lt;/b&gt;
 This operator does not support upstream backpressure as it is purposefully 
 requesting and caching everything emitted.</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
        </method>
        <property>
            <name>Observable</name>
            <returntype>rx.Observable</returntype>
            <parameter>
                <name>Observable</name>
                <type>rx.Observable</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>aghajari.retrofit.mySchedulers</name>
        <shortname>Amir_Scheduler</shortname>
        <comment>Transformers And Schedulers For Use in Amir_Observable</comment>
        <owner>process</owner>
        <property>
            <name>onDoTransformer</name>
            <returntype>rx.Observable.Transformer</returntype>
            <comment>RXJAVA schedulersTransformer
 Schedulers.newThread()</comment>
        </property>
        <property>
            <name>HandleErrorTransformer</name>
            <returntype>rx.Observable.Transformer</returntype>
            <comment>handleException Transformer</comment>
        </property>
        <property>
            <name>Trampoline</name>
            <returntype>rx.Scheduler</returntype>
            <comment>Creates and returns a rx.Scheduler that queues work on the current thread to be executed after
 the current work completes.</comment>
        </property>
        <property>
            <name>Computation</name>
            <returntype>rx.Scheduler</returntype>
            <comment>Creates and returns a rx.Scheduler intended for computational work. 
 This can be used for event-loops, processing callbacks and other 
 computational work. Do not perform IO-bound work on this scheduler.
 Use io() instead. Unhandled errors will be delivered to the scheduler
 Thread's java.lang.Thread.UncaughtExceptionHandler.</comment>
        </property>
        <property>
            <name>Io</name>
            <returntype>rx.Scheduler</returntype>
            <comment>Creates and returns a rx.Scheduler intended for IO-bound work.
The implementation is backed by an java.util.concurrent.Executor thread-pool that will grow as needed.
This can be used for asynchronously performing blocking IO.
Do not perform computational work on this scheduler. Use computation() instead.
Unhandled errors will be delivered to the scheduler Thread's java.lang.Thread.UncaughtExceptionHandler.</comment>
        </property>
        <property>
            <name>NewThread</name>
            <returntype>rx.Scheduler</returntype>
            <comment>Creates and returns a rx.Scheduler that creates a new java.lang.Thread for each unit of work.
Unhandled errors will be delivered to the scheduler Thread's java.lang.Thread.UncaughtExceptionHandler.</comment>
        </property>
        <property>
            <name>SchedulersTransformerDown</name>
            <returntype>rx.Observable.Transformer</returntype>
            <comment>RXJAVA schedulersTransformer
 Schedulers.io()</comment>
        </property>
        <property>
            <name>Immediate</name>
            <returntype>rx.Scheduler</returntype>
            <comment>Creates and returns a rx.Scheduler that executes work immediately on 
 the current thread.</comment>
        </property>
        <property>
            <name>SchedulersTransformer</name>
            <returntype>rx.Observable.Transformer</returntype>
            <comment>RXJAVA schedulersTransformer
 Schedulers.newThread()</comment>
        </property>
    </class>
    <class>
        <name>aghajari.retrofit.RequestBodyCreate</name>
        <shortname>Amir_RequestBody</shortname>
        <comment>&lt;b&gt; Request Body &lt;/b&gt;
 Returns a new request body that transmits content. If  contentType is non-null
 and lacks a charset, this will use UTF-8...</comment>
        <owner>process</owner>
        <method>
            <name>WithPartRequestBody</name>
            <comment></comment>
            <returntype>okhttp3.MultipartBody.Part</returntype>
            <parameter>
                <name>body</name>
                <type>okhttp3.RequestBody</type>
            </parameter>
        </method>
        <method>
            <name>WithFile</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>MediaType</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>WithString</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>MediaType</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Content</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>WithByte2</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>MediaType</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Content</name>
                <type>byte[]</type>
            </parameter>
            <parameter>
                <name>offset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>bytecount</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>WithPartFormData2</name>
            <comment></comment>
            <returntype>okhttp3.MultipartBody.Part</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>body</name>
                <type>okhttp3.RequestBody</type>
            </parameter>
        </method>
        <method>
            <name>WithByte</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>MediaType</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Content</name>
                <type>byte[]</type>
            </parameter>
        </method>
        <method>
            <name>WithPartRequestBodyAndHeader</name>
            <comment></comment>
            <returntype>okhttp3.MultipartBody.Part</returntype>
            <parameter>
                <name>Header</name>
                <type>java.util.Map</type>
            </parameter>
            <parameter>
                <name>body</name>
                <type>okhttp3.RequestBody</type>
            </parameter>
        </method>
        <method>
            <name>WithProgressRequestBodyObservable</name>
            <comment>&lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt; EventName_onProgressUpdate (Progress as float,uploaded as float,total as float)&lt;/code&gt;
 &lt;code&gt; EventName_WriteTo (BufferedSink as Object,buffer() as byte,Read as int,isFirst as boolean)&lt;/code&gt;
 _________________________________________________________________
 BufferSize : 2048
 
 You Can Use this Request for okhttp3.RequestBody</comment>
            <returntype>aghajari.retrofit.ProgressRequestBodyObservable</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>MediaType</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>BufferSize</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>MultipartBody</name>
            <comment>An &lt;link&gt;RFC 2387|http://www.ietf.org/rfc/rfc2387.txt&lt;/link&gt;-compliant request body. 
  
 &lt;b&gt; Example : &lt;/b&gt;&lt;code&gt;
 Retrofit.Body("EV","Link", _
 Retrofit.RB.MultipartBody("").SetType("Type") _ 
 .AddPart2(Retrofit.RB.WithString("text/*","Hello")) _
 .AddPart2(Retrofit.RB.WithString("text/*","Text2")).Build)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.RequestBodyCreate.MultipartBodyBuilder</returntype>
            <parameter>
                <name>boundary</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Create</name>
            <comment></comment>
            <returntype>aghajari.retrofit.RequestBodyCreate.Class</returntype>
        </method>
        <method>
            <name>WithPartFormData</name>
            <comment></comment>
            <returntype>okhttp3.MultipartBody.Part</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getJsonString</name>
            <comment>MediaType : &lt;copy&gt;"application/json; charset=utf-8"&lt;/copy&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>object</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <property>
            <name>Types</name>
            <returntype>aghajari.retrofit.RequestBodyCreate.Types</returntype>
            <comment>&lt;b&gt;MULTIPART&lt;/b&gt; | &lt;b&gt;MIME&lt;/b&gt;</comment>
        </property>
    </class>
    <class>
        <name>aghajari.retrofit.RequestBodyCreate.MultipartBodyBuilder</name>
        <owner>process</owner>
        <method>
            <name>AddFormDataPart</name>
            <comment>Add a form data part to the body.</comment>
            <returntype>aghajari.retrofit.RequestBodyCreate.MultipartBodyBuilder</returntype>
            <parameter>
                <name>Name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Value</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>AddPart</name>
            <comment>Add a part to the body.</comment>
            <returntype>aghajari.retrofit.RequestBodyCreate.MultipartBodyBuilder</returntype>
            <parameter>
                <name>part</name>
                <type>okhttp3.MultipartBody.Part</type>
            </parameter>
        </method>
        <method>
            <name>SetType</name>
            <comment>&lt;b&gt;Set the MIME type. &lt;/b&gt;
 Expected values for type are  :
 1.Mixed : &lt;code&gt;"multipart/mixed"&lt;/code&gt; &lt;i&gt;(the default)&lt;/i&gt;
 2.Alternative : &lt;code&gt;"multipart/alternative"&lt;/code&gt;
 3.Digest : &lt;code&gt;"multipart/digest"&lt;/code&gt;
 4.Parallel : &lt;code&gt;"multipart/parallel"&lt;/code&gt;
 5.Form : &lt;code&gt;"multipart/form-data"&lt;/code&gt;
 _____________________________________________________________________________________________
 &lt;b&gt; MIXED : &lt;/b&gt;
 The "mixed" subtype of "multipart" is intended for use when the body parts are independent and
 need to be bundled in a particular order. Any "multipart" subtypes that an implementation does
 not recognize must be treated as being of subtype "mixed".
 _____________________________________________________________________________________________
 &lt;b&gt; ALTERNATIVE : &lt;/b&gt;
 The "multipart/alternative" type is syntactically identical to "multipart/mixed", but the
 semantics are different. In particular, each of the body parts is an "alternative" version of
 the same information.
 _____________________________________________________________________________________________
 &lt;b&gt; DIGEST : &lt;/b&gt;
 This type is syntactically identical to "multipart/mixed", but the semantics are different. In
 particular, in a digest, the default Content-Type value for a body part is changed from
 "text/plain" to "message/rfc822".
 _____________________________________________________________________________________________
 &lt;b&gt; PARALLEL : &lt;/b&gt;
 This type is syntactically identical to "multipart/mixed", but the semantics are different. In
 particular, in a parallel entity, the order of body parts is not significant.
 _____________________________________________________________________________________________
 &lt;b&gt; FORM : &lt;/b&gt;
 The media-type multipart/form-data follows the rules of all multipart MIME data streams as
 outlined in RFC 2046. In forms, there are a series of fields to be supplied by the user who
 fills out the form. Each field has a name. Within a given form, the names are unique.</comment>
            <returntype>aghajari.retrofit.RequestBodyCreate.MultipartBodyBuilder</returntype>
            <parameter>
                <name>MultipartMediaType</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>AddFormDataPart2</name>
            <comment>Add a form data part to the body.</comment>
            <returntype>aghajari.retrofit.RequestBodyCreate.MultipartBodyBuilder</returntype>
            <parameter>
                <name>Name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Body</name>
                <type>okhttp3.RequestBody</type>
            </parameter>
        </method>
        <method>
            <name>Build</name>
            <comment>Assemble the specified parts into a request body.
 &lt;b&gt;  MultipartBody extends RequestBody  &lt;/b&gt;</comment>
            <returntype>okhttp3.MultipartBody</returntype>
        </method>
        <method>
            <name>AddPart3</name>
            <comment>Add a part to the body.</comment>
            <returntype>aghajari.retrofit.RequestBodyCreate.MultipartBodyBuilder</returntype>
            <parameter>
                <name>Header</name>
                <type>java.util.Map</type>
            </parameter>
            <parameter>
                <name>Body</name>
                <type>okhttp3.RequestBody</type>
            </parameter>
        </method>
        <method>
            <name>AddPart2</name>
            <comment>Add a part to the body.</comment>
            <returntype>aghajari.retrofit.RequestBodyCreate.MultipartBodyBuilder</returntype>
            <parameter>
                <name>Body</name>
                <type>okhttp3.RequestBody</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>aghajari.retrofit.RequestBodyCreate.Types</name>
        <owner>process</owner>
        <field>
            <name>MULTIPART_AUDIO_DATA</name>
            <comment>&lt;code&gt;audio/*&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>MULTIPART_TEXT_DATA</name>
            <comment>&lt;code&gt;text/plain&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>MULTIPART_IMAGE_DATA</name>
            <comment>&lt;code&gt;image/*; charset=utf-8&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>MULTIPART_FORM_DATA</name>
            <comment>&lt;code&gt;multipart/form-data;&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>MIME_TYPE_TEXT</name>
            <comment>&lt;code&gt;text/*&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>MIME_TYPE_VIDEO</name>
            <comment>&lt;code&gt;video/*&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>MULTIPART_JSON_DATA</name>
            <comment>&lt;code&gt;application/json; charset=utf-8&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>MIME_TYPE_AUDIO</name>
            <comment>&lt;code&gt;audio/*&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>MIME_TYPE_APP</name>
            <comment>&lt;code&gt;application/*&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>MULTIPART_APK_DATA</name>
            <comment>&lt;code&gt;application/vnd.android.package-archive&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>MULTIPART_JAVA_DATA</name>
            <comment>&lt;code&gt;java/*&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>MIME_TYPE_IMAGE</name>
            <comment>&lt;code&gt;image/*&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>MULTIPART_MESSAGE_DATA</name>
            <comment>&lt;code&gt;message/rfc822&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>MULTIPART_VIDEO_DATA</name>
            <comment>&lt;code&gt;video/*&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
        </field>
    </class>
    <class>
        <name>aghajari.retrofit.RequestBodyCreate.Class</name>
        <owner>process</owner>
        <method>
            <name>As</name>
            <comment></comment>
            <returntype>aghajari.retrofit.RequestBodyCreate.As</returntype>
        </method>
        <method>
            <name>Progress</name>
            <comment>&lt;b&gt; Event : &lt;/b&gt;
 &lt;code&gt;EventName_onRequestProgress(bytesWritten As Long,contentLength As Long,done As Boolean)&lt;/code&gt;
 ________________________________________________
 &lt;b&gt; Example : &lt;/b&gt; &lt;code&gt;
 Retrofit.Body("EV","URL",Retrofit.RB.Create.Progress( _
 Retrofit.RB.WithString("text/*","VALUE"),"Amir",null))
 Sub Amir_onRequestProgress(bytesWritten As Long,contentLength As Long,done As Boolean)
 Log(bytesWritten&amp;"/"&amp;contentLength)
 End Sub&lt;/code&gt;</comment>
            <returntype>com.aghajari.ProgressRequestBody</returntype>
            <parameter>
                <name>requestBody</name>
                <type>okhttp3.RequestBody</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Sender</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Part</name>
            <comment></comment>
            <returntype>okhttp3.MultipartBody.Part</returntype>
            <parameter>
                <name>partName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Gzip</name>
            <comment>Compression RequestBody With Gzip algorithm
 &lt;b&gt; Header : &lt;/b&gt;
 &lt;code&gt; "Content-Encoding" &lt;/code&gt; : &lt;code&gt; "gzip" &lt;/code&gt;</comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>body</name>
                <type>okhttp3.RequestBody</type>
            </parameter>
        </method>
        <method>
            <name>Deflate</name>
            <comment>Compress RequestBody With Deflate algorithm
 &lt;b&gt; Header : &lt;/b&gt;
 &lt;code&gt; "Content-Encoding" &lt;/code&gt; : &lt;code&gt; "deflate" &lt;/code&gt;</comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>body</name>
                <type>okhttp3.RequestBody</type>
            </parameter>
            <parameter>
                <name>Level</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>noHeader</name>
                <type>boolean</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>aghajari.retrofit.RequestBodyCreate.As</name>
        <owner>process</owner>
        <method>
            <name>Zip</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Java</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Css</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>CSS</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Message</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>Msg</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Gif</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Csv</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>CSV</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Drawable</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>Drawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
        </method>
        <method>
            <name>Html</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>HTML</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Text</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Json</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>jsonString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>String</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>Name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Image</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Soap</name>
            <comment>Soap+Xml</comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>Soap_Xml</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Uri</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>FileUri</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Bitmap</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>Bitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>Pdf</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Xml</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>XML</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Video</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Gzip</name>
            <comment>GZIP File.
 You Can Convert RequestBody To Gzip
 Request Body With This Code : &lt;code&gt;
 RequestBody.Create.Gzip(RequestBody) &lt;/code&gt;</comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Audio</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>File</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>File2</name>
            <comment>Set Media Type With File</comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Apk</name>
            <comment></comment>
            <returntype>okhttp3.RequestBody</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>aghajari.retrofit.Retrofit</name>
        <shortname>Amir_Retrofit</shortname>
        <comment>&lt;b&gt;Retrofit Version : 2.5.0 &lt;/b&gt;
 &lt;b&gt;Edited Version : 2.6.0 &lt;/b&gt;
  Retrofit , Novate
  
 &lt;b&gt;What is Retrofit ?&lt;/b&gt;
Retrofit is a REST Client for Android by Square. It makes it 
relatively easy to retrieve and upload JSON (or other structured data) 
via a REST based webservice. In Retrofit you configure which converter 
is used for the data serialization.
Retrofit uses the OkHttp library for HTTP requests 
but it's really faster then okHttp.

 &lt;b&gt;Requests : &lt;/b&gt;
 &lt;b&gt; Post &lt;/b&gt;
 &lt;b&gt; Get &lt;/b&gt;
 &lt;b&gt; Delete &lt;/b&gt;
 &lt;b&gt; Put &lt;/b&gt;</comment>
        <owner>process</owner>
        <event>onCompleted        '💎💎💎              Body-Form-Json              💎💎💎




End Sub
Sub EventName_onError (Error as String)

End Sub
Sub EventName_onNext (ResponseBody as Amir_ResponseBody)</event>
        <event>onCompleted      '💎💎💎           Post-Get-Put-Delete-Patch         💎💎💎



End Sub
Sub EventName_onError (Error as String,Code as int)

End Sub
Sub EventName_onNext (ResponseBody as Amir_ResponseBody)</event>
        <event>onCompleted        '💎💎💎      Download-DownloadMin       💎💎💎


End Sub
Sub EventName_onError (Error as String,Code as int)

End Sub
Sub EventName_onCancel

End Sub
Sub EventName_onStart (Key as String)

End Sub
Sub EventName_onProgress (key as String,progress as int,downloadedsize as long,totalsize as long)

End Sub
Sub EventName_onSucess (key as String,path as String,Name as String,FileSize as long)</event>
        <event>onCompleted        '💎💎💎 Upload (With Progress Request) 💎💎💎

End Sub
Sub EventName_onError (Error as String)

End Sub
Sub EventName_onNext (ResponseBody as Amir_ResponseBody)

End Sub
Sub EventName_onProgressUpdate (Progress as float,uploaded as float,total as float)
'Do not forget to set the Request Body With ProgressRequestBodyObservable</event>
        <permission>android.permission.ACCESS_NETWORK_STATE</permission>
        <permission>android.permission.INTERNET</permission>
        <method>
            <name>Delete</name>
            <comment>&lt;i&gt;use DELETE when you need to delete a resource 
 (relative to the URI you've sent) on that system.&lt;/i&gt;
 
 &lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String,Code as int)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;
 ____________________________________________________
 &lt;b&gt;Example : &lt;/b&gt;&lt;code&gt;
 Retrofit.delete("Amir","Address",CreateMap("Key":Value))&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Maps</name>
                <type>java.util.Map</type>
            </parameter>
        </method>
        <method>
            <name>Options</name>
            <comment>&lt;i&gt;The HTTP OPTIONS method is used to describe the communication 
 options for the target resource. The client can specify a URL 
 for the OPTIONS method, or an asterisk (*) to refer to the entire
 server.&lt;/i&gt;
 
 &lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String,Code as int)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;
 __________________________________________________________
 &lt;b&gt;Example : &lt;/b&gt; &lt;code&gt;
 Retrofit.Options("Amir","Address",CreateMap())&lt;/code&gt;
 &lt;code&gt; Sub Amir_onNext (ResponseBody as Amir_ResponseBody) 
 Log(ResponseBody.String)
 End Sub&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>maps</name>
                <type>java.util.Map</type>
            </parameter>
        </method>
        <method>
            <name>NewRequest2</name>
            <comment>&lt;i&gt;Create New Request With RxJava&lt;/i&gt;
 &lt;b&gt; Events : &lt;/b&gt; &lt;i&gt;You Should Use Subscriber in Observable&lt;/i&gt;
 _____________________________________________
 &lt;b&gt; Warnings : &lt;/b&gt;
  Create interface class 
  Create Method With Return Type : Observable (T) 
  ____________________________________________
  &lt;b&gt; ir.aghajari.retrofit.Retrofit.Amir_GetApiClass &lt;/b&gt; 
  &lt;i&gt;public static Object Service(Class Class)&lt;/i&gt;
  &lt;i&gt;public static Object ApiClass()&lt;/i&gt;
  &lt;i&gt;public static Transformer schedulersTransformer()&lt;/i&gt;
  &lt;i&gt;public static Transformer onDdoTransformer()&lt;/i&gt;
  &lt;i&gt;public static Transformer handleErrTransformer()&lt;/i&gt;
 _____________________________________________
 &lt;b&gt; How to Get Class ? &lt;/b&gt;
 First Import &lt;code&gt;ir.aghajari.retrofit.Retrofit.Amir_GetApiClass&lt;/code&gt;
 Now Use This Code : &lt;code&gt;
 public Object getApiClass(){
 return Amir_GetApiClass.Service(MyService.class);
}&lt;/code&gt;
 _____________________________________________
 &lt;b&gt; Example : &lt;/b&gt; &lt;i&gt;Edit Java Code ! &lt;/i&gt;&lt;code&gt;
 Dim Rx as Amir_Observable
 Dim J As JavaObject : J.InitializeContext
 Rx=Retrofit.NewRequest2(J.RunMethod("getApiClass",Null),"ApiGet",Array ("UrlAddress",CreateMap("Key":Value)))
 Dim Scheduler As Amir_Scheduler
 Rx.Compose(Scheduler.SchedulersTransformer).Compose(Scheduler.HandleErrorTransformer)
 Rx.Subscribe(Null,"Amir")
 
Sub Amir_onNext (Response as Object)
Dim ResponseBody as Amir_ResponseBody
ResponseBody.Import(Response)
Log(ResponseBody.String)
End Sub 

 #if java
 import ir.aghajari.retrofit.Retrofit.Amir_GetApiClass;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import retrofit2.http.*;
import rx.Observable;
import java.util.Map;
public interface MyService {
        GET()
   &lt;T&gt; Observable&lt;ResponseBody&gt; ApiGet(
           Url String url,
           QueryMap Map&lt;String, Object&gt; maps);
}

public Object getApiClass(){
 return Amir_GetApiClass.Service(MyService.class);
}
#end if
 &lt;/code&gt;
 _____________________________________________
Class: : Your Class .
MethodName: : Your Method Name
Params: : Parameters as Object</comment>
            <returntype>aghajari.retrofit.myObservable</returntype>
            <parameter>
                <name>Class</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>MethodName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Params</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>Start</name>
            <comment>Start New Request
 &lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;
 ____________________________________________________
 &lt;b&gt;Example : &lt;/b&gt;&lt;code&gt;
 Retrofit.Start("PUT","Amir","Address",Body)&lt;/code&gt;
 ____________________________________________________
 &lt;b&gt;Methods : &lt;/b&gt;
 POST - GET - PUT - PATCH - HEAD - DELETE</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>Method</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>body</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Form</name>
            <comment>Post With Encoded Enable
 &lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;
 __________________________________________________________
 	 * &lt;b&gt;Example : &lt;/b&gt; &lt;code&gt;
 Retrofit.form("Amir","Address",CreateMap("Key":value),True)&lt;/code&gt;
 &lt;code&gt; Sub Amir_onNext (ResponseBody as Amir_ResponseBody) 
 Log(ResponseBody.String)
 End Sub&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>fields</name>
                <type>java.util.Map</type>
            </parameter>
            <parameter>
                <name>Encoded</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>PostMultipart</name>
            <comment>&lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;
 _______________________________________________________
 Post Multipart
 &lt;b&gt;Example : &lt;/b&gt;&lt;code&gt;
 Dim Files As List
 Files.Initialize
 Files.Add(Retrofit.RB.WithPartFormData2("Name","FileName", _
 Retrofit.RB.WithFile("image/*",File.DirRootExternal,"NAME.PNG"))) 'Post File
 Files.Add(Retrofit.RB.WithPartFormData("key","hello")) 'Post String
 Retrofit.PostMultipart("Amir","Address",Files)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>files</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>Upload</name>
            <comment>&lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;
 ____________________________________________________________
 Upload file.
 &lt;b&gt;Example : &lt;/b&gt;&lt;code&gt;
 Retrofit.upload("Amir","Address",Retrofit.RB.WithFile("image/*",File.DirInternal,"Image.png")&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>request</name>
                <type>okhttp3.RequestBody</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Create Retrofit With Custom Builder</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>Builder</name>
                <type>aghajari.retrofit.Builder</type>
            </parameter>
        </method>
        <method>
            <name>FakeRequest</name>
            <comment>Start a fake request (Get-Post)
 onError : Error=UNKNOW , Code = -1
 onNext : ResponseBody= a cusom response with your own content.
 
 &lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String,Code as int)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>success</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>contentType</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>content</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>UploadImage</name>
            <comment>&lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;
 _________________________________________________________
 Upload Image. &lt;i&gt; Cann't Accept Assets!&lt;/i&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>RequestWithCallback</name>
            <comment>&lt;i&gt;Use Retrofit CallBack&lt;/i&gt;
 &lt;b&gt; Events : &lt;/b&gt; Call Enqueue in Amir_CallBack
 ___________________________________________________
 &lt;b&gt; CustomClass : &lt;/b&gt;
 Api Service. Pass Null For set Defualt Amir_Retrofit Service
 if you want to use Custom Class add your Request Methods to your Service with lowercase
 ___________________________________________________
 &lt;b&gt; Requests : &lt;/b&gt;&lt;code&gt;
 Get : Url As String , maps As Map
 Head : Url As String , maps As Map
 Options : Url As String , maps As Map
 Post : Url As String , maps As Map
 PostBody : Url As String , Body As Object
 Put : Url As String , maps As Map
 PutBody : Url As String , Body As Object
 Patch : Url As String , maps As Map
 PatchBody : Url As String , Body As Object
 Delete : Url As String , maps As Map
 DeleteBody : Url As String , Body As Object
 Download : FileUrl as String
 DownloadMin : FileUrl as String
 Upload : Url As String , RequestBody as okhttp3.RequestBody
 UploadFiles : Url As String,files as Map&lt;String, RequestBody&gt;
 UploadMultipart : Url As String ,partMap as Map&lt;String, RequestBody&gt;,file as MultipartBody.Part
 UploadMultipartList : Url As String , List as List&lt;MultipartBody.Part&gt;&lt;/code&gt;
 _____________________________________________________________________________________
 &lt;b&gt; Example : &lt;/b&gt; &lt;code&gt;
 Dim Call As Amir_CallBack = _
 Retrofit.RequestWithCallback(Null,"Post",Array ("URL",PARAMS))
 Call.Enqueue("Amir",Null) &lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_CallBack</returntype>
            <parameter>
                <name>CustomClass</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>RequestName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Params</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>SetDownloadOptions</name>
            <comment></comment>
            <returntype>aghajari.retrofit.DownloadOptions</returntype>
        </method>
        <method>
            <name>Unsubscribe</name>
            <comment>&lt;b&gt;Unsubscribe&lt;/b&gt; Requests
 &lt;b&gt;Parameters&lt;/b&gt;
 &lt;i&gt;Subscription &lt;/i&gt; : Request Objects
 &lt;i&gt; Set Null For Use LastRequest &lt;/i&gt;
 __________________________________________________
 &lt;b&gt; Example : &lt;/b&gt;&lt;code&gt;
 Dim Subscription as Object
 Subscription=Retrofit.Get("Amir","Address",CreateMap()).RequestObject
 ...
 Retrofit.Unsubscribe(Subscription)&lt;/code&gt;
 __________________________________________________
 &lt;b&gt; Example 2 : &lt;/b&gt;&lt;code&gt;
 Sub Globals
  Dim Retrofit As Amir_Retrofit
  Dim Subscription As Object = Null
 End Sub
 
 Sub Activity_Create(FirstTime As Boolean)
  Retrofit.Initialize2("BaseUrl")
 End Sub
 
 Sub Download_Click ' Button Click
  'Start Downloading 
  Subscription=Retrofit.download("EventName","Address").RequestObject
  Log("Download")
 End Sub

 Sub Cancel_Click ' Button Click
  If Subscription&lt;&gt;Null then
  Retrofit.Unsubscribe(Subscription)
  Log("Unsubscribe")
  Else
  Log("Subscription Is NULL !")
  End If
 End Sub&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Subscription</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Body</name>
            <comment>http Post by Body 
 &lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;
 ____________________________________________________
 &lt;b&gt;Example : &lt;/b&gt;&lt;code&gt;
 Retrofit.body("Amir","Address",Body)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>body</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Download</name>
            <comment>&lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onCancel&lt;/code&gt;
 &lt;code&gt;EventName_onStart (Key as String)&lt;/code&gt;
 &lt;code&gt;EventName_onSucess (key as String,path as String,Name as String,FileSize as long)&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String,Code as int)&lt;/code&gt;
 &lt;code&gt;EventName_onProgress (key as String,progress as int,downloadedsize as long,totalsize as long)&lt;/code&gt;
 _______________________________________________________________
 &lt;b&gt; Example : &lt;/b&gt;&lt;code&gt;
 Retrofit.Download("Amir","Url")
 Sub Amir_onSucess (key as String,path as String,Name as String,FileSize as long)
 Log(path&amp;"/"&amp;Name)
 End Sub &lt;/code&gt;
 _______________________________________________________________
 &lt;b&gt; Example2 : &lt;/b&gt;&lt;code&gt;
 
 Retrofit.SetDownloadOptions _
 .Streaming(True) _
 .Copy(File.DirRootExternal,"") _
 .WithName("FileName") _
 .WithKey("Key") _
 .Build
 
 Retrofit.Download("Amir","Url")
 Sub Amir_onSucess (key as String,path as String,Name as String,FileSize as long)
 Log(path&amp;"/"&amp;Name)
 End Sub &lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isUnsubscribed</name>
            <comment>&lt;b&gt;isUnsubscribed&lt;/b&gt; Check the Subscribe of the the Requests
 &lt;b&gt;Parameters&lt;/b&gt;
 &lt;i&gt;Subscription &lt;/i&gt; : Request Objects
 &lt;i&gt; Set Null For Use LastRequest &lt;/i&gt;
 __________________________________________________
 &lt;b&gt; Example : &lt;/b&gt;&lt;code&gt;
 Dim Subscription as Object
 Subscription=Retrofit.Get("Amir","Address",CreateMap()).RequestObject
 ...
 Log(Retrofit.isUnsubscribed(Subscription))&lt;/code&gt;</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>Subscription</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>CookieManager</name>
            <comment></comment>
            <returntype>aghajari.retrofit.Retrofit.CookieManager</returntype>
        </method>
        <method>
            <name>Release</name>
            <comment>Start New Retrofit With Last Builder!
 &lt;code&gt; Retrofit.Release &lt;/code&gt;
 if you want to start New Retrofit With New Builder
 You Can Initialize this Retrofit Again
 &lt;code&gt; Retrofit.Initialize2("NewBaseUrl") &lt;/code&gt;
 Or
 &lt;code&gt; Retrofit.Initialize(NewBuilder) &lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Retrofit</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>Cookie</name>
            <comment>get Cookie Information
 &lt;b&gt; Example : &lt;/b&gt; &lt;code&gt;
 Dim L as List=Retrofit.CookieManager.LoadForRequest("Url")
 Log(Retrofit.Cookie(L.get(0)).Domain)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Retrofit.CookieItem</returntype>
            <parameter>
                <name>Cookie</name>
                <type>okhttp3.Cookie</type>
            </parameter>
        </method>
        <method>
            <name>Head</name>
            <comment>&lt;i&gt;The HTTP HEAD method requests the headers that are returned if 
 the specified resource would be requested with an HTTP GET method. 
 Such a request can be done before deciding to download a large 
 resource to save bandwidth, for example.&lt;/i&gt;
 
 &lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String,Code as int)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;
 __________________________________________________________
 &lt;b&gt;Example : &lt;/b&gt; &lt;code&gt;
 Retrofit.Head("Amir","Address",CreateMap())&lt;/code&gt;
 &lt;code&gt; Sub Amir_onNext (ResponseBody as Amir_ResponseBody) 
 Log(ResponseBody.String)
 End Sub&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>maps</name>
                <type>java.util.Map</type>
            </parameter>
        </method>
        <method>
            <name>GetStreaming</name>
            <comment>&lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String,Code as int)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;
 Output Events :
 &lt;code&gt;EventName_onSucess(Size As Long,Output As OutputStream) &lt;/code&gt;
 &lt;code&gt;EventName_onProgress(Progress As int,ReadedSize As Long,TotalSize As Long,Read As int,Output As OutputStream) &lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>OutputStream</name>
                <type>java.io.OutputStream</type>
            </parameter>
        </method>
        <method>
            <name>Post</name>
            <comment>&lt;i&gt;use POST when you need to send some data to the server.
 Ex. from a form to save these data somewhere.&lt;/i&gt;
 
 &lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String,Code as int)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>parameters</name>
                <type>java.util.Map</type>
            </parameter>
        </method>
        <method>
            <name>UploadFileWithPartMap</name>
            <comment>partMap : String , RequestBody 
 Header : String , String | You Can Set Null
 &lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;
 _______________________________________________________
 Upload File and Post Params 
 &lt;b&gt;Example : &lt;/b&gt;&lt;code&gt;
 Dim Body as Amir_RequestBody
 Dim M as Map=CreateMap("Key1":Body.WithString("text/plain","Hello"))
 Retrofit.UploadFileWithPartMap("Amir","Address",M,Body.WithPartFormData2("PartName","FileName",Body.WithFile("image/*",File.DirInternal,"Image.png")))&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>partMap</name>
                <type>java.util.Map</type>
            </parameter>
            <parameter>
                <name>body</name>
                <type>okhttp3.MultipartBody.Part</type>
            </parameter>
        </method>
        <method>
            <name>UploadFiles</name>
            <comment>files : String , RequsetBody
 &lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;
 ___________________________________________________________
 Upload Files &lt;code&gt;
 Dim Body as Amir_RequestBody
 Dim M as Map : M.Initialize
 M.put("Key1":Body.WithFile("image/*",File.DirInternal,"Image1.png"))
 M.put("Key2":Body.WithFile("image/*",File.DirInternal,"Image2.png"))
 Retrofit.UploadFiles("Amir","Address",M)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>files</name>
                <type>java.util.Map</type>
            </parameter>
        </method>
        <method>
            <name>Json</name>
            <comment>http Post by json 
 &lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;
 __________________________________________________________
 &lt;b&gt;Example : &lt;/b&gt; &lt;code&gt;
 Retrofit.json("Amir","Address",Retrofit.toJson(CreateMap("Key":value)))&lt;/code&gt;
 &lt;link&gt;json.org|https://www.json.org/&lt;/link&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>jsonStr</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Put</name>
            <comment>&lt;i&gt;use PUT when you need to replace the state of
  some data already existing on that system.&lt;/i&gt;
  
 &lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String,Code as int)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>parameters</name>
                <type>java.util.Map</type>
            </parameter>
        </method>
        <method>
            <name>DoInBackground</name>
            <comment>Start Request In Background Thread.
 &lt;b&gt; Params : &lt;/b&gt;
 &lt;b&gt; Method : &lt;/b&gt; Amir_Retrofit Method Name. &lt;i&gt; ToLowerCase &lt;/i&gt;
 &lt;b&gt; EventName : &lt;/b&gt; CallBack EventName.
 &lt;b&gt; Url : &lt;/b&gt; Request URL
 &lt;b&gt; params : &lt;/b&gt; Amir_Retrofit Method Params With Out EventName And Url. 
 __________________________________________________________________________
 &lt;b&gt; Example : &lt;/b&gt; 
 Default Amir_Retrofit Code : &lt;code&gt;
 Retrofit.Post("Amir","UrlAddress",CreateMap("Key":"Value"))&lt;/code&gt;
 With DoInBackground : &lt;code&gt;
 Retrofit.DoInBackground("post","Amir","UrlAddress",Array(CreateMap("Key":"Value")))&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Async</returntype>
            <parameter>
                <name>Request</name>
                <type>aghajari.retrofit.Amir_RetrofitRequest</type>
            </parameter>
        </method>
        <method>
            <name>About</name>
            <comment>Amir Hossein Aghajari 
Telegram Id : &lt;code&gt; @KingAmir272 &lt;/code&gt;
Instagram : &lt;code&gt; amirhossein_aghajari_official &lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>isUnsubscribedAsync</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>myAsync</name>
                <type>aghajari.retrofit.Async</type>
            </parameter>
        </method>
        <method>
            <name>toJson</name>
            <comment>Convert Object To String For Use it In Json Request</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>src</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>UnsubscribeAsync</name>
            <comment>Attempts to cancel execution of this task. 
 This attempt will fail if the task has already completed, already been cancelled, or c
 ould not be cancelled for some other reason. If successful, and this task has not started 
 when cancel is called, this task should never run. If the task has already started, then 
 the mayInterruptIfRunning parameter determines whether the thread executing this task should 
 be interrupted in an attempt to stop the task.
 
 &lt;b&gt;Parameters:&lt;/b&gt;
 &lt;i&gt;myAsync&lt;/i&gt; : Pass Null For Set Last Async.
 &lt;i&gt;UnsubscribeRequest&lt;/i&gt; : true if you want to Unsubscribe Retrofit Request.
 &lt;i&gt;mayInterruptIfRunning&lt;/i&gt; : true if the thread executing this task should be interrupted;
 otherwise, in-progress tasks are allowed to complete.
 &lt;b&gt;Returns:&lt;/b&gt;
false if the task could not be cancelled, typically because it has already completed normally;
true otherwise</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>myAsync</name>
                <type>aghajari.retrofit.Async</type>
            </parameter>
            <parameter>
                <name>UnsubscribeRequest</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>mayInterruptIfRunning</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>NewBuilder</name>
            <comment>&lt;b&gt; Example : &lt;/b&gt; &lt;code&gt;
 Log("before : "&amp;Retrofit.RetrofitBaseUrl.host)
 Retrofit=Retrofit.NewBuilder.baseUrl("NewBaseUrl").Build
 Log("after : "&amp;Retrofit.RetrofitBaseUrl.host)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Builder</returntype>
        </method>
        <method>
            <name>CreateService</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>service</name>
                <type>java.lang.Class</type>
            </parameter>
        </method>
        <method>
            <name>Initialize3</name>
            <comment>Create Retrofit With Default Builder and without baseUrl</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Create Retrofit With Default Builder</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>BaseUrl</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>PostRequestBody</name>
            <comment>http Post by RequestBody
 &lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>body</name>
                <type>okhttp3.RequestBody</type>
            </parameter>
        </method>
        <method>
            <name>Get</name>
            <comment>&lt;i&gt;use GET when you need to access a resource and retrieve data
 and you don't have to modify or alter the state of this data.&lt;/i&gt;
 
 &lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String,Code as int)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;
 __________________________________________________________
 &lt;b&gt;Example : &lt;/b&gt; &lt;code&gt;
 Retrofit.get("Amir","Address",CreateMap())&lt;/code&gt;
 &lt;code&gt; Sub Amir_onNext (ResponseBody as Amir_ResponseBody) 
 Log(ResponseBody.String)
 End Sub&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>maps</name>
                <type>java.util.Map</type>
            </parameter>
        </method>
        <method>
            <name>UploadFileWithDescription</name>
            <comment>Header : String,String You Can Set Null
 &lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;
 _________________________________________________________
 Upload File with a description Request</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>description</name>
                <type>okhttp3.RequestBody</type>
            </parameter>
            <parameter>
                <name>part</name>
                <type>okhttp3.MultipartBody.Part</type>
            </parameter>
        </method>
        <method>
            <name>NewRequest</name>
            <comment>&lt;i&gt;Create New Request &lt;/i&gt;
 &lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;
 _____________________________________________
 &lt;b&gt; Warnings : &lt;/b&gt;
  Create interface class 
  Create Method With Return Type : Observable ResponseBody 
  ____________________________________________
  &lt;b&gt; ir.aghajari.retrofit.Retrofit.Amir_GetApiClass &lt;/b&gt; 
  &lt;i&gt;public static Object Service(Class Class)&lt;/i&gt;
  &lt;i&gt;public static Object ApiClass()&lt;/i&gt;
  &lt;i&gt;public static Transformer schedulersTransformer()&lt;/i&gt;
  &lt;i&gt;public static Transformer onDdoTransformer()&lt;/i&gt;
  &lt;i&gt;public static Transformer handleErrTransformer()&lt;/i&gt;
 _____________________________________________
 &lt;b&gt; How to Get Class ? &lt;/b&gt;
 First Import &lt;code&gt;ir.aghajari.retrofit.Retrofit.Amir_GetApiClass&lt;/code&gt;
 Now Use This Code : &lt;code&gt;
 public Object getApiClass(){
 return Amir_GetApiClass.Service(MyService.class);
}&lt;/code&gt;
 _____________________________________________
 &lt;b&gt; Example : &lt;/b&gt; &lt;i&gt;Edit Java Code ! &lt;/i&gt;&lt;code&gt;
 Dim J As JavaObject : J.InitializeContext
 Retrofit.NewRequest("Amir",J.RunMethod("getApiClass",Null),"ApiGet",Array ("UrlAddress",CreateMap("Key":Value)))
 #if java
 import ir.aghajari.retrofit.Retrofit.Amir_GetApiClass;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import okhttp3.ResponseBody;
import retrofit2.http.*;
import rx.Observable;
import java.util.Map;
public interface MyService {
        GET()
   &lt;T&gt; Observable&lt;ResponseBody&gt; ApiGet(
           Url String url,
           QueryMap Map&lt;String, Object&gt; maps);
}

public Object getApiClass(){
 return Amir_GetApiClass.Service(MyService.class);
}
#end if

Sub Amir_onNext (ResponseBody as Amir_ResponseBody)
Log(ResponseBody.String)
End Sub &lt;/code&gt;
 _____________________________________________
EventName: : Your EventName for Load Events
Class: : Your Class .
MethodName: : Your Method Name
Params: : Parameters as Object</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Class</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>MethodName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Params</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>Patch</name>
            <comment>&lt;i&gt;The HTTP PUT method only allows complete replacement of 
 a document. Unlike PUT, PATCH is not idempotent, meaning 
 successive identical patch requests may have different effects.
 However, it is possible to issue PATCH requests in such a
 way as to be idempotent.&lt;/i&gt;
  
 &lt;b&gt; Events : &lt;/b&gt;
 &lt;code&gt;EventName_onCompleted&lt;/code&gt;
 &lt;code&gt;EventName_onError (Error as String,Code as int)&lt;/code&gt;
 &lt;code&gt;EventName_onNext (ResponseBody as Amir_ResponseBody)&lt;/code&gt;</comment>
            <returntype>aghajari.retrofit.Amir_RetrofitRequest</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>parameters</name>
                <type>java.util.Map</type>
            </parameter>
        </method>
        <method>
            <name>Cache</name>
            <comment>Caches HTTP and HTTPS responses to the filesystem so they may be reused,
  saving time and bandwidth.	
 &lt;b&gt; Return Retrofit CacheManager &lt;/b&gt;</comment>
            <returntype>aghajari.retrofit.Retrofit.CacheManager</returntype>
        </method>
        <property>
            <name>RB</name>
            <returntype>aghajari.retrofit.RequestBodyCreate</returntype>
            <comment></comment>
        </property>
        <property>
            <name>RetrofitBaseUrl</name>
            <returntype>aghajari.retrofit.baseUrl</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Utils</name>
            <returntype>aghajari.retrofit.Amir_Utils</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Client</name>
            <returntype>okhttp3.OkHttpClient</returntype>
            <comment>get this retrofit Client for use in new Builder</comment>
        </property>
        <field>
            <name>Sender</name>
            <comment>Use Tag Sender In Events
 Default is Null
 &lt;b&gt; Example : &lt;/b&gt;&lt;code&gt;
 Retrofit.Sender="Hello World! Get"
 Retrofit.Get("Amir","Link",CreateMap())
 
 Retrofit.Sender="Hello World! Post"
 Retrofit.Post("Amir","Link2",CreateMap())
 ...
 Sub Amir_onNext (ResponseBody as Amir_ResponseBody)
 Dim Tag as String = Sender
 Log(Tag) ' Or Log(Sender)
 End Sub&lt;/code&gt;</comment>
            <returntype>java.lang.Object</returntype>
        </field>
        <field>
            <name>LastRetrofitRequest</name>
            <comment>Get The Last Retrofit Request</comment>
            <returntype>java.lang.Object</returntype>
        </field>
        <field>
            <name>SetHeaders</name>
            <comment>Add Header Runtime !
 Don't Forgot To Enable addHeaderRuntime Method</comment>
            <returntype>java.util.Map</returntype>
        </field>
        <field>
            <name>Tag</name>
            <comment>Use Tag For Amir_Retrofit
 Default is (String) "Amir_Retrofit"</comment>
            <returntype>java.lang.Object</returntype>
        </field>
    </class>
    <class>
        <name>aghajari.retrofit.Retrofit.CookieItem</name>
        <owner>process</owner>
        <method>
            <name>Matches</name>
            <comment>Returns true if this cookie should be included on a request to  url. In addition to this
 check callers should also confirm that this cookie has not expired.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>Path</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns this cookie's path. This cookie matches URLs prefixed with path segments that match
 this path's segments. For example, if this path is  /foo this cookie matches requests to
 /foo and /foo/bar, but not  / or  /football.</comment>
        </property>
        <property>
            <name>Secure</name>
            <returntype>boolean</returntype>
            <comment>Returns true if this cookie should be limited to only HTTPS requests.</comment>
        </property>
        <property>
            <name>Value</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns a possibly-empty string with this cookie's value.</comment>
        </property>
        <property>
            <name>HostOnly</name>
            <returntype>boolean</returntype>
            <comment>Returns true if this cookie's domain should be interpreted as a single host name, or false if
 it should be interpreted as a pattern. This flag will be false if its Set-Cookie header
 included a domain attribute.

 For example, suppose the cookie's domain is example.com. If this flag is true it
 matches &lt;b&gt;only&lt;/b&gt; example.com. If this flag is false it matches
 example.com and all subdomains including api.example.com, www.example.com, and
 beta.api.example.com.</comment>
        </property>
        <property>
            <name>Persistent</name>
            <returntype>boolean</returntype>
            <comment>Returns true if this cookie does not expire at the end of the current session.</comment>
        </property>
        <property>
            <name>Domain</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the cookie's domain. If  hostOnly returns true this is the only domain that
 matches this cookie; otherwise it matches this domain and all subdomains.</comment>
        </property>
        <property>
            <name>ExpiresAt</name>
            <returntype>long</returntype>
            <comment>Returns the time that this cookie expires, in the same format as 
 System currentTimeMillis. This is December 31, 9999 if the cookie is 
 not persistent, in which case it will expire at the end of the current session.

 This may return a value less than the current time, in which case the cookie is already
 expired. Webservers may return expired cookies as a mechanism to delete previously set cookies
 that may or may not themselves be expired.</comment>
        </property>
        <property>
            <name>HttpOnly</name>
            <returntype>boolean</returntype>
            <comment>Returns true if this cookie should be limited to only HTTP APIs. In web browsers this prevents
 the cookie from being accessible to scripts.</comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns a non-empty string with this cookie's name.</comment>
        </property>
    </class>
    <class>
        <name>aghajari.retrofit.Retrofit.CookieManager</name>
        <owner>process</owner>
        <method>
            <name>ParseCookie</name>
            <comment>Attempt to parse a  Set-Cookie HTTP header value  setCookie as a cookie. Returns
 null if  setCookie is not a well-formed cookie.
 &lt;b&gt; Return : &lt;/b&gt;okhttp3.Cookie</comment>
            <returntype>okhttp3.Cookie</returntype>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>setCookie</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>LoadAll</name>
            <comment>Return List of Cookies (okhttp3.Cookie)</comment>
            <returntype>java.util.List</returntype>
        </method>
        <method>
            <name>LoadForRequest</name>
            <comment>Get List Of okhttp3.Cookie</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ParseAllCookie</name>
            <comment>Returns all of the cookies from a set of HTTP response headers.
 &lt;b&gt; Return : &lt;/b&gt;List of okhttp3.Cookie</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>headers</name>
                <type>java.util.Map</type>
            </parameter>
        </method>
        <method>
            <name>ClearSession</name>
            <comment>Clear all the session cookies while maintaining the persisted ones.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SaveFromResponse</name>
            <comment>this method uses filterPersistentCookies
 &lt;b&gt; Example : &lt;/b&gt;&lt;code&gt;
 Retrofit.CookieManager.SaveFromResponse("Url",Retrofit.CacheManager.ParseAllCookie("Url",Headers))&lt;/code&gt;

Cookies : List of okhttp3.Cookie</comment>
            <returntype>void</returntype>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Cookies</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>Clear</name>
            <comment>Clear all the cookies from persistence and from the cache.</comment>
            <returntype>void</returntype>
        </method>
    </class>
    <class>
        <name>aghajari.retrofit.Retrofit.CacheManager</name>
        <owner>process</owner>
        <method>
            <name>Delete</name>
            <comment>Closes the cache and deletes all of its stored values. This will delete all files in the cache
 directory including files that weren't created by the cache.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>DirectoryDeleteOnExit</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>maxSize</name>
            <comment></comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initialize the cache. This will include reading the journal files from the storage and building
 up the necessary in-memory cache information.

 The initialization time may vary depending on the journal file size and the current actual
 cache size. The application needs to be aware of calling this function during the
 initialization phase and preferably in a background worker thread.

 Note that if the application chooses to not call this method to initialize the cache. By
 default, the okhttp will perform lazy initialization upon the first usage of the cache.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>writeAbortCount</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>writeSuccessCount</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>size</name>
            <comment></comment>
            <returntype>long</returntype>
        </method>
        <method>
            <name>flush</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>isClosed</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Close</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>EvictAll</name>
            <comment>Deletes all values stored in the cache. In-flight writes to the cache will complete normally,
 but the corresponding responses will not be stored.</comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>UrlsIterator</name>
            <returntype>aghajari.retrofit.Retrofit.CacheManager.urls</returntype>
            <comment>Returns an iterator over the URLs in this cache. This iterator doesn't throw 
 ConcurrentModificationException, but if new responses are added while iterating, their URLs
 will not be returned. If existing responses are evicted during iteration, they will be absent
 (unless they were already returned).

 The iterator supports  Iterator remove. Removing a URL from the iterator evicts
 the corresponding response from the cache. Use this to evict selected responses.
____________________________________________________________________________________________
&lt;b&gt;Example : &lt;/b&gt;&lt;code&gt;
Do While Retrofit.Cache.UrlsIterator.hasNext
Log(Retrofit.Cache.UrlsIterator.Next)
Loop&lt;/code&gt;</comment>
        </property>
        <property>
            <name>DirectoryPath</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DirectoryFreeSpace</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DirectoryUsableSpace</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>UrlsList</name>
            <returntype>java.util.List</returntype>
            <comment>&lt;b&gt;Example : &lt;/b&gt;&lt;code&gt;
Dim L as List= Retrofit.Cache.UrlsList
for i = 0 to L.size-1
Log(L.get(i))
Next&lt;/code&gt;</comment>
        </property>
        <property>
            <name>DirectoryName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DirectoryTotalSpace</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DirectoryDelete</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Directory</name>
            <returntype>java.io.File</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>aghajari.retrofit.Retrofit.CacheManager.urls</name>
        <owner>process</owner>
        <method>
            <name>Next</name>
            <comment>Returns the next element in the iteration.
&lt;b&gt;Returns:&lt;/b&gt; the next element in the iteration</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>hasNext</name>
            <comment>Returns true if the iteration has more elements. (In other words,
 returns true if next() would return an element rather than throwing 
 an exception.)
&lt;b&gt;Returns:&lt;/b&gt; true if the iteration has more elements</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>remove</name>
            <comment>Removes from the underlying collection the last element returned 
 by this iterator (optional operation). This method can be called 
 only once per call to next(). The behavior of an iterator is 
 unspecified if the underlying collection is modified while the 
 iteration is in progress in any way other than by calling this method.</comment>
            <returntype>void</returntype>
        </method>
    </class>
    <class>
        <name>aghajari.retrofit.Retrofit.Amir_GetApiClass</name>
        <owner>process</owner>
        <method>
            <name>handleErrTransformer</name>
            <comment></comment>
            <returntype>rx.Observable.Transformer</returntype>
        </method>
        <method>
            <name>schedulersTransformer</name>
            <comment></comment>
            <returntype>rx.Observable.Transformer</returntype>
        </method>
        <method>
            <name>Service</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>Class</name>
                <type>java.lang.Class</type>
            </parameter>
        </method>
        <method>
            <name>onDdoTransformer</name>
            <comment></comment>
            <returntype>rx.Observable.Transformer</returntype>
        </method>
        <method>
            <name>ApiClass</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
        </method>
        <method>
            <name>schedulersTransformerDown</name>
            <comment></comment>
            <returntype>rx.Observable.Transformer</returntype>
        </method>
    </class>
    <version>2.6</version>
    <author>AmirHosseinAghajari</author>
    <dependsOn>Amir_Retrofit.aar</dependsOn>
</root>
