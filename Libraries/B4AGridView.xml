<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.05</doclet-version-NOT-library-version>
    <class>
        <name>it.giuseppe.salvi.gridview.library.core.PhotoGridView</name>
        <shortname>PhotoGridView</shortname>
        <objectwrapper>android.view.ViewGroup</objectwrapper>
        <owner>activity</owner>
        <event>Ready()</event>
        <event>ItemClick(Position As Int, Value As Object)</event>
        <event>ItemLongClick(Position As Int, Value As Object)</event>
        <event>ShareItemClick(Value As Object)</event>
        <permission>android.permission.WRITE_EXTERNAL_STORAGE</permission>
        <permission>android.permission.READ_EXTERNAL_STORAGE</permission>
        <permission>android.permission.INTERNET</permission>
        <method>
            <name>isPauseOnScroll</name>
            <comment>Whether pause ImageLoader during touch scrolling</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>DesignerCreateView</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>base</name>
                <type>anywheresoftware.b4a.objects.PanelWrapper</type>
            </parameter>
            <parameter>
                <name>label</name>
                <type>anywheresoftware.b4a.objects.LabelWrapper</type>
            </parameter>
            <parameter>
                <name>props</name>
                <type>anywheresoftware.b4a.objects.collections.Map</type>
            </parameter>
        </method>
        <method>
            <name>SetText</name>
            <comment>Sets the string value of the TextView.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ShowActionBarToShare</name>
            <comment>Sets the icons on action bar
 
 Example:
 Dim icons() As String = Array As String("gmail.png","email.png","gmx.png","dropbox.png","facebook.png","twitter.png","telegram.png","line.png")
icons: as array</comment>
            <returntype>void</returntype>
            <parameter>
                <name>icons</name>
                <type>java.lang.String[]</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initialize the object</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>InitializeFromLayout</name>
            <comment>Initialize the object from layout</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>container</name>
                <type>android.view.ViewGroup</type>
            </parameter>
            <parameter>
                <name>Layout</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>LayoutID</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>AddImageFromWebAt</name>
            <comment>Add an image from Web to the desired position in the GridView</comment>
            <returntype>void</returntype>
            <parameter>
                <name>index</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>address</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>AddThisView</name>
            <comment>Adds view to this activity 100%x,100%y</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayout</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>arg3</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <method>
            <name>ClearDiskCache</name>
            <comment>Clears disk cache.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>GetIndividualCacheDir</name>
            <comment>Returns individual application cache directory (for only image caching from ImageLoader). Cache directory will be
 created on SD card &lt;i&gt;("/Android/data/[app_package_name]/cache/b4AGridview-Images")&lt;/i&gt; if card is mounted and app has
 appropriate permission. Else - Android defines cache directory on device's file system.</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>SetText2</name>
            <comment>Sets the string value of the TextView.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>index</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ShareItemsTo</name>
            <comment>Share any items to ?
app: name
item: 
subJect: 
message: 
shareTo: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>appName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>item</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>subJect</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>message</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>shareTo</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ShowFromMediaStore</name>
            <comment>Populate GridView from media store images</comment>
            <returntype>void</returntype>
            <parameter>
                <name>sort</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>AddImageFromWeb</name>
            <comment>Add an image from web at the end of the GridView</comment>
            <returntype>void</returntype>
            <parameter>
                <name>address</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>RemoveView</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Invalidate3</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg3</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>AddImageAt</name>
            <comment>Add an image from sdcard or AssetsDir to the desired position in the GridView</comment>
            <returntype>void</returntype>
            <parameter>
                <name>index</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>file</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>SetBackgroundImage</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <method>
            <name>AddImage</name>
            <comment>Add an image from sdcard or AssetsDir at the end of the GridView</comment>
            <returntype>void</returntype>
            <parameter>
                <name>dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>file</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>StopEngine</name>
            <comment>Cancels all running and scheduled display image tasks.
 &lt;b&gt;NOTE:&lt;/b&gt; This method doesn't shutdown if you set them.

 ImageLoader still can be used after calling this method.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>PauseEngine</name>
            <comment>Pause ImageLoader. All new load and display tasks won't be executed until ImageLoader is resumed.
 Already running tasks are not paused.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>ShowFromSdCard</name>
            <comment>Populate GridView from sdcard</comment>
            <returntype>void</returntype>
            <parameter>
                <name>dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>sort</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>RequestFocus</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>TextColor2</name>
            <comment>Get or Sets Text Color - by default White</comment>
            <returntype>void</returntype>
            <parameter>
                <name>alpha</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>red</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>green</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>blue</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ShowFromBucket</name>
            <comment>Populate GridView from sdcard</comment>
            <returntype>void</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>sort</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetRealImagePath</name>
            <comment>Returns the real path of the image</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>filename</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isPauseOnFling</name>
            <comment>Whether pause ImageLoader during fling</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetArrayList</name>
            <comment>Gets array.</comment>
            <returntype>java.util.List</returntype>
        </method>
        <method>
            <name>convertPixelsToDp</name>
            <comment></comment>
            <returntype>float</returntype>
            <parameter>
                <name>px</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>context</name>
                <type>android.content.Context</type>
            </parameter>
        </method>
        <method>
            <name>TextBackGroundColor</name>
            <comment>Sets the background color for this view.
 
 &lt;b&gt;by default red = 0&lt;/b&gt;
 &lt;b&gt;by default green = 0&lt;/b&gt;
 &lt;b&gt;by default blue = 0&lt;/b&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>red</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>green</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>blue</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ShareTextUrlTo</name>
            <comment>Share any text to ?
subject: 
text: 
message: 
shareTo: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>subject</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>message</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>shareTo</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetItem</name>
            <comment>Returns Item
 
 Example:
 
 i.Bitmap=LoadBitmap("",g.GetItem(Position))</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>BringToFront</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SendToBack</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetVisibleAnimated</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>SetColorAnimated</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ShowFromAssets</name>
            <comment>Populate GridView from assets or assets/sub-folder</comment>
            <returntype>void</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>sort</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>GetCacheDir</name>
            <comment>Returns application cache directory. Cache directory will be created on SD card
 &lt;i&gt;("/Android/data/[app_package_name]/cache")&lt;/i&gt; if card is mounted and app has appropriate permission. Else -
 Android defines cache directory on device's file system.
Return type: @return:Cache {@link File directory}.&lt;br /&gt;
 &lt;b&gt;NOTE:&lt;/b&gt; Can be null in some unpredictable cases (if SD card is unmounted)</comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>DestroyEngine</name>
            <comment>Stops ImageLoader and clears current configuration. Use this option on exit app.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetArrayList</name>
            <comment>Sets array.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>array</name>
                <type>java.util.ArrayList</type>
            </parameter>
        </method>
        <method>
            <name>ShowFromWeb</name>
            <comment>Populate GridView from web</comment>
            <returntype>void</returntype>
            <parameter>
                <name>webStrings</name>
                <type>java.lang.String[]</type>
            </parameter>
            <parameter>
                <name>sort</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>ClearMemoryCache</name>
            <comment>Clears memory cache</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Initialize the object and set own cache directory</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>withCacheName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GoToWebsite</name>
            <comment>Go to web site by given an address
 
 Example:
 
 GoToWebsite("www.example.com")
url: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ResumeEngine</name>
            <comment>Resumes waiting load and display tasks</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>GetImageListFromAssets</name>
            <comment>Get entire list of images stored in assets or sub-folder
 
 Examples:
 &lt;code&gt;
 Dim lv as ListView
 Dim l as list
 l.Initialize 
 lv.Initialize("lv")
 
 Sub Menu_Click
 	Activity.AddView(lv,0,0,100%x,100%y)
 	l = GridView.GetImageListFromAssets("Here the Images folder stored in Assets")
  or 
  l = GridView.GetImageListFromAssets(File.DirAssets)
  or
  l = GridView.GetImageListFromAssets("")
 	For n = 0 To l.Size-1
 		lv.AddSingleLine(l.Get(n))
 	next
 End Sub
 &lt;/code&gt;</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>sort</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Invalidate</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SetLayoutAnimated</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>arg3</name>
                <type Pixel="true">int</type>
            </parameter>
            <parameter>
                <name>arg4</name>
                <type Pixel="true">int</type>
            </parameter>
        </method>
        <property>
            <name>MaxAnimationVelocity</name>
            <returntype>int</returntype>
            <parameter>
                <name>itemsPerSecond</name>
                <type>int</type>
            </parameter>
            <comment>Get or Sets max animation velocity.</comment>
        </property>
        <property>
            <name>CompressFormat</name>
            <returntype>it.giuseppe.salvi.gridview.library.core.utility.bitmap.BitmaCompression</returntype>
            <parameter>
                <name>compressFormat</name>
                <type EnumType="true">android.graphics.Bitmap.CompressFormat</type>
            </parameter>
            <comment>Get or Sets the known formats a bitmap can be compressed into [ JPG or PNG ]Sets the quality of a bitmap, that can be compressed. [ 0 = low -&gt; 100 = high ]
 
 by default PNG</comment>
        </property>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>ScaleType</name>
            <returntype>it.giuseppe.salvi.gridview.library.core.imageview.scaletype.PhotoScaleTypes</returntype>
            <parameter>
                <name>scaletype</name>
                <type EnumType="true">android.widget.ImageView.ScaleType</type>
            </parameter>
            <comment>Controls how the image should be resized or moved to match the size of this ImageView.
 
 by default ScaleTypeFIT_XY</comment>
        </property>
        <property>
            <name>SetNoEffect</name>
            <parameter>
                <name>noeffect</name>
                <type>boolean</type>
            </parameter>
            <comment>Can display bitmap with rounded corners.
 Show thumbnails with corner radius or oval. - by default is true</comment>
        </property>
        <property>
            <name>TextBackGroundColor2</name>
            <parameter>
                <name>backgroundcolor</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Sets the background color for this view.
 
 Example:
 
 TextBackGroundColor2("#88666666")</comment>
        </property>
        <property>
            <name>ItemWidth</name>
            <returntype>int</returntype>
            <parameter>
                <name>itemWidth</name>
                <type>int</type>
            </parameter>
            <comment>Get or Sets the the size of the images will be displayed in thumbnail by default size is 480x320</comment>
        </property>
        <property>
            <name>TransitionEffect</name>
            <returntype>it.giuseppe.salvi.gridview.library.core.gridview.TransitionEffect</returntype>
            <parameter>
                <name>effect</name>
                <type>int</type>
            </parameter>
            <comment>Get or Sets the desired transition effect.</comment>
        </property>
        <property>
            <name>Version</name>
            <returntype>java.lang.String</returntype>
            <comment>Version of the library</comment>
        </property>
        <property>
            <name>TextStyle</name>
            <parameter>
                <name>style</name>
                <type>int</type>
            </parameter>
            <comment>Sets the style in which the text should be displayed.</comment>
        </property>
        <property>
            <name>ResetViewBeforeLoading</name>
            <parameter>
                <name>_resetViewBeforeLoading</name>
                <type>boolean</type>
            </parameter>
            <comment>Sets whether image view will be reset before image loading start</comment>
        </property>
        <property>
            <name>PauseOnFling</name>
            <parameter>
                <name>pauseOnFling</name>
                <type>boolean</type>
            </parameter>
            <comment>Whether pause ImageLoader during fling</comment>
        </property>
        <property>
            <name>TextColor</name>
            <returntype>int</returntype>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
            <comment>Get or Sets Text Color - by default White</comment>
        </property>
        <property>
            <name>CacheInMemory</name>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
            <comment>Sets whether loaded image will be cached in memory.</comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Color</name>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>LoadFontFromAssets</name>
            <parameter>
                <name>file</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Loads a new Typeface from the specified font data.</comment>
        </property>
        <property>
            <name>SetImageOnLoading</name>
            <parameter>
                <name>empty_photo</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Sets own icon on loading</comment>
        </property>
        <property>
            <name>DelayBeforeLoading</name>
            <parameter>
                <name>durationMillis</name>
                <type>int</type>
            </parameter>
            <comment>Sets delay time before starting loading task. Default - no delay.</comment>
        </property>
        <property>
            <name>RoundedBitmap</name>
            <parameter>
                <name>rounded</name>
                <type>boolean</type>
            </parameter>
            <comment>Can display bitmap with rounded corners. - by default is false</comment>
        </property>
        <property>
            <name>TransitionDuration</name>
            <returntype>int</returntype>
            <parameter>
                <name>duration</name>
                <type>int</type>
            </parameter>
            <comment>Get or Sets transition duration.</comment>
        </property>
        <property>
            <name>HorizontalSpacing</name>
            <parameter>
                <name>HSpacing</name>
                <type>int</type>
            </parameter>
            <comment>Defines the default horizontal spacing between columns..</comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>VerticalSpacing</name>
            <parameter>
                <name>VSpacing</name>
                <type>int</type>
            </parameter>
            <comment>Defines the default vertical spacing between rows.</comment>
        </property>
        <property>
            <name>TextLines</name>
            <returntype>int</returntype>
            <parameter>
                <name>lines</name>
                <type>int</type>
            </parameter>
            <comment>Get or Sets the TextView exactly this many lines tall.</comment>
        </property>
        <property>
            <name>SetCornerRadius</name>
            <parameter>
                <name>cornerRadius</name>
                <type>int</type>
            </parameter>
            <comment>Set the corner Radius - by default is 0</comment>
        </property>
        <property>
            <name>RemoveAt</name>
            <parameter>
                <name>index</name>
                <type>int</type>
            </parameter>
            <comment>Removes the item at the specified location from this list.</comment>
        </property>
        <property>
            <name>LoadFontFromFile</name>
            <parameter>
                <name>file</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Loads a new Typeface from the specified font data.</comment>
        </property>
        <property>
            <name>ColumnWidth</name>
            <returntype>int</returntype>
            <parameter>
                <name>columnWidth</name>
                <type>int</type>
            </parameter>
            <comment>Get or Sets Specifies the fixed width for each column.</comment>
        </property>
        <property>
            <name>CompressQuality</name>
            <returntype>int</returntype>
            <parameter>
                <name>quality</name>
                <type>int</type>
            </parameter>
            <comment>Get or Sets the quality of a bitmap, that can be compressed. [ 0 = low -&gt; 100 = high ]
 
 by default 100</comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>java.lang.Object</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Selection</name>
            <returntype>int</returntype>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
            <comment>Get or Sets the currently selected item.</comment>
        </property>
        <property>
            <name>ShowMessageError</name>
            <parameter>
                <name>message</name>
                <type>boolean</type>
            </parameter>
            <comment>Set to true if you want to display an error message.</comment>
        </property>
        <property>
            <name>NumColumns</name>
            <returntype>int</returntype>
            <parameter>
                <name>Columns</name>
                <type>int</type>
            </parameter>
            <comment>Get or Sets the number of columns in the grid.</comment>
        </property>
        <property>
            <name>ProgressBarIndeterminate</name>
            <parameter>
                <name>indeterminate</name>
                <type>boolean</type>
            </parameter>
            <comment>Change the indeterminate mode for this progress bar.</comment>
        </property>
        <property>
            <name>SmoothScrollbarEnabled</name>
            <parameter>
                <name>enabled</name>
                <type>boolean</type>
            </parameter>
            <comment>When smooth scrollbar is enabled, the position and size of the scrollbar thumb is computed based on the number of visible pixels in the visible items.</comment>
        </property>
        <property>
            <name>TextVisible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>show</name>
                <type>boolean</type>
            </parameter>
            <comment>Get or Sets the visibility of the text - by default is hide</comment>
        </property>
        <property>
            <name>TextGravity</name>
            <returntype>int</returntype>
            <parameter>
                <name>gravity</name>
                <type>int</type>
            </parameter>
            <comment>Get or Sets the horizontal alignment of the text that will be used.</comment>
        </property>
        <property>
            <name>ShouldOnlyAnimateFling</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>onlyFling</name>
                <type>boolean</type>
            </parameter>
            <comment>Get or Sets should only animate fling.</comment>
        </property>
        <property>
            <name>ScaleTypeForRounded</name>
            <parameter>
                <name>scaletype</name>
                <type EnumType="true">android.widget.ImageView.ScaleType</type>
            </parameter>
            <comment>Controls how the RoundedBitmap should be resized or moved to match the size of this ImageView.
 
 by default ScaleType.FIT_CENTER</comment>
        </property>
        <property>
            <name>ItemHeight</name>
            <returntype>int</returntype>
            <parameter>
                <name>itemHeight</name>
                <type>int</type>
            </parameter>
            <comment>Get or Sets the the size of the images will be displayed in thumbnail by default size is 480x320</comment>
        </property>
        <property>
            <name>Visible</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>SetImageOnFail</name>
            <parameter>
                <name>ic_error</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Sets own icon on fail</comment>
        </property>
        <property>
            <name>Padding</name>
            <returntype>int[]</returntype>
            <parameter>
                <name>arg0</name>
                <type>int[]</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>FadeInTime</name>
            <parameter>
                <name>durationMillis</name>
                <type>int</type>
            </parameter>
            <comment>Duration of "fade-in" animation (in milliseconds)
 Whether animation should be played if image is loaded from network
 Whether animation should be played if image is loaded from disk cache
 Whether animation should be played if image is loaded from memory cache</comment>
        </property>
        <property>
            <name>TextTypeFace</name>
            <returntype>it.giuseppe.salvi.gridview.library.core.textview.typeface.TypefaceUtils</returntype>
            <parameter>
                <name>family</name>
                <type>android.graphics.Typeface</type>
            </parameter>
            <comment>Get or Sets the typeface and style in which the text should be displayed. 
 Note that not all Typeface families actually have bold and italic variants, 
 so you may need to use TextStyle(style) to get the appearance that you actually want.</comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type Pixel="true">int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Gravity</name>
            <parameter>
                <name>gravity</name>
                <type>int</type>
            </parameter>
            <comment>Specifies the gravity within each cell.</comment>
        </property>
        <property>
            <name>ProgressBarVisible</name>
            <parameter>
                <name>visible</name>
                <type>boolean</type>
            </parameter>
            <comment>Set the enabled state of this view. - by default is trueChange the indeterminate mode for this progress bar.</comment>
        </property>
        <property>
            <name>TextBackGroundAlpha</name>
            <returntype>int</returntype>
            <parameter>
                <name>alpha</name>
                <type>int</type>
            </parameter>
            <comment>Get or Sets alpha property of the view, as a value between 0 (completely transparent) and 255 (completely opaque). 
 
 &lt;b&gt;by default alpha = 0&lt;/b&gt;</comment>
        </property>
        <property>
            <name>TextSize</name>
            <returntype>int</returntype>
            <parameter>
                <name>size</name>
                <type>int</type>
            </parameter>
            <comment>Get or Sets Text Size - by default 14</comment>
        </property>
        <property>
            <name>Enabled</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>CacheOnDisk</name>
            <parameter>
                <name>value</name>
                <type>boolean</type>
            </parameter>
            <comment>Sets whether loaded image will be cached on disk.</comment>
        </property>
        <property>
            <name>SetBorderColor</name>
            <parameter>
                <name>borderColor</name>
                <type>int</type>
            </parameter>
            <comment>Set the border Color - by default is transparent</comment>
        </property>
        <property>
            <name>Friction</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>friction</name>
                <type>boolean</type>
            </parameter>
            <comment>Get or Sets the amount of friction applied to flings.</comment>
        </property>
        <property>
            <name>Length</name>
            <returntype>int</returntype>
            <comment>Returns length</comment>
        </property>
        <property>
            <name>StretchMode</name>
            <returntype>it.giuseppe.salvi.gridview.library.core.enums.StretchModeEnum</returntype>
            <parameter>
                <name>stretchMode</name>
                <type>int</type>
            </parameter>
            <comment>Defines how columns should stretch to fill the available empty space, if any.
 
 Examples:
 
 GridView.StretchMode = GridView.StretchMode.STRETCH_SPACING</comment>
        </property>
        <property>
            <name>TextPosition</name>
            <returntype>it.giuseppe.salvi.gridview.library.core.enums.TextPositionEnum</returntype>
            <parameter>
                <name>gravity</name>
                <type EnumType="true">it.giuseppe.salvi.gridview.library.core.enums.GravityEnum</type>
            </parameter>
            <comment>Get or Sets the position alignment of the text that will be used.
 
 &lt;b&gt;param Text_Top_OutSide&lt;/b&gt;
 &lt;b&gt;param Text_Top_Inside&lt;/b&gt;
 &lt;b&gt;param Text_Center_Inside&lt;/b&gt;
 &lt;b&gt;param Text_Bottom_Inside&lt;/b&gt;</comment>
        </property>
        <property>
            <name>SetBorderWidth</name>
            <parameter>
                <name>borderWidth</name>
                <type>int</type>
            </parameter>
            <comment>Set the border Width - by default is 0</comment>
        </property>
        <property>
            <name>PauseOnScroll</name>
            <parameter>
                <name>pauseOnScroll</name>
                <type>boolean</type>
            </parameter>
            <comment>Whether pause ImageLoader during touch scrolling</comment>
        </property>
        <property>
            <name>ShouldOnlyAnimateNewItems</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>onlyAnimateNew</name>
                <type>boolean</type>
            </parameter>
            <comment>Get or Sets should only animate new item.</comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Get or Sets this view's tag.</comment>
        </property>
        <property>
            <name>SimulateGridWithList</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>simulateGridWithList</name>
                <type>boolean</type>
            </parameter>
            <comment>Get or Sets simulate grid with list.</comment>
        </property>
        <designerProperty>key:Gravity, displayname:Gravity, fieldtype:String, defaultvalue:NO_GRAVITY, list:NO_GRAVITY|TOP|CENTER|BOTTOM, description:Specifies how an object should position its content on both the X and Y axes within its own bounds.</designerProperty>
        <designerProperty>key:StretchMode, displayname:Stretch Mode, fieldtype:String, defaultvalue:STRETCH_COLUMN_WIDTH, list:NO_STRETCH|AUTO_FIT|STRETCH_COLUMN_WIDTH|STRETCH_SPACING|STRETCH_SPACING_UNIFORM, description:Defines how columns should stretch to fill the available empty space if any.</designerProperty>
        <designerProperty>key:NumColumns, displayname:Num Columns, fieldtype:String, defaultvalue:COLUMNS_2, list:AUTO_FIT|COLUMNS_1|COLUMNS_2|COLUMNS_3|COLUMNS_4, description:Defines how many columns to show.</designerProperty>
        <designerProperty>key:ColumnWidth, displayname:Column Width, fieldtype:Int, defaultvalue:100, description:Specifies the fixed width for each column.</designerProperty>
        <designerProperty>key:HorizontalSpacing, displayname:Horizontal Spacing, fieldtype:Int, defaultvalue:5, minrange:0, description:Set the amount of horizontal (x) spacing to place between each item in the grid.</designerProperty>
        <designerProperty>key:VerticalSpacing, displayname:Vertical Spacing, fieldtype:Int, defaultvalue:5, minrange:0, description:Set the amount of vertical (y) spacing to place between each item in the grid.</designerProperty>
        <designerProperty>key:CompressQuality, displayname:Compression Quality, fieldtype:Int, defaultvalue:100, minrange:0, description:Sets the quality of a bitmap that can be compressed. [ 0 = low -&gt; 100 = high ]</designerProperty>
        <designerProperty>key:CompressFormat, displayname:Compression Format, fieldtype:String, defaultvalue:PNG, list:JPG|PNG, description:Sets the known formats a bitmap can be compressed into [ JPG or PNG ]</designerProperty>
        <designerProperty>key:SimulateGridWithList, displayname:Simulate Grid With List, fieldtype:Boolean, defaultvalue:false, description:Simulate grid with list.</designerProperty>
        <designerProperty>key:ProgressBarIndeterminate, displayname:ProgressBar Indeterminate, fieldtype:Boolean, defaultvalue:False, description:Change the indeterminate mode for this progress bar.</designerProperty>
        <designerProperty>key:ProgressBarVisible, displayname:ProgressBar Visible, fieldtype:Boolean, defaultvalue:True, description:Set the enabled state of this view.</designerProperty>
        <designerProperty>key:SmoothScrollbarEnabled, displayname:Smooth Scrollbar, fieldtype:Boolean, defaultvalue:True, description:When smooth scrollbar is enabled the position and size of the scrollbar thumb is computed based on the number of visible pixels in the visible items.</designerProperty>
        <designerProperty>key:Transition, displayname:Transition, fieldtype:String, defaultvalue:STANDARD, list:STANDARD|CARDS|CURL|FADE|FLIP|GROW|HELIX|PUZZLE|REVERSE_FLY|REVERSE_TWIRL|SLIDE_IN|TILT|TWIRL|WAVE|ZIPPER, description:Sets the desired transition effect</designerProperty>
        <designerProperty>key:ShouldOnlyAnimateNewItems, displayname:Should Only Animate New Items, fieldtype:Boolean, defaultvalue:false, description:Should only animate a new item.</designerProperty>
        <designerProperty>key:ShouldOnlyAnimateFling, displayname:Should Only Animate Fling, fieldtype:Boolean, defaultvalue:false, description:Should only animate fling.</designerProperty>
        <designerProperty>key:DrawSelectorOnTop, displayname:Draw Selector On Top, fieldtype:Boolean, defaultvalue:True, description:Controls whether the selection highlight drawable should be drawn on top of the item or behind it.</designerProperty>
        <designerProperty>key:Friction, displayname:Friction, fieldtype:Boolean, defaultvalue:false, description:Sets the friction applied to flings.</designerProperty>
        <designerProperty>key:TextPosition, displayname:Text Position, fieldtype:String, defaultvalue:BOTTOM_INSIDE, list:TOP_OUTSIDE|TOP_INSIDE|CENTER_INSIDE|BOTTOM_INSIDE|BOTTOM_OUTSIDE, description:Sets the position alignment of the TextView that will be used.</designerProperty>
        <designerProperty>key:TextBackGroundColor, displayname:Text BackGround Color, fieldtype:Color, defaultvalue:#66141414, description:The Top margin in pixels of the child.</designerProperty>
        <designerProperty>key:TextColor, displayname:Text Color, fieldtype:Color, defaultvalue:#FFFFFF00, description:The Top margin in pixels of the child.</designerProperty>
        <designerProperty>key:TextSize, displayname:Text Size, fieldtype:Int, defaultvalue:14, minrange:0, description:Set the default text size to the given value interpreted as scaled pixel units.</designerProperty>
        <designerProperty>key:TextLines, displayname:Text Lines, fieldtype:Int, defaultvalue:2, minrange:0, description:Makes the TextView exactly this many lines tall.</designerProperty>
        <designerProperty>key:TextTypeFace, displayname:Text Type Face, fieldtype:String, defaultvalue:DEFAULT, list:DEFAULT|DEFAULT_BOLD|MONOSPACE|SANS_SERIF|SERIF, description:Sets the typeface and style in which the text should be displayed and turns on the fake bold and italic bits in the Paint if the Typeface that you provided does not have all the bits in the style that you specified. </designerProperty>
        <designerProperty>key:TextStyle, displayname:Text Style, fieldtype:String, defaultvalue:NORMAL, list:NORMAL|BOLD|ITALIC|BOLD_ITALIC, description:Sets the typeface and style in which the text should be displayed. </designerProperty>
        <designerProperty>key:TextVisible, displayname:Text Visible, fieldtype:Boolean, defaultvalue:false, description:Sets the visibility of the text.</designerProperty>
        <designerProperty>key:NoEffect, displayname:No Effect, fieldtype:Boolean, defaultvalue:false, description:Show thumbnails with corner radius or oval.</designerProperty>
        <designerProperty>key:RoundedBitmap, displayname:Rounded Bitmap, fieldtype:Boolean, defaultvalue:false, description:Can display bitmap with rounded corners.</designerProperty>
        <designerProperty>key:BorderColor, displayname:Border Colore, fieldtype:Color, defaultvalue:#FFFFFF00, description:Set the Color border</designerProperty>
        <designerProperty>key:CornerRadius, displayname:Corner Radius, fieldtype:Int, defaultvalue:10, minrange:0, description:Sets the size of the corner radius</designerProperty>
        <designerProperty>key:BorderWidth, displayname:Border Width, fieldtype:Int, defaultvalue:2, minrange:0, description:Sets the size of the border.</designerProperty>
        <designerProperty>key:ChoiceMode, displayname:Choice Mode, fieldtype:Boolean, defaultvalue:True, description:Defines the choice behavior for the GridView.</designerProperty>
        <designerProperty>key:CacheInMemory, displayname:Cache In Memory, fieldtype:Boolean, defaultvalue:True, description:Sets whether loaded image will be cached in memory.</designerProperty>
        <designerProperty>key:CacheOnDisk, displayname:Cache On Disk, fieldtype:Boolean, defaultvalue:True, description:Sets whether loaded image will be cached on disk.</designerProperty>
    </class>
    <class>
        <name>it.giuseppe.salvi.gridview.library.core.enums.TextPositionEnum</name>
        <owner>process</owner>
        <field>
            <name>Text_Center_Inside</name>
            <comment>Text Center InSide</comment>
            <returntype EnumType="true">it.giuseppe.salvi.gridview.library.core.enums.GravityEnum</returntype>
        </field>
        <field>
            <name>Text_Bottom_OutSide</name>
            <comment>Text Bottom OutSide</comment>
            <returntype EnumType="true">it.giuseppe.salvi.gridview.library.core.enums.GravityEnum</returntype>
        </field>
        <field>
            <name>Text_Top_OutSide</name>
            <comment>Text Top OutSide</comment>
            <returntype EnumType="true">it.giuseppe.salvi.gridview.library.core.enums.GravityEnum</returntype>
        </field>
        <field>
            <name>Text_Bottom_Inside</name>
            <comment>Text Bottom InSide</comment>
            <returntype EnumType="true">it.giuseppe.salvi.gridview.library.core.enums.GravityEnum</returntype>
        </field>
        <field>
            <name>Text_Top_Inside</name>
            <comment>Text Top InSide</comment>
            <returntype EnumType="true">it.giuseppe.salvi.gridview.library.core.enums.GravityEnum</returntype>
        </field>
    </class>
    <class>
        <name>it.giuseppe.salvi.gridview.library.core.enums.StretchModeEnum</name>
        <owner>process</owner>
        <field>
            <name>STRETCH_SPACING_UNIFORM</name>
            <comment>Stretches the spacing between columns.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>STRETCH_SPACING</name>
            <comment>Stretches columns.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>NO_STRETCH</name>
            <comment>Disables stretching.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>STRETCH_COLUMN_WIDTH</name>
            <comment>Stretches the spacing between columns.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>AUTO_FIT</name>
            <comment>Creates as many columns as can fit on screen.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>it.giuseppe.salvi.gridview.library.core.utility.bitmap.BitmaCompression</name>
        <owner>process</owner>
        <field>
            <name>Compress_Format_PNG</name>
            <comment>Compression Format PNG</comment>
            <returntype EnumType="true">android.graphics.Bitmap.CompressFormat</returntype>
        </field>
        <field>
            <name>Compress_Format_JPG</name>
            <comment>Compression Format JPG</comment>
            <returntype EnumType="true">android.graphics.Bitmap.CompressFormat</returntype>
        </field>
    </class>
    <class>
        <name>it.giuseppe.salvi.gridview.library.core.uil.download.ImageDownloader.Scheme</name>
        <owner>process</owner>
        <method>
            <name>valueOf</name>
            <comment></comment>
            <returntype EnumType="true">it.giuseppe.salvi.gridview.library.core.uil.download.ImageDownloader.Scheme</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>hashCode</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>values</name>
            <comment></comment>
            <returntype EnumType="true">it.giuseppe.salvi.gridview.library.core.uil.download.ImageDownloader.Scheme[]</returntype>
        </method>
        <method>
            <name>equals</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>name</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>toString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>compareTo</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>E</type>
            </parameter>
        </method>
        <method>
            <name>wrap</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>path</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ofUri</name>
            <comment></comment>
            <returntype EnumType="true">it.giuseppe.salvi.gridview.library.core.uil.download.ImageDownloader.Scheme</returntype>
            <parameter>
                <name>uri</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>crop</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>uri</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ordinal</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <property>
            <name>DeclaringClass</name>
            <returntype>java.lang.Class</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>it.giuseppe.salvi.gridview.library.core.exception.Exceptions</name>
        <owner>process</owner>
        <method>
            <name>printStackTrace</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>addSuppressed</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Throwable</type>
            </parameter>
        </method>
        <method>
            <name>initCause</name>
            <comment></comment>
            <returntype>java.lang.Throwable</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Throwable</type>
            </parameter>
        </method>
        <method>
            <name>toString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>fillInStackTrace</name>
            <comment></comment>
            <returntype>java.lang.Throwable</returntype>
        </method>
        <property>
            <name>Message</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>StackTrace</name>
            <returntype>java.lang.StackTraceElement[]</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.StackTraceElement[]</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Suppressed</name>
            <returntype>java.lang.Throwable[]</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Cause</name>
            <returntype>java.lang.Throwable</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LocalizedMessage</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>it.giuseppe.salvi.gridview.library.core.gridview.TransitionEffect</name>
        <owner>process</owner>
        <field>
            <name>REVERSE_FLY</name>
            <comment>REVERSE_FLY Effect = 7</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ZIPPER</name>
            <comment>ZIPPER Effect = 11</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PUZZLE</name>
            <comment>PUZZLE Effect = 16</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TWIRL</name>
            <comment>TWIRL Effect = 13</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>HELIX</name>
            <comment>HELIX Effect = 8</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CARDS</name>
            <comment>CARDS Effect = 2</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLIP</name>
            <comment>FLIP Effect = 5</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>WAVE</name>
            <comment>WAVE Effect = 4</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>GROW</name>
            <comment>GROW Effect = 1</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLY</name>
            <comment>FLY Effect = 6</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FAN</name>
            <comment>FAN Effect = 9</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CURL</name>
            <comment>CURL Effect = 3</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SLIDE_IN</name>
            <comment>SLIDE_IN Effect = 14</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TILT</name>
            <comment>TILT Effect = 10</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>REVERSE_TWIRL</name>
            <comment>REVERSE_TWIRL Effect = 15</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FADE</name>
            <comment>FADE Effect = 12</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>STANDARD</name>
            <comment>Standard Effect = 0</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>it.giuseppe.salvi.gridview.library.core.imageview.scaletype.PhotoScaleTypes</name>
        <owner>process</owner>
        <field>
            <name>Center</name>
            <comment>Center the image in the view, but perform no scaling.</comment>
            <returntype EnumType="true">android.widget.ImageView.ScaleType</returntype>
        </field>
        <field>
            <name>Fit_End</name>
            <comment>Scale the image using END.</comment>
            <returntype EnumType="true">android.widget.ImageView.ScaleType</returntype>
        </field>
        <field>
            <name>Matrix</name>
            <comment>Scale using the image matrix when drawing.</comment>
            <returntype EnumType="true">android.widget.ImageView.ScaleType</returntype>
        </field>
        <field>
            <name>Fit_Center</name>
            <comment>Scale the image using CENTER.</comment>
            <returntype EnumType="true">android.widget.ImageView.ScaleType</returntype>
        </field>
        <field>
            <name>Center_Crop</name>
            <comment>Scale the image uniformly (maintain the image's aspect ratio) so that both dimensions (width and height) of the image
 will be equal to or larger than the corresponding dimension of the view (minus padding).</comment>
            <returntype EnumType="true">android.widget.ImageView.ScaleType</returntype>
        </field>
        <field>
            <name>Fit_Start</name>
            <comment>Scale the image using START.</comment>
            <returntype EnumType="true">android.widget.ImageView.ScaleType</returntype>
        </field>
        <field>
            <name>Center_Inside</name>
            <comment>Scale the image uniformly (maintain the image's aspect ratio) so that both dimensions (width and height) of the image
 will be equal to or less than the corresponding dimension of the view (minus padding).</comment>
            <returntype EnumType="true">android.widget.ImageView.ScaleType</returntype>
        </field>
        <field>
            <name>Fit_XY</name>
            <comment>Scale the image using FILL.</comment>
            <returntype EnumType="true">android.widget.ImageView.ScaleType</returntype>
        </field>
    </class>
    <class>
        <name>it.giuseppe.salvi.gridview.library.core.effects.ReverseFlyEffect</name>
        <owner>process</owner>
        <method>
            <name>setupAnimation</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>item</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>scrollDirection</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>animator</name>
                <type>it.giuseppe.salvi.gridview.library.core.android.nineoldandroid.view.ViewPropertyAnimator</type>
            </parameter>
        </method>
        <method>
            <name>initView</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>item</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>scrollDirection</name>
                <type>int</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>it.giuseppe.salvi.gridview.library.core.uil.assist.FlushedInputStream</name>
        <owner>process</owner>
        <method>
            <name>read</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>markSupported</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>available</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>reset</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>skip</name>
            <comment></comment>
            <returntype>long</returntype>
            <parameter>
                <name>n</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>close</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>mark</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>it.giuseppe.salvi.gridview.library.core.uil.assist.FailReason.FailType</name>
        <owner>process</owner>
        <method>
            <name>valueOf</name>
            <comment></comment>
            <returntype EnumType="true">it.giuseppe.salvi.gridview.library.core.uil.assist.FailReason.FailType</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>hashCode</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>values</name>
            <comment></comment>
            <returntype EnumType="true">it.giuseppe.salvi.gridview.library.core.uil.assist.FailReason.FailType[]</returntype>
        </method>
        <method>
            <name>equals</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>name</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>toString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>compareTo</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>E</type>
            </parameter>
        </method>
        <method>
            <name>ordinal</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <property>
            <name>DeclaringClass</name>
            <returntype>java.lang.Class</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>it.giuseppe.salvi.gridview.library.core.uil.display.RoundedBitmapDisplayer.RoundedDrawable</name>
        <owner>process</owner>
        <method>
            <name>createFromPath</name>
            <comment></comment>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setColorFilter</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type EnumType="true">android.graphics.PorterDuff.Mode</type>
            </parameter>
        </method>
        <method>
            <name>setHotspot</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>resolveOpacity</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>scheduleSelf</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Runnable</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>applyTheme</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.res.Resources.Theme</type>
            </parameter>
        </method>
        <method>
            <name>createFromStream</name>
            <comment></comment>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>createFromXml</name>
            <comment></comment>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.res.Resources</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>org.xmlpull.v1.XmlPullParser</type>
            </parameter>
        </method>
        <method>
            <name>clearColorFilter</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>setHotspotBounds</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg3</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setLevel</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>copyBounds</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>invalidateSelf</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>getOutline</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Outline</type>
            </parameter>
        </method>
        <method>
            <name>setLayoutDirection</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isStateful</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>createFromResourceStream</name>
            <comment></comment>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.res.Resources</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.util.TypedValue</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>arg3</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setVisible</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>mutate</name>
            <comment></comment>
            <returntype>android.graphics.drawable.Drawable</returntype>
        </method>
        <method>
            <name>isAutoMirrored</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>getPadding</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>jumpToCurrentState</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>draw</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>canvas</name>
                <type>android.graphics.Canvas</type>
            </parameter>
        </method>
        <method>
            <name>isVisible</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>setBounds</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg3</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>createFromXmlInner</name>
            <comment></comment>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.res.Resources</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>org.xmlpull.v1.XmlPullParser</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>android.util.AttributeSet</type>
            </parameter>
        </method>
        <method>
            <name>canApplyTheme</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>unscheduleSelf</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Runnable</type>
            </parameter>
        </method>
        <method>
            <name>inflate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.res.Resources</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>org.xmlpull.v1.XmlPullParser</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>android.util.AttributeSet</type>
            </parameter>
        </method>
        <method>
            <name>getHotspotBounds</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>setState</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>int[]</type>
            </parameter>
        </method>
        <method>
            <name>isFilterBitmap</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>onLayoutDirectionChanged</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Dither</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>DirtyBounds</name>
            <returntype>android.graphics.Rect</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ConstantState</name>
            <returntype>android.graphics.drawable.Drawable.ConstantState</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Bounds</name>
            <returntype>android.graphics.Rect</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>IntrinsicWidth</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MinimumWidth</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChangingConfigurations</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>MinimumHeight</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AutoMirrored</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>ColorFilter</name>
            <returntype>android.graphics.ColorFilter</returntype>
            <parameter>
                <name>cf</name>
                <type>android.graphics.ColorFilter</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Callback</name>
            <returntype>android.graphics.drawable.Drawable.Callback</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.drawable.Drawable.Callback</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>TintMode</name>
            <parameter>
                <name>arg0</name>
                <type EnumType="true">android.graphics.PorterDuff.Mode</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>TransparentRegion</name>
            <returntype>android.graphics.Region</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LayoutDirection</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TintList</name>
            <parameter>
                <name>arg0</name>
                <type>android.content.res.ColorStateList</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>State</name>
            <returntype>int[]</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Alpha</name>
            <returntype>int</returntype>
            <parameter>
                <name>alpha</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>IntrinsicHeight</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Level</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Opacity</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Tint</name>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Current</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <comment></comment>
        </property>
        <property>
            <name>FilterBitmap</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>it.giuseppe.salvi.gridview.library.core.uil.display.CircleBitmapDisplayer.CircleDrawable</name>
        <owner>process</owner>
        <method>
            <name>createFromPath</name>
            <comment></comment>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setColorFilter</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type EnumType="true">android.graphics.PorterDuff.Mode</type>
            </parameter>
        </method>
        <method>
            <name>setHotspot</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>resolveOpacity</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>scheduleSelf</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Runnable</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>applyTheme</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.res.Resources.Theme</type>
            </parameter>
        </method>
        <method>
            <name>createFromStream</name>
            <comment></comment>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>createFromXml</name>
            <comment></comment>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.res.Resources</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>org.xmlpull.v1.XmlPullParser</type>
            </parameter>
        </method>
        <method>
            <name>clearColorFilter</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>setHotspotBounds</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg3</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setLevel</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>copyBounds</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>invalidateSelf</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>getOutline</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Outline</type>
            </parameter>
        </method>
        <method>
            <name>setLayoutDirection</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isStateful</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>createFromResourceStream</name>
            <comment></comment>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.res.Resources</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.util.TypedValue</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>java.io.InputStream</type>
            </parameter>
            <parameter>
                <name>arg3</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setVisible</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>mutate</name>
            <comment></comment>
            <returntype>android.graphics.drawable.Drawable</returntype>
        </method>
        <method>
            <name>isAutoMirrored</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>getPadding</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>jumpToCurrentState</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>draw</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>canvas</name>
                <type>android.graphics.Canvas</type>
            </parameter>
        </method>
        <method>
            <name>isVisible</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>setBounds</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg3</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>createFromXmlInner</name>
            <comment></comment>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.res.Resources</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>org.xmlpull.v1.XmlPullParser</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>android.util.AttributeSet</type>
            </parameter>
        </method>
        <method>
            <name>canApplyTheme</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>unscheduleSelf</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Runnable</type>
            </parameter>
        </method>
        <method>
            <name>inflate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.res.Resources</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>org.xmlpull.v1.XmlPullParser</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>android.util.AttributeSet</type>
            </parameter>
        </method>
        <method>
            <name>getHotspotBounds</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>setState</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>int[]</type>
            </parameter>
        </method>
        <method>
            <name>isFilterBitmap</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>onLayoutDirectionChanged</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Dither</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>DirtyBounds</name>
            <returntype>android.graphics.Rect</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ConstantState</name>
            <returntype>android.graphics.drawable.Drawable.ConstantState</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Bounds</name>
            <returntype>android.graphics.Rect</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>IntrinsicWidth</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MinimumWidth</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ChangingConfigurations</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>MinimumHeight</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AutoMirrored</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>ColorFilter</name>
            <returntype>android.graphics.ColorFilter</returntype>
            <parameter>
                <name>cf</name>
                <type>android.graphics.ColorFilter</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Callback</name>
            <returntype>android.graphics.drawable.Drawable.Callback</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.drawable.Drawable.Callback</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>TintMode</name>
            <parameter>
                <name>arg0</name>
                <type EnumType="true">android.graphics.PorterDuff.Mode</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>TransparentRegion</name>
            <returntype>android.graphics.Region</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LayoutDirection</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TintList</name>
            <parameter>
                <name>arg0</name>
                <type>android.content.res.ColorStateList</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>State</name>
            <returntype>int[]</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Alpha</name>
            <returntype>int</returntype>
            <parameter>
                <name>alpha</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>IntrinsicHeight</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Level</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Opacity</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Tint</name>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Current</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <comment></comment>
        </property>
        <property>
            <name>FilterBitmap</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>it.giuseppe.salvi.gridview.library.core.utility.Utils</name>
        <owner>process</owner>
        <method>
            <name>enableStrictMode</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>hasJellyBean</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>hasHoneycomb</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>hasGingerbread</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>hasKiteKat</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>hasFroyo</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>hasJellyBeanMR1</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>hasJellyBeanMR2</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>hasHoneycombMR1</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
    </class>
    <class>
        <name>it.giuseppe.salvi.gridview.library.core.textview.typeface.TypefaceUtils</name>
        <owner>process</owner>
        <method>
            <name>LoadFontFromFile</name>
            <comment>Create a new typeface from the specified font data from sdcard.</comment>
            <returntype>android.graphics.Typeface</returntype>
            <parameter>
                <name>file</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>LoadFontFromAssets</name>
            <comment>Create a new typeface from the specified font data from assets.</comment>
            <returntype>android.graphics.Typeface</returntype>
            <parameter>
                <name>file</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <field>
            <name>Default_Bold</name>
            <comment>The default BOLD typeface object.</comment>
            <returntype>android.graphics.Typeface</returntype>
        </field>
        <field>
            <name>Style_Normal</name>
            <comment>The default NORMAL style int.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Style_Bold</name>
            <comment>The default BOLD style int.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Style_Bold_Italic</name>
            <comment>The default BOLD ITALIC style int.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Sans_Serif</name>
            <comment>The NORMAL style of the default sans serif typeface.</comment>
            <returntype>android.graphics.Typeface</returntype>
        </field>
        <field>
            <name>Style_Italic</name>
            <comment>The default ITALIC style int.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>Monospace</name>
            <comment>The NORMAL style of the default monospace typeface.</comment>
            <returntype>android.graphics.Typeface</returntype>
        </field>
        <field>
            <name>Serif</name>
            <comment>The NORMAL style of the default serif typeface.</comment>
            <returntype>android.graphics.Typeface</returntype>
        </field>
        <field>
            <name>Default</name>
            <comment>The default NORMAL typeface object.</comment>
            <returntype>android.graphics.Typeface</returntype>
        </field>
    </class>
    <class>
        <name>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</name>
        <owner>process</owner>
        <method>
            <name>writeDebugLogs</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
        </method>
        <method>
            <name>discCacheFileCount</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>maxFileCount</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>memoryCacheExtraOptions</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>maxImageWidthForMemoryCache</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>maxImageHeightForMemoryCache</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>threadPriority</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>threadPriority</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>diskCache</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>diskCache</name>
                <type>it.giuseppe.salvi.gridview.library.core.uil.cache.disc.DiskCache</type>
            </parameter>
        </method>
        <method>
            <name>imageDownloader</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>imageDownloader</name>
                <type>it.giuseppe.salvi.gridview.library.core.uil.download.ImageDownloader</type>
            </parameter>
        </method>
        <method>
            <name>diskCacheFileCount</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>maxFileCount</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>tasksProcessingOrder</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>tasksProcessingType</name>
                <type EnumType="true">it.giuseppe.salvi.gridview.library.core.uil.assist.QueueProcessingType</type>
            </parameter>
        </method>
        <method>
            <name>diskCacheExtraOptions</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>maxImageWidthForDiskCache</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>maxImageHeightForDiskCache</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>processorForDiskCache</name>
                <type>it.giuseppe.salvi.gridview.library.core.uil.process.BitmapProcessor</type>
            </parameter>
        </method>
        <method>
            <name>memoryCacheSize</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>memoryCacheSize</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>discCacheFileNameGenerator</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>fileNameGenerator</name>
                <type>it.giuseppe.salvi.gridview.library.core.uil.cache.disc.naming.FileNameGenerator</type>
            </parameter>
        </method>
        <method>
            <name>discCacheExtraOptions</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>maxImageWidthForDiskCache</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>maxImageHeightForDiskCache</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>processorForDiskCache</name>
                <type>it.giuseppe.salvi.gridview.library.core.uil.process.BitmapProcessor</type>
            </parameter>
        </method>
        <method>
            <name>taskExecutor</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>executor</name>
                <type>java.util.concurrent.Executor</type>
            </parameter>
        </method>
        <method>
            <name>diskCacheSize</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>maxCacheSize</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>diskCacheFileNameGenerator</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>fileNameGenerator</name>
                <type>it.giuseppe.salvi.gridview.library.core.uil.cache.disc.naming.FileNameGenerator</type>
            </parameter>
        </method>
        <method>
            <name>taskExecutorForCachedImages</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>executorForCachedImages</name>
                <type>java.util.concurrent.Executor</type>
            </parameter>
        </method>
        <method>
            <name>discCacheSize</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>maxCacheSize</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>denyCacheImageMultipleSizesInMemory</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
        </method>
        <method>
            <name>imageDecoder</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>imageDecoder</name>
                <type>it.giuseppe.salvi.gridview.library.core.uil.decode.ImageDecoder</type>
            </parameter>
        </method>
        <method>
            <name>threadPoolSize</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>threadPoolSize</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>memoryCacheSizePercentage</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>availableMemoryPercent</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>build</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration</returntype>
        </method>
        <method>
            <name>defaultDisplayImageOptions</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>defaultDisplayImageOptions</name>
                <type>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions</type>
            </parameter>
        </method>
        <method>
            <name>memoryCache</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>memoryCache</name>
                <type>it.giuseppe.salvi.gridview.library.core.uil.cache.memory.MemoryCache</type>
            </parameter>
        </method>
        <method>
            <name>discCache</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.ImageLoaderConfiguration.Builder</returntype>
            <parameter>
                <name>diskCache</name>
                <type>it.giuseppe.salvi.gridview.library.core.uil.cache.disc.DiskCache</type>
            </parameter>
        </method>
        <field>
            <name>DEFAULT_THREAD_POOL_SIZE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>DEFAULT_THREAD_PRIORITY</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>DEFAULT_TASK_PROCESSING_TYPE</name>
            <comment></comment>
            <returntype EnumType="true">it.giuseppe.salvi.gridview.library.core.uil.assist.QueueProcessingType</returntype>
        </field>
    </class>
    <class>
        <name>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions.Builder</name>
        <owner>process</owner>
        <method>
            <name>showImageForEmptyUri</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions.Builder</returntype>
            <parameter>
                <name>imageRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>resetViewBeforeLoading</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions.Builder</returntype>
        </method>
        <method>
            <name>handler</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions.Builder</returntype>
            <parameter>
                <name>handler</name>
                <type>android.os.Handler</type>
            </parameter>
        </method>
        <method>
            <name>cacheInMemory</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions.Builder</returntype>
        </method>
        <method>
            <name>considerExifParams</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions.Builder</returntype>
            <parameter>
                <name>considerExifParams</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>showStubImage</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions.Builder</returntype>
            <parameter>
                <name>imageRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>cloneFrom</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions.Builder</returntype>
            <parameter>
                <name>options</name>
                <type>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions</type>
            </parameter>
        </method>
        <method>
            <name>delayBeforeLoading</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions.Builder</returntype>
            <parameter>
                <name>delayInMillis</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>decodingOptions</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions.Builder</returntype>
            <parameter>
                <name>decodingOptions</name>
                <type>android.graphics.BitmapFactory.Options</type>
            </parameter>
        </method>
        <method>
            <name>displayer</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions.Builder</returntype>
            <parameter>
                <name>displayer</name>
                <type>it.giuseppe.salvi.gridview.library.core.uil.display.BitmapDisplayer</type>
            </parameter>
        </method>
        <method>
            <name>preProcessor</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions.Builder</returntype>
            <parameter>
                <name>preProcessor</name>
                <type>it.giuseppe.salvi.gridview.library.core.uil.process.BitmapProcessor</type>
            </parameter>
        </method>
        <method>
            <name>build</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions</returntype>
        </method>
        <method>
            <name>cacheOnDisk</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions.Builder</returntype>
            <parameter>
                <name>cacheOnDisk</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>bitmapConfig</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions.Builder</returntype>
            <parameter>
                <name>bitmapConfig</name>
                <type EnumType="true">android.graphics.Bitmap.Config</type>
            </parameter>
        </method>
        <method>
            <name>showImageOnLoading</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions.Builder</returntype>
            <parameter>
                <name>imageRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>extraForDownloader</name>
            <comment>Sets auxiliary object which will be passed to {@link ImageDownloader#getStream(String, Object)}</comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions.Builder</returntype>
            <parameter>
                <name>extra</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>imageScaleType</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions.Builder</returntype>
            <parameter>
                <name>imageScaleType</name>
                <type EnumType="true">it.giuseppe.salvi.gridview.library.core.uil.assist.ImageScaleType</type>
            </parameter>
        </method>
        <method>
            <name>postProcessor</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions.Builder</returntype>
            <parameter>
                <name>postProcessor</name>
                <type>it.giuseppe.salvi.gridview.library.core.uil.process.BitmapProcessor</type>
            </parameter>
        </method>
        <method>
            <name>showImageOnFail</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions.Builder</returntype>
            <parameter>
                <name>imageRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>cacheOnDisc</name>
            <comment></comment>
            <returntype>it.giuseppe.salvi.gridview.library.core.uil.DisplayImageOptions.Builder</returntype>
        </method>
    </class>
    <version>3.7</version>
    <comment></comment>
    <author>Giuseppe Salvi</author>
</root>
