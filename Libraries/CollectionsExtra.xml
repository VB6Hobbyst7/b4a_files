<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
    <class>
        <name>anywheresoftware.b4a.agraham.linkedlist.LinkedListEx</name>
        <shortname>LinkedList</shortname>
        <comment>The LinkedList object provides uniformly named methods to get, remove and insert an element at the beginning and end of the list.
These operations allow linked lists to be used as a stack, queue, or double-ended queue.
All of the operations perform as would be expected for a doubly-linked list.
Operations that index into the list will traverse the list from the beginning or the end, whichever is closer to the specified index.</comment>
        <objectwrapper>java.util.LinkedList</objectwrapper>
        <owner>process</owner>
        <method>
            <name>Initialize</name>
            <comment>Initializes an empty linked list.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Sort</name>
            <comment>Sorts the list. The items must all be numbers or strings.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Ascending</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>AddFirst</name>
            <comment>Inserts the specified element at the beginning of this list.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>item</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>IndexOf</name>
            <comment>Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.
More formally, returns the lowest index i such that (o==null ? get(i)==null : o.equals(get(i))), or -1 if there is no such index.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>item</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>AddAll</name>
            <comment>Adds all elements in the specified collection to the end of the list.
Note that you can add an array directly.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>list</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>Clear</name>
            <comment>Removes all of the elements from this list.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>SortCaseInsensitive</name>
            <comment>Lexicographically sorts the list, ignoring the characters case. The items must all be numbers or strings.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Ascending</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Replace</name>
            <comment>Replaces the element at the specified position in this list with the specified element.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>index</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>item</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>RemoveFirst</name>
            <comment>Removes and returns the first element from this list.</comment>
            <returntype>java.lang.Object</returntype>
        </method>
        <method>
            <name>AddLast</name>
            <comment>Appends the specified element to the end of this list.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>item</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Reverse</name>
            <comment>Reverses the order of the elements in the specified list.
This method runs in linear time.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>RemoveAt</name>
            <comment>Removes the element at the specified position in this list. Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the list.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>RemoveLast</name>
            <comment>Removes and returns the last element from this list.</comment>
            <returntype>java.lang.Object</returntype>
        </method>
        <method>
            <name>Add</name>
            <comment>Appends the specified element to the end of this list.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>item</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Swap</name>
            <comment>Swaps the elements at the specified positions in the specified list.
If the specified positions are equal, invoking this method leaves the list unchanged.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>index1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>index2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Get</name>
            <comment>Returns the element at the specified position in this list.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Initializes a list with the given values. This method should be used to convert arrays to linked lists.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>listorarray</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>InsertAt</name>
            <comment>Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>index</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>AddAllAt</name>
            <comment>Inserts all the elements in the specified collection into the list starting at the specified index.
Note that you can insert an array directly.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>index</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>list</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <property>
            <name>Last</name>
            <returntype>java.lang.Object</returntype>
            <comment>Retrieves, but does not remove, the last element of this list, or returns null if this list is empty.</comment>
        </property>
        <property>
            <name>First</name>
            <returntype>java.lang.Object</returntype>
            <comment>Retrieves, but does not remove, the first element of this list, or returns null if this list is empty.</comment>
        </property>
        <property>
            <name>Version</name>
            <returntype>double</returntype>
            <comment>Returns the version of the library.</comment>
        </property>
        <property>
            <name>Size</name>
            <returntype>int</returntype>
            <comment>Returns the number of elements in this list.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.agraham.linkedlist.LinkedListEx.ArraysExtra</name>
        <shortname>ArraysExtra</shortname>
        <comment>This ArraysExtra object allows arrays to be partially or fully copied, cloned, partially or fully filled with a given value, sorted and searched.
It can also return, using the ToString method, a comma separated string representation of the contents of an array of Strings or a primitive type.</comment>
        <owner>process</owner>
        <method>
            <name>BinarySearch</name>
            <comment>Searches the specified array for the specified value using the binary search algorithm.
The array must be sorted into ascending order according to the natural ordering of its elements, as by the Sort() method, prior to making this call.
If it is not sorted, the results are undefined.
The array must be a single dimension array of Strings or a primitive type.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>array</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>ArrayCopy</name>
            <comment>Copies all or a section of one array to another existing array of sufficient size to accept the copied items. 
The arrays need to be same type otherwise an ArrayStoreException is thrown.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>src</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>srcOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>dest</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>destOffset</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>count</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SortNumericArray</name>
            <comment>Sorts the specified array of primitive numeric types into ascending numerical order.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>array</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>SortStringArray</name>
            <comment>Sorts the specified array of Strings into ascending order according to the specified comparison.
Note that for use with BinarySearch SORTCASESENSITIVE should be used otherwise the result may not be accurate.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>array</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>comparison</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ToString</name>
            <comment>Returns a string representation of the contents of the specified array.
The string representation consists of a list of the array's elements, enclosed in square brackets ("[]").
Adjacent elements are separated by the characters ", " (a comma followed by a space).</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>array</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Clone</name>
            <comment>Returns a clone, that is a copy, of the specified array.
The array must be a single dimension array of Strings or a primitive type.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>array</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>Fill</name>
            <comment>Fully or partially fills the specified array with the specified value.
The array must be a single dimension array of Strings or a primitive type.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>array</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>len</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>value</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <property>
            <name>Version</name>
            <returntype>double</returntype>
            <comment>Returns the version of the library.</comment>
        </property>
        <field>
            <name>SORTNUMERIC</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SORTCASEINSENSITIVE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SORTCASESENSITIVE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <version>1.0</version>
    <comment>This library provides an implementation of a doubly linked list that can be used as a stack, queue, or double-ended queue.

It also includes an ArraysExtra object that allows arrays to be partially or full copied, cloned, partially or fully filled with a given value, sorted and searched.
ArraysExtra can also return, using the ToString method, a comma separated string representation of the contents of an array of Strings or a primitive type.</comment>
    <author>Andrew Graham</author>
</root>
