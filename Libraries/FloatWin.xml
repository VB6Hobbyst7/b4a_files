<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.02</doclet-version-NOT-library-version>
    <class>
        <name>wei.mark.standout.constants.StandOutFlags</name>
        <comment>Flags to be returned from {@link StandOutWindow#getFlags(int)}.</comment>
        <owner>process</owner>
        <field>
            <name>FLAG_WINDOW_PINCH_RESIZE_ENABLE</name>
            <comment>Setting this flag indicates that the system should resize the window when
 it detects a pinch-to-zoom gesture.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_ADD_FUNCTIONALITY_DROP_DOWN_DISABLE</name>
            <comment>Setting this flag indicates that the system should disable adding the
 drop down menu additional functionality to a custom View
 R.id.window_icon.
 
 &lt;p&gt;
 If {@link #FLAG_DECORATION_SYSTEM} is set, the user will always be able
 to show the drop down menu with the default window icon.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_DECORATION_SYSTEM</name>
            <comment>Setting this flag indicates that the window wants the system provided
 window decorations (titlebar, hide/close buttons, resize handle, etc).</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_WINDOW_FOCUSABLE_DISABLE</name>
            <comment>Setting this flag indicates that the window does not need focus. If this
 flag is set, the system will not take care of setting and unsetting the
 focus of windows based on user touch and key events.
 
 &lt;p&gt;
 You will most likely need focus if your window contains any of the
 following: Button, ListView, EditText.
 
 &lt;p&gt;
 The benefit of disabling focus is that your window will not consume any
 key events. Normally, focused windows will consume the Back and Menu
 keys.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_ADD_FUNCTIONALITY_RESIZE_DISABLE</name>
            <comment>Setting this flag indicates that the system should disable adding the
 resize handle additional functionality to a custom View R.id.corner.
 
 &lt;p&gt;
 If {@link #FLAG_DECORATION_SYSTEM} is set, the user will always be able
 to resize the window with the default corner.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_FIX_COMPATIBILITY_ALL_DISABLE</name>
            <comment>Setting this flag indicates that the system should disable all
 compatibility workarounds. The default behavior is to run
 {@link Window#fixCompatibility(View, int)} on the view returned by the
 implementation.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_DECORATION_RESIZE_DISABLE</name>
            <comment>Setting this flag indicates that the window decorator should NOT provide
 a resize handle.
 
 &lt;p&gt;
 This flag also sets {@link #FLAG_DECORATION_SYSTEM}.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_DECORATION_MOVE_DISABLE</name>
            <comment>Setting this flag indicates that the window decorator should NOT provide
 a resize handle.
 
 &lt;p&gt;
 This flag also sets {@link #FLAG_DECORATION_SYSTEM}.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_DECORATION_MAXIMIZE_DISABLE</name>
            <comment>Setting this flag indicates that the window decorator should NOT provide
 a resize handle.
 
 &lt;p&gt;
 This flag also sets {@link #FLAG_DECORATION_SYSTEM}.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_DECORATION_CLOSE_DISABLE</name>
            <comment>Setting this flag indicates that the window decorator should NOT provide
 a close button.
 
 &lt;p&gt;
 This flag also sets {@link #FLAG_DECORATION_SYSTEM}.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_WINDOW_EDGE_LIMITS_ENABLE</name>
            <comment>Setting this flag indicates that the system should keep the window's
 position within the edges of the screen. If this flag is not set, the
 window will be able to be dragged off of the screen.
 
 &lt;p&gt;
 If this flag is set, the window's {@link Gravity} is recommended to be
 {@link Gravity#TOP} | {@link Gravity#LEFT}. If the gravity is anything
 other than TOP|LEFT, then even though the window will be displayed within
 the edges, it will behave as if the user can drag it off the screen.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_WINDOW_FOCUS_INDICATOR_DISABLE</name>
            <comment>Setting this flag indicates that the system should not change the
 window's visual state when focus is changed. If this flag is set, the
 implementation can choose to change the visual state in
 {@link StandOutWindow#onFocusChange(int, Window, boolean)}.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_WINDOW_ASPECT_RATIO_ENABLE</name>
            <comment>Setting this flag indicates that the system should keep the window's
 aspect ratio constant when resizing.
 
 &lt;p&gt;
 The aspect ratio will only be enforced in
 {@link StandOutWindow#onTouchHandleResize(int, Window, View, MotionEvent)}
 . The aspect ratio will not be enforced if you set the width or height of
 the window's LayoutParams manually.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_BODY_MOVE_ENABLE</name>
            <comment>Setting this flag indicates that the window can be moved by dragging the
 body.
 
 &lt;p&gt;
 Note that if {@link #FLAG_DECORATION_SYSTEM} is set, the window can
 always be moved by dragging the titlebar regardless of this flag.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_WINDOW_BRING_TO_FRONT_ON_TAP</name>
            <comment>Setting this flag indicates that the window should be brought to the
 front upon user tap.
 
 &lt;p&gt;
 Note that if you set this flag, there is a noticeable flashing of the
 window during {@link MotionEvent#ACTION_UP}. This the hack that allows
 the system to bring the window to the front.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_WINDOW_HIDE_ENABLE</name>
            <comment>Setting this flag indicates that windows are able to be hidden, that
 {@link StandOutWindow#getHiddenIcon(int)},
 {@link StandOutWindow#getHiddenTitle(int)}, and
 {@link StandOutWindow#getHiddenMessage(int)} are implemented, and that
 the system window decorator should provide a hide button if
 {@link #FLAG_DECORATION_SYSTEM} is set.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_ADD_FUNCTIONALITY_ALL_DISABLE</name>
            <comment>Setting this flag indicates that the system should disable all additional
 functionality. The default behavior is to run
 {@link Window#addFunctionality(View, int)} on the view returned by the
 implementation.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_WINDOW_BRING_TO_FRONT_ON_TOUCH</name>
            <comment>Setting this flag indicates that the window should be brought to the
 front upon user interaction.
 
 &lt;p&gt;
 Note that if you set this flag, there is a noticeable flashing of the
 window during {@link MotionEvent#ACTION_UP}. This the hack that allows
 the system to bring the window to the front.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>anywheresoftware.b4a.window.FloatWindow</name>
        <shortname>FloatWindow</shortname>
        <owner>process</owner>
        <method>
            <name>CreateWin</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>b4a</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>wei.mark.standout.Utils</name>
        <owner>process</owner>
        <method>
            <name>isSet</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>flags</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>flag</name>
                <type>int</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>wei.mark.standout.WindowCache</name>
        <owner>process</owner>
        <method>
            <name>removeCache</name>
            <comment>Remove the window corresponding to the id from the {@link #sWindows}
 cache.
id: The id representing the window.
cls: The class of the implementation of the window.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>cls</name>
                <type>java.lang.Class</type>
            </parameter>
        </method>
        <method>
            <name>isCached</name>
            <comment>Returns whether the window corresponding to the class and id exists in
 the {@link #sWindows} cache.
id: The id representing the window.
cls: Class corresponding to the window.
Return type: @return:True if the window corresponding to the class and id exists in
         the cache, or false if it does not exist.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>cls</name>
                <type>java.lang.Class</type>
            </parameter>
        </method>
        <method>
            <name>getCacheIds</name>
            <comment>Returns the ids in the {@link #sWindows} cache.
cls: The class of the implementation of the window.
Return type: @return:The ids representing the cached windows.</comment>
            <returntype>java.util.Set</returntype>
            <parameter>
                <name>cls</name>
                <type>java.lang.Class</type>
            </parameter>
        </method>
        <method>
            <name>getCacheSize</name>
            <comment>Returns the size of the {@link #sWindows} cache.
cls: The class of the implementation of the window.
Return type: @return:True if the cache corresponding to this class is empty, false if
         it is not empty.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>cls</name>
                <type>java.lang.Class</type>
            </parameter>
        </method>
        <method>
            <name>putCache</name>
            <comment>Add the window corresponding to the id in the {@link #sWindows} cache.
id: The id representing the window.
cls: The class of the implementation of the window.
window: The window to be put in the cache.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>cls</name>
                <type>java.lang.Class</type>
            </parameter>
            <parameter>
                <name>window</name>
                <type>wei.mark.standout.ui.Window</type>
            </parameter>
        </method>
        <method>
            <name>getCache</name>
            <comment>Returns the window corresponding to the id from the {@link #sWindows}
 cache.
id: The id representing the window.
cls: The class of the implementation of the window.
Return type: @return:The window corresponding to the id if it exists in the cache, or
         null if it does not.</comment>
            <returntype>wei.mark.standout.ui.Window</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>cls</name>
                <type>java.lang.Class</type>
            </parameter>
        </method>
        <method>
            <name>size</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <field>
            <name>sWindows</name>
            <comment></comment>
            <returntype>java.util.Map</returntype>
        </field>
    </class>
    <class>
        <name>wei.mark.standout.StandOutWindow</name>
        <comment>Extend this class to easily create and manage floating StandOut windows.</comment>
        <owner>process</owner>
        <method>
            <name>getDatabasePath</name>
            <comment></comment>
            <returntype>java.io.File</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>enforceCallingPermission</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>onResize</name>
            <comment>Implement this method to be alerted to when the window corresponding to
 the id is resized.
id: The id of the view, provided as a courtesy.
window: The window corresponding to the id, provided as a courtesy.
view: The view where the event originated from.
event: See linked method.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>window</name>
                <type>wei.mark.standout.ui.Window</type>
            </parameter>
            <parameter>
                <name>view</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>event</name>
                <type>android.view.MotionEvent</type>
            </parameter>
        </method>
        <method>
            <name>startService</name>
            <comment></comment>
            <returntype>android.content.ComponentName</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.Intent</type>
            </parameter>
        </method>
        <method>
            <name>getCloseIntent</name>
            <comment>See {@link #close(Context, Class, int)}.
context: A Context of the application package implementing this class.
cls: The Service extending {@link StandOutWindow} that is managing
            the window.
id: The id representing this window. If the id exists, and the
            corresponding window was previously hidden, then that window
            will be restored.
Return type: @return:An {@link Intent} to use with
         {@link Context#startService(Intent)}.</comment>
            <returntype>android.content.Intent</returntype>
            <parameter>
                <name>context</name>
                <type>android.content.Context</type>
            </parameter>
            <parameter>
                <name>cls</name>
                <type>java.lang.Class</type>
            </parameter>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>onBind</name>
            <comment></comment>
            <returntype>android.os.IBinder</returntype>
            <parameter>
                <name>intent</name>
                <type>android.content.Intent</type>
            </parameter>
        </method>
        <method>
            <name>hide</name>
            <comment>Hide the existing window corresponding to the id. To enable the ability
 to restore this window, make sure you implement
 {@link #getHiddenNotification(int)}.
context: A Context of the application package implementing this class.
cls: The Service extending {@link StandOutWindow} that is managing
            the window.
id: The id representing this window. The window must previously be
            shown.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>context</name>
                <type>android.content.Context</type>
            </parameter>
            <parameter>
                <name>cls</name>
                <type>java.lang.Class</type>
            </parameter>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isRestricted</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>databaseList</name>
            <comment></comment>
            <returntype>java.lang.String[]</returntype>
        </method>
        <method>
            <name>deleteDatabase</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>focus</name>
            <comment>Request focus for the window corresponding to this id. A maximum of one
 window can have focus, and that window will receive all key events,
 including Back and Menu.
id: The id of the window.
Return type: @return:True if focus changed successfully, false if it failed.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getTitle</name>
            <comment>Implement this method to set a custom title for the window corresponding
 to the id.
id: The id of the window.
Return type: @return:The title of the window.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>startIntentSender</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.IntentSender</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.content.Intent</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg3</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg4</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>deleteFile</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>enforceCallingOrSelfPermission</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>updateViewLayout</name>
            <comment>Update the window corresponding to this id with the given params.
id: The id of the window.
params: The updated layout params to apply.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>params</name>
                <type>wei.mark.standout.StandOutWindow.StandOutLayoutParams</type>
            </parameter>
        </method>
        <method>
            <name>enforceCallingOrSelfUriPermission</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.net.Uri</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getSharedPreferences</name>
            <comment></comment>
            <returntype>android.content.SharedPreferences</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>checkUriPermission</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.net.Uri</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg3</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>revokeUriPermission</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.net.Uri</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getDir</name>
            <comment></comment>
            <returntype>java.io.File</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>sendStickyOrderedBroadcast</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.Intent</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.content.BroadcastReceiver</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>android.os.Handler</type>
            </parameter>
            <parameter>
                <name>arg3</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg4</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>arg5</name>
                <type>android.os.Bundle</type>
            </parameter>
        </method>
        <method>
            <name>getShowAnimation</name>
            <comment>Return the animation to play when the window corresponding to the id is
 shown.
id: The id of the window.
Return type: @return:The animation to play or null.</comment>
            <returntype>android.view.animation.Animation</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getFileStreamPath</name>
            <comment></comment>
            <returntype>java.io.File</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>sendData</name>
            <comment>This allows windows of different applications to communicate with each
 other.
 
 &lt;p&gt;
 Send {@link Parceleable} data in a {@link Bundle} to a new or existing
 windows. The implementation of the recipient window can handle what to do
 with the data. To receive a result, provide the class and id of the
 sender.
context: A Context of the application package implementing the class of
            the sending window.
toCls: The Service's class extending {@link StandOutWindow} that is
            managing the receiving window.
toId: The id of the receiving window, or DISREGARD_ID.
requestCode: Provide a request code to declare what kind of data is being
            sent.
data: A bundle of parceleable data to be sent to the receiving
            window.
fromCls: Provide the class of the sending window if you want a result.
fromId: Provide the id of the sending window if you want a result.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>context</name>
                <type>android.content.Context</type>
            </parameter>
            <parameter>
                <name>toCls</name>
                <type>java.lang.Class</type>
            </parameter>
            <parameter>
                <name>toId</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>requestCode</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>android.os.Bundle</type>
            </parameter>
            <parameter>
                <name>fromCls</name>
                <type>java.lang.Class</type>
            </parameter>
            <parameter>
                <name>fromId</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>onUnbind</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.Intent</type>
            </parameter>
        </method>
        <method>
            <name>onReceiveData</name>
            <comment>Implement this callback to be alerted when a window corresponding to the
 id has received some data. The sender is described by fromCls and fromId
 if the sender wants a result. To send a result, use
 {@link #sendData(int, Class, int, int, Bundle)}.
id: The id of your receiving window.
requestCode: The sending window provided this request code to declare what
            kind of data is being sent.
data: A bundle of parceleable data that was sent to your receiving
            window.
fromCls: The sending window's class. Provided if the sender wants a
            result.
fromId: The sending window's id. Provided if the sender wants a
            result.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>requestCode</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>android.os.Bundle</type>
            </parameter>
            <parameter>
                <name>fromCls</name>
                <type>java.lang.Class</type>
            </parameter>
            <parameter>
                <name>fromId</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>unregisterReceiver</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.BroadcastReceiver</type>
            </parameter>
        </method>
        <method>
            <name>checkCallingPermission</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>onKeyEvent</name>
            <comment>Implement this callback to be alerted when a window corresponding to the
 id receives a key event. This callback will occur before the window
 handles the event with {@link Window#dispatchKeyEvent(KeyEvent)}.
id: The id of the window, provided as a courtesy.
view: The window about to receive the key event.
event: The key event.
Return type: @return:Return true to cancel the window from handling the key event, or
         false to let the window handle the key event.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>window</name>
                <type>wei.mark.standout.ui.Window</type>
            </parameter>
            <parameter>
                <name>event</name>
                <type>android.view.KeyEvent</type>
            </parameter>
        </method>
        <method>
            <name>onBringToFront</name>
            <comment>Implement this callback to be alerted when a window corresponding to the
 id is about to be bought to the front. This callback will occur before
 the window is brought to the front by the window manager.
id: The id of the window, provided as a courtesy.
view: The window about to be brought to the front.
Return type: @return:Return true to cancel the window from being brought to the front,
         or false to continue.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>window</name>
                <type>wei.mark.standout.ui.Window</type>
            </parameter>
        </method>
        <method>
            <name>sendBroadcast</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.Intent</type>
            </parameter>
        </method>
        <method>
            <name>getIcon</name>
            <comment>Implement this method to set a custom icon for the window corresponding
 to the id.
id: The id of the window.
Return type: @return:The icon of the window.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>peekWallpaper</name>
            <comment></comment>
            <returntype>android.graphics.drawable.Drawable</returntype>
        </method>
        <method>
            <name>onDestroy</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>clearWallpaper</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>startActivities</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.Intent[]</type>
            </parameter>
        </method>
        <method>
            <name>fileList</name>
            <comment></comment>
            <returntype>java.lang.String[]</returntype>
        </method>
        <method>
            <name>stopSelfResult</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>openOrCreateDatabase</name>
            <comment></comment>
            <returntype>android.database.sqlite.SQLiteDatabase</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>android.database.sqlite.SQLiteDatabase.CursorFactory</type>
            </parameter>
        </method>
        <method>
            <name>getHiddenNotificationTitle</name>
            <comment>Return the title for the hidden notification corresponding to the window
 being hidden.
id: The id of the hidden window.
Return type: @return:The title for the hidden notification.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getHiddenNotificationIntent</name>
            <comment>Return the intent for the hidden notification corresponding to the window
 being hidden.
 
 &lt;p&gt;
 The returned intent will be packaged into a {@link PendingIntent} to be
 invoked when the user clicks the notification.
id: The id of the hidden window.
Return type: @return:The intent for the hidden notification.</comment>
            <returntype>android.content.Intent</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getWindow</name>
            <comment>Return the window corresponding to the id, if it exists in cache. The
 window will not be created with
 {@link #createAndAttachView(int, ViewGroup)}. This means the returned
 value will be null if the window is not shown or hidden.
id: The id of the window.
Return type: @return:The window if it is shown/hidden, or null if it is closed.</comment>
            <returntype>wei.mark.standout.ui.Window</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>openFileOutput</name>
            <comment></comment>
            <returntype>java.io.FileOutputStream</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>closeAll</name>
            <comment>Close all existing windows.
context: A Context of the application package implementing this class.
cls: The Service extending {@link StandOutWindow} that is managing
            the window.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>context</name>
                <type>android.content.Context</type>
            </parameter>
            <parameter>
                <name>cls</name>
                <type>java.lang.Class</type>
            </parameter>
        </method>
        <method>
            <name>bringToFront</name>
            <comment>Bring the window corresponding to this id in front of all other windows.
 The window may flicker as it is removed and restored by the system.
id: The id of the window to bring to the front.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>onShow</name>
            <comment>Implement this callback to be alerted when a window corresponding to the
 id is about to be shown. This callback will occur before the view is
 added to the window manager.
id: The id of the view, provided as a courtesy.
view: The view about to be shown.
Return type: @return:Return true to cancel the view from being shown, or false to
         continue.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>window</name>
                <type>wei.mark.standout.ui.Window</type>
            </parameter>
        </method>
        <method>
            <name>onClose</name>
            <comment>Implement this callback to be alerted when a window corresponding to the
 id is about to be closed. This callback will occur before the view is
 removed from the window manager.
id: The id of the view, provided as a courtesy.
view: The view about to be closed.
Return type: @return:Return true to cancel the view from being closed, or false to
         continue.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>window</name>
                <type>wei.mark.standout.ui.Window</type>
            </parameter>
        </method>
        <method>
            <name>startActivity</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.Intent</type>
            </parameter>
        </method>
        <method>
            <name>grantUriPermission</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.net.Uri</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>sendOrderedBroadcast</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.Intent</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>unfocus</name>
            <comment>Remove focus for the window corresponding to this id. Once a window is
 unfocused, it will stop receiving key events.
id: The id of the window.
Return type: @return:True if focus changed successfully, false if it failed.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getHideIntent</name>
            <comment>See {@link #hide(Context, Class, int)}.
context: A Context of the application package implementing this class.
cls: The Service extending {@link StandOutWindow} that is managing
            the window.
id: The id representing this window. If the id exists, and the
            corresponding window was previously hidden, then that window
            will be restored.
Return type: @return:An {@link Intent} to use with
         {@link Context#startService(Intent)}.</comment>
            <returntype>android.content.Intent</returntype>
            <parameter>
                <name>context</name>
                <type>android.content.Context</type>
            </parameter>
            <parameter>
                <name>cls</name>
                <type>java.lang.Class</type>
            </parameter>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>onConfigurationChanged</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.res.Configuration</type>
            </parameter>
        </method>
        <method>
            <name>getDropDownItems</name>
            <comment>Implement this method to populate the drop down menu when the user clicks
 on the icon of the window corresponding to the id. The icon is only shown
 when {@link StandOutFlags#FLAG_DECORATION_SYSTEM} is set.
id: The id of the window.
Return type: @return:The list of items to show in the drop down menu, or null or empty
         to have no dropdown menu.</comment>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getShowIntent</name>
            <comment>See {@link #show(Context, Class, int)}.
context: A Context of the application package implementing this class.
cls: The Service extending {@link StandOutWindow} that will be used
            to create and manage the window.
id: The id representing this window. If the id exists, and the
            corresponding window was previously hidden, then that window
            will be restored.
Return type: @return:An {@link Intent} to use with
         {@link Context#startService(Intent)}.</comment>
            <returntype>android.content.Intent</returntype>
            <parameter>
                <name>context</name>
                <type>android.content.Context</type>
            </parameter>
            <parameter>
                <name>cls</name>
                <type>java.lang.Class</type>
            </parameter>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getPersistentNotificationMessage</name>
            <comment>Return the message for the persistent notification. This is called every
 time {@link #show(int)} is called.
id: The id of the window shown.
Return type: @return:The message for the persistent notification.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>bindService</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.Intent</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.content.ServiceConnection</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getPersistentNotificationIntent</name>
            <comment>Return the intent for the persistent notification. This is called every
 time {@link #show(int)} is called.
 
 &lt;p&gt;
 The returned intent will be packaged into a {@link PendingIntent} to be
 invoked when the user clicks the notification.
id: The id of the window shown.
Return type: @return:The intent for the persistent notification.</comment>
            <returntype>android.content.Intent</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>show</name>
            <comment>Show a new window corresponding to the id, or restore a previously hidden
 window.
context: A Context of the application package implementing this class.
cls: The Service extending {@link StandOutWindow} that will be used
            to create and manage the window.
id: The id representing this window. If the id exists, and the
            corresponding window was previously hidden, then that window
            will be restored.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>context</name>
                <type>android.content.Context</type>
            </parameter>
            <parameter>
                <name>cls</name>
                <type>java.lang.Class</type>
            </parameter>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>createPackageContext</name>
            <comment></comment>
            <returntype>android.content.Context</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>checkCallingOrSelfUriPermission</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.net.Uri</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>close</name>
            <comment>Close an existing window with an existing id.
context: A Context of the application package implementing this class.
cls: The Service extending {@link StandOutWindow} that is managing
            the window.
id: The id representing this window. The window must previously be
            shown.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>context</name>
                <type>android.content.Context</type>
            </parameter>
            <parameter>
                <name>cls</name>
                <type>java.lang.Class</type>
            </parameter>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>onLowMemory</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>stopSelf</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>createAndAttachView</name>
            <comment>Create a new {@link View} corresponding to the id, and add it as a child
 to the frame. The view will become the contents of this StandOut window.
 The view MUST be newly created, and you MUST attach it to the frame.
 
 &lt;p&gt;
 If you are inflating your view from XML, make sure you use
 {@link LayoutInflater#inflate(int, ViewGroup, boolean)} to attach your
 view to frame. Set the ViewGroup to be frame, and the boolean to true.
 
 &lt;p&gt;
 If you are creating your view programmatically, make sure you use
 {@link FrameLayout#addView(View)} to add your view to the frame.
id: The id representing the window.
frame: The {@link FrameLayout} to attach your view as a child to.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>frame</name>
                <type>android.widget.FrameLayout</type>
            </parameter>
        </method>
        <method>
            <name>onStart</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.Intent</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getSystemService</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>onMove</name>
            <comment>Implement this method to be alerted to when the window corresponding to
 the id is moved.
id: The id of the view, provided as a courtesy.
window: The window corresponding to the id, provided as a courtesy.
view: The view where the event originated from.
event: See linked method.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>window</name>
                <type>wei.mark.standout.ui.Window</type>
            </parameter>
            <parameter>
                <name>view</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>event</name>
                <type>android.view.MotionEvent</type>
            </parameter>
        </method>
        <method>
            <name>startInstrumentation</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.ComponentName</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>android.os.Bundle</type>
            </parameter>
        </method>
        <method>
            <name>stopForeground</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>sendStickyBroadcast</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.Intent</type>
            </parameter>
        </method>
        <method>
            <name>getFlags</name>
            <comment>Implement this method to change modify the behavior and appearance of the
 window corresponding to the id.
 
 &lt;p&gt;
 You may use any of the flags defined in {@link StandOutFlags}. This
 method will be called many times, so keep it fast.
 
 &lt;p&gt;
 Use bitwise OR (|) to set flags, and bitwise XOR (^) to unset flags. To
 test if a flag is set, use {@link Utils#isSet(int, int)}.
id: The id of the window.
Return type: @return:A combination of flags.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isExistingId</name>
            <comment>Return whether the window corresponding to the id exists. This is useful
 for testing if the id is being restored (return true) or shown for the
 first time (return false).
id: The id of the window.
Return type: @return:True if the window corresponding to the id is either shown or
         hidden, or false if it has never been shown or was previously
         closed.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>enforcePermission</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg3</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setTitle</name>
            <comment>Change the title of the window, if such a title exists. A title exists if
 {@link StandOutFlags#FLAG_DECORATION_SYSTEM} is set, or if your own view
 contains a TextView with id R.id.title.
id: The id of the window.
text: The new title.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>registerReceiver</name>
            <comment></comment>
            <returntype>android.content.Intent</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.BroadcastReceiver</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.content.IntentFilter</type>
            </parameter>
        </method>
        <method>
            <name>checkPermission</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getPersistentNotification</name>
            <comment>Return a persistent {@link Notification} for the corresponding id. You
 must return a notification for AT LEAST the first id to be requested.
 Once the persistent notification is shown, further calls to
 {@link #getPersistentNotification(int)} may return null. This way Android
 can start the StandOut window service in the foreground and will not kill
 the service on low memory.
 
 &lt;p&gt;
 As a courtesy, the system will request a notification for every new id
 shown. Your implementation is encouraged to include the
 {@link PendingIntent#FLAG_UPDATE_CURRENT} flag in the notification so
 that there is only one system-wide persistent notification.
 
 &lt;p&gt;
 See the StandOutExample project for an implementation of
 {@link #getPersistentNotification(int)} that keeps one system-wide
 persistent notification that creates a new window on every click.
id: The id of the window.
Return type: @return:The {@link Notification} corresponding to the id, or null if
         you've previously returned a notification.</comment>
            <returntype>android.app.Notification</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getSendDataIntent</name>
            <comment>See {@link #sendData(Context, Class, int, int, Bundle, Class, int)}.
context: A Context of the application package implementing the class of
            the sending window.
toCls: The Service's class extending {@link StandOutWindow} that is
            managing the receiving window.
toId: The id of the receiving window.
requestCode: Provide a request code to declare what kind of data is being
            sent.
data: A bundle of parceleable data to be sent to the receiving
            window.
fromCls: If the sending window wants a result, provide the class of the
            sending window.
fromId: If the sending window wants a result, provide the id of the
            sending window.
Return type: @return:An {@link Intnet} to use with
         {@link Context#startService(Intent)}.</comment>
            <returntype>android.content.Intent</returntype>
            <parameter>
                <name>context</name>
                <type>android.content.Context</type>
            </parameter>
            <parameter>
                <name>toCls</name>
                <type>java.lang.Class</type>
            </parameter>
            <parameter>
                <name>toId</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>requestCode</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>data</name>
                <type>android.os.Bundle</type>
            </parameter>
            <parameter>
                <name>fromCls</name>
                <type>java.lang.Class</type>
            </parameter>
            <parameter>
                <name>fromId</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>unbindService</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.ServiceConnection</type>
            </parameter>
        </method>
        <method>
            <name>setIcon</name>
            <comment>Change the icon of the window, if such a icon exists. A icon exists if
 {@link StandOutFlags#FLAG_DECORATION_SYSTEM} is set, or if your own view
 contains a TextView with id R.id.window_icon.
id: The id of the window.
drawableRes: The new icon.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>drawableRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>onHide</name>
            <comment>Implement this callback to be alerted when a window corresponding to the
 id is about to be hidden. This callback will occur before the view is
 removed from the window manager and {@link #getHiddenNotification(int)}
 is called.
id: The id of the view, provided as a courtesy.
view: The view about to be hidden.
Return type: @return:Return true to cancel the view from being hidden, or false to
         continue.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>window</name>
                <type>wei.mark.standout.ui.Window</type>
            </parameter>
        </method>
        <method>
            <name>getDropDown</name>
            <comment>You probably want to leave this method alone and implement
 {@link #getDropDownItems(int)} instead. Only implement this method if you
 want more control over the drop down menu.
 
 &lt;p&gt;
 Implement this method to set a custom drop down menu when the user clicks
 on the icon of the window corresponding to the id. The icon is only shown
 when {@link StandOutFlags#FLAG_DECORATION_SYSTEM} is set.
id: The id of the window.
Return type: @return:The drop down menu to be anchored to the icon, or null to have no
         dropdown menu.</comment>
            <returntype>android.widget.PopupWindow</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>onTouchHandleMove</name>
            <comment>Internal touch handler for handling moving the window.
id: 
window: 
view: 
event: 
Return type: @return:</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>window</name>
                <type>wei.mark.standout.ui.Window</type>
            </parameter>
            <parameter>
                <name>view</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>event</name>
                <type>android.view.MotionEvent</type>
            </parameter>
        </method>
        <method>
            <name>obtainStyledAttributes</name>
            <comment></comment>
            <returntype>android.content.res.TypedArray</returntype>
            <parameter>
                <name>arg0</name>
                <type>int[]</type>
            </parameter>
        </method>
        <method>
            <name>getCloseAllIntent</name>
            <comment>See {@link #closeAll(Context, Class, int)}.
context: A Context of the application package implementing this class.
cls: The Service extending {@link StandOutWindow} that is managing
            the window.
Return type: @return:An {@link Intent} to use with
         {@link Context#startService(Intent)}.</comment>
            <returntype>android.content.Intent</returntype>
            <parameter>
                <name>context</name>
                <type>android.content.Context</type>
            </parameter>
            <parameter>
                <name>cls</name>
                <type>java.lang.Class</type>
            </parameter>
        </method>
        <method>
            <name>onCreate</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>getCloseAnimation</name>
            <comment>Return the animation to play when the window corresponding to the id is
 closed.
id: The id of the window.
Return type: @return:The animation to play or null.</comment>
            <returntype>android.view.animation.Animation</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getExternalFilesDir</name>
            <comment></comment>
            <returntype>java.io.File</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>onFocusChange</name>
            <comment>Implement this callback to be alerted when a window corresponding to the
 id is about to have its focus changed. This callback will occur before
 the window's focus is changed.
id: The id of the window, provided as a courtesy.
view: The window about to be brought to the front.
focus: Whether the window is gaining or losing focus.
Return type: @return:Return true to cancel the window's focus from being changed, or
         false to continue.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>window</name>
                <type>wei.mark.standout.ui.Window</type>
            </parameter>
            <parameter>
                <name>focus</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>onUpdate</name>
            <comment>Implement this callback to be alerted when a window corresponding to the
 id is about to be updated in the layout. This callback will occur before
 the view is updated by the window manager.
id: The id of the window, provided as a courtesy.
view: The window about to be updated.
params: The updated layout params.
Return type: @return:Return true to cancel the window from being updated, or false to
         continue.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>window</name>
                <type>wei.mark.standout.ui.Window</type>
            </parameter>
            <parameter>
                <name>params</name>
                <type>wei.mark.standout.StandOutWindow.StandOutLayoutParams</type>
            </parameter>
        </method>
        <method>
            <name>getHideAnimation</name>
            <comment>Return the animation to play when the window corresponding to the id is
 hidden.
id: The id of the window.
Return type: @return:The animation to play or null.</comment>
            <returntype>android.view.animation.Animation</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>openFileInput</name>
            <comment></comment>
            <returntype>java.io.FileInputStream</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getText</name>
            <comment></comment>
            <returntype>java.lang.CharSequence</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getPersistentNotificationTitle</name>
            <comment>Return the title for the persistent notification. This is called every
 time {@link #show(int)} is called.
id: The id of the window shown.
Return type: @return:The title for the persistent notification.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>enforceUriPermission</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.net.Uri</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg3</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg4</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>enforceCallingUriPermission</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.net.Uri</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>onCloseAll</name>
            <comment>Implement this callback to be alerted when all windows are about to be
 closed. This callback will occur before any views are removed from the
 window manager.
Return type: @return:Return true to cancel the views from being closed, or false to
         continue.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>getHiddenNotificationMessage</name>
            <comment>Return the message for the hidden notification corresponding to the
 window being hidden.
id: The id of the hidden window.
Return type: @return:The message for the hidden notification.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>removeStickyBroadcast</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.Intent</type>
            </parameter>
        </method>
        <method>
            <name>stopService</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.Intent</type>
            </parameter>
        </method>
        <method>
            <name>onRebind</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.Intent</type>
            </parameter>
        </method>
        <method>
            <name>startForeground</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.app.Notification</type>
            </parameter>
        </method>
        <method>
            <name>getParams</name>
            <comment>Return the {@link StandOutWindow#LayoutParams} for the corresponding id.
 The system will set the layout params on the view for this StandOut
 window. The layout params may be reused.
id: The id of the window.
window: The window corresponding to the id. Given as courtesy, so you
            may get the existing layout params.
Return type: @return:The {@link StandOutWindow#LayoutParams} corresponding to the id.
         The layout params will be set on the window. The layout params
         returned will be reused whenever possible, minimizing the number
         of times getParams() will be called.</comment>
            <returntype>wei.mark.standout.StandOutWindow.StandOutLayoutParams</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>window</name>
                <type>wei.mark.standout.ui.Window</type>
            </parameter>
        </method>
        <method>
            <name>onStartCommand</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>intent</name>
                <type>android.content.Intent</type>
            </parameter>
            <parameter>
                <name>flags</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>startId</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>onTouchHandleResize</name>
            <comment>Internal touch handler for handling resizing the window.
id: 
window: 
view: 
event: 
Return type: @return:</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>window</name>
                <type>wei.mark.standout.ui.Window</type>
            </parameter>
            <parameter>
                <name>view</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>event</name>
                <type>android.view.MotionEvent</type>
            </parameter>
        </method>
        <method>
            <name>getHiddenNotification</name>
            <comment>Return a hidden {@link Notification} for the corresponding id. The system
 will request a notification for every id that is hidden.
 
 &lt;p&gt;
 If null is returned, StandOut will assume you do not wish to support
 hiding this window, and will {@link #close(int)} it for you.
 
 &lt;p&gt;
 See the StandOutExample project for an implementation of
 {@link #getHiddenNotification(int)} that for every hidden window keeps a
 notification which restores that window upon user's click.
id: The id of the window.
Return type: @return:The {@link Notification} corresponding to the id or null.</comment>
            <returntype>android.app.Notification</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>checkCallingOrSelfPermission</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>onTouchBody</name>
            <comment>Implement this method to be alerted to touch events in the body of the
 window corresponding to the id.
 
 &lt;p&gt;
 Note that even if you set {@link #FLAG_DECORATION_SYSTEM}, you will not
 receive touch events from the system window decorations.
id: The id of the view, provided as a courtesy.
window: The window corresponding to the id, provided as a courtesy.
view: The view where the event originated from.
event: See linked method.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>id</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>window</name>
                <type>wei.mark.standout.ui.Window</type>
            </parameter>
            <parameter>
                <name>view</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>event</name>
                <type>android.view.MotionEvent</type>
            </parameter>
        </method>
        <method>
            <name>checkCallingUriPermission</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.net.Uri</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Assets</name>
            <returntype>android.content.res.AssetManager</returntype>
            <comment></comment>
        </property>
        <property>
            <name>FocusedWindow</name>
            <returntype>wei.mark.standout.ui.Window</returntype>
            <parameter>
                <name>window</name>
                <type>wei.mark.standout.ui.Window</type>
            </parameter>
            <comment>Return the window that currently has focus.</comment>
        </property>
        <property>
            <name>PackageCodePath</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>CacheDir</name>
            <returntype>java.io.File</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ExternalCacheDir</name>
            <returntype>java.io.File</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ThemeStyle</name>
            <returntype>int</returntype>
            <comment>Implement this method to set a custom theme for all windows in this
 implementation.</comment>
        </property>
        <property>
            <name>FilesDir</name>
            <returntype>java.io.File</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AppName</name>
            <returntype>java.lang.String</returntype>
            <comment>Return the name of every window in this implementation. The name will
 appear in the default implementations of the system window decoration
 title and notification titles.</comment>
        </property>
        <property>
            <name>HiddenIcon</name>
            <returntype>int</returntype>
            <comment>Return the icon resource for every hidden window in this implementation.
 The icon will appear in the default implementations of the hidden
 notifications.</comment>
        </property>
        <property>
            <name>WallpaperDesiredMinimumWidth</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ClassLoader</name>
            <returntype>java.lang.ClassLoader</returntype>
            <comment></comment>
        </property>
        <property>
            <name>PackageManager</name>
            <returntype>android.content.pm.PackageManager</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ContentResolver</name>
            <returntype>android.content.ContentResolver</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ExistingIds</name>
            <returntype>java.util.Set</returntype>
            <comment>Return the ids of all shown or hidden windows.</comment>
        </property>
        <property>
            <name>UniqueId</name>
            <returntype>int</returntype>
            <comment>Courtesy method for your implementation to use if you want to. Gets a
 unique id to assign to a new window.</comment>
        </property>
        <property>
            <name>ObbDir</name>
            <returntype>java.io.File</returntype>
            <comment></comment>
        </property>
        <property>
            <name>WallpaperDesiredMinimumHeight</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Theme</name>
            <returntype>android.content.res.Resources.Theme</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>AppIcon</name>
            <returntype>int</returntype>
            <comment>Return the icon resource for every window in this implementation. The
 icon will appear in the default implementations of the system window
 decoration and notifications.</comment>
        </property>
        <property>
            <name>Wallpaper</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>PackageName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Application</name>
            <returntype>android.app.Application</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ApplicationContext</name>
            <returntype>android.content.Context</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ApplicationInfo</name>
            <returntype>android.content.pm.ApplicationInfo</returntype>
            <comment></comment>
        </property>
        <property>
            <name>BaseContext</name>
            <returntype>android.content.Context</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MainLooper</name>
            <returntype>android.os.Looper</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Resources</name>
            <returntype>android.content.res.Resources</returntype>
            <comment></comment>
        </property>
        <property>
            <name>PackageResourcePath</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <field>
            <name>WINDOW_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>MODE_WORLD_WRITEABLE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MODE_PRIVATE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SENSOR_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>CONTEXT_RESTRICTED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>DISREGARD_ID</name>
            <comment>StandOut window id: You may use this id when you want it to be
 disregarded. The system makes no distinction for this id; it is only used
 to improve code readability.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ACTION_SHOW</name>
            <comment>Intent action: Show a new window corresponding to the id.</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>MODE_MULTI_PROCESS</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>DROPBOX_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>BIND_NOT_FOREGROUND</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ACCESSIBILITY_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>ACTION_HIDE</name>
            <comment>Intent action: Hide an existing window with an existing id. To enable the
 ability to restore this window, make sure you implement
 {@link #getHiddenNotification(int)}.</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>START_NOT_STICKY</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>USB_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>LOCATION_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>BIND_DEBUG_UNBIND</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ACTION_CLOSE</name>
            <comment>Intent action: Close an existing window with an existing id.</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>WIFI_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>START_STICKY</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>BIND_AUTO_CREATE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SEARCH_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>ONGOING_NOTIFICATION_ID</name>
            <comment>Special StandOut window id: You may NOT use this id for any windows.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>NFC_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>DOWNLOAD_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>START_FLAG_REDELIVERY</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>STORAGE_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>MODE_WORLD_READABLE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ALARM_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>VIBRATOR_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>CONTEXT_IGNORE_SECURITY</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>DEVICE_POLICY_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>START_REDELIVER_INTENT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CLIPBOARD_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>NOTIFICATION_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>START_CONTINUATION_MASK</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>LAYOUT_INFLATER_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>ACTIVITY_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>AUDIO_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>TELEPHONY_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>ACCOUNT_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>START_FLAG_RETRY</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>POWER_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>DEFAULT_ID</name>
            <comment>StandOut window id: You may use this sample id for your first window.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>INPUT_METHOD_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>CONTEXT_INCLUDE_CODE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>WALLPAPER_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>START_STICKY_COMPATIBILITY</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CONNECTIVITY_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>MODE_APPEND</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ACTION_RESTORE</name>
            <comment>Intent action: Restore a previously hidden window corresponding to the
 id. The window should be previously hidden with {@link #ACTION_HIDE}.</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>ACTION_CLOSE_ALL</name>
            <comment>Intent action: Close all existing windows.</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>KEYGUARD_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>ACTION_SEND_DATA</name>
            <comment>Intent action: Send data to a new or existing window.</comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>UI_MODE_SERVICE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
    </class>
    <class>
        <name>wei.mark.standout.StandOutWindow.StandOutLayoutParams</name>
        <comment>LayoutParams specific to floating StandOut windows.</comment>
        <owner>process</owner>
        <method>
            <name>writeToParcel</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.os.Parcel</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>mayUseInputMethod</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>copyFrom</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.WindowManager.LayoutParams</type>
            </parameter>
        </method>
        <method>
            <name>toString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>debug</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>describeContents</name>
            <comment></comment>
            <returntype>int</returntype>
        </method>
        <property>
            <name>FocusFlag</name>
            <parameter>
                <name>focused</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Title</name>
            <returntype>java.lang.CharSequence</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <comment></comment>
        </property>
        <field>
            <name>TYPE_APPLICATION_PANEL</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_IGNORE_CHEEK_PRESSES</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>packageName</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>TYPE_SYSTEM_DIALOG</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>LAST_SYSTEM_WINDOW</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SOFT_INPUT_STATE_UNSPECIFIED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SOFT_INPUT_STATE_ALWAYS_HIDDEN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SOFT_INPUT_MASK_STATE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MATCH_PARENT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>DIM_AMOUNT_CHANGED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TYPE_STATUS_BAR</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TYPE_SYSTEM_OVERLAY</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CENTER</name>
            <comment>Special value for x or y position that represents the center of the
 screen.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>horizontalMargin</name>
            <comment></comment>
            <returntype>float</returntype>
        </field>
        <field>
            <name>TYPE_BASE_APPLICATION</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SOFT_INPUT_ADJUST_RESIZE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SOFT_INPUT_ADJUST_UNSPECIFIED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_FORCE_NOT_FULLSCREEN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SOFT_INPUT_IS_FORWARD_NAVIGATION</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_DIM_BEHIND</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>windowAnimations</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>minHeight</name>
            <comment>Optional constraints of the window.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_ALLOW_LOCK_WHILE_SCREEN_ON</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SOFT_INPUT_ADJUST_PAN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TYPE_APPLICATION_STARTING</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FIRST_SUB_WINDOW</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_LAYOUT_NO_LIMITS</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FIRST_SYSTEM_WINDOW</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_BLUR_BEHIND</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>layoutAnimationParameters</name>
            <comment></comment>
            <returntype>android.view.animation.LayoutAnimationController.AnimationParameters</returntype>
        </field>
        <field>
            <name>AUTO_POSITION</name>
            <comment>Special value for x or y position which requests that the system
 determine the position.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SOFT_INPUT_STATE_UNCHANGED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ALPHA_CHANGED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_NOT_FOCUSABLE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_TOUCHABLE_WHEN_WAKING</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SOFT_INPUT_MODE_CHANGED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SOFT_INPUT_STATE_ALWAYS_VISIBLE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TYPE_SYSTEM_ALERT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TYPE_APPLICATION</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>token</name>
            <comment></comment>
            <returntype>android.os.IBinder</returntype>
        </field>
        <field>
            <name>FLAG_SHOW_WHEN_LOCKED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TYPE_STATUS_BAR_PANEL</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SCREEN_ORIENTATION_CHANGED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_ALT_FOCUSABLE_IM</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TYPE_KEYGUARD_DIALOG</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>flags</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>BRIGHTNESS_OVERRIDE_OFF</name>
            <comment></comment>
            <returntype>float</returntype>
        </field>
        <field>
            <name>screenOrientation</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>verticalMargin</name>
            <comment></comment>
            <returntype>float</returntype>
        </field>
        <field>
            <name>TYPE_INPUT_METHOD_DIALOG</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>BOTTOM</name>
            <comment>Special value for y position that represents the bottom of the
 screen.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_NOT_TOUCH_MODAL</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>screenBrightness</name>
            <comment></comment>
            <returntype>float</returntype>
        </field>
        <field>
            <name>SOFT_INPUT_ADJUST_NOTHING</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TITLE_CHANGED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>LAYOUT_CHANGED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>buttonBrightness</name>
            <comment></comment>
            <returntype>float</returntype>
        </field>
        <field>
            <name>MEMORY_TYPE_NORMAL</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>y</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>x</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TYPE_SEARCH_BAR</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>systemUiVisibility</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>minWidth</name>
            <comment>Optional constraints of the window.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>horizontalWeight</name>
            <comment></comment>
            <returntype>float</returntype>
        </field>
        <field>
            <name>FLAG_LAYOUT_IN_SCREEN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SOFT_INPUT_MASK_ADJUST</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>CREATOR</name>
            <comment></comment>
            <returntype>android.os.Parcelable.Creator</returntype>
        </field>
        <field>
            <name>type</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>dimAmount</name>
            <comment></comment>
            <returntype>float</returntype>
        </field>
        <field>
            <name>LAST_SUB_WINDOW</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TYPE_INPUT_METHOD</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MEMORY_TYPE_GPU</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_NOT_TOUCHABLE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>height</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FILL_PARENT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_SPLIT_TOUCH</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FORMAT_CHANGED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TYPE_TOAST</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>maxWidth</name>
            <comment>Optional constraints of the window.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SOFT_INPUT_STATE_VISIBLE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MEMORY_TYPE_PUSH_BUFFERS</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>softInputMode</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_WATCH_OUTSIDE_TOUCH</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAGS_CHANGED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>width</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MEMORY_TYPE_HARDWARE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>memoryType</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_DISMISS_KEYGUARD</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>LEFT</name>
            <comment>Special value for x position that represents the left of the screen.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>format</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TYPE_APPLICATION_MEDIA</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TYPE_APPLICATION_ATTACHED_DIALOG</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TYPE_PHONE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TYPE_CHANGED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_TURN_SCREEN_ON</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_KEEP_SCREEN_ON</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>maxHeight</name>
            <comment>Optional constraints of the window.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_LAYOUT_INSET_DECOR</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TYPE_PRIORITY_PHONE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TYPE_KEYGUARD</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>gravity</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TYPE_WALLPAPER</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>WRAP_CONTENT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ANIMATION_CHANGED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TYPE_APPLICATION_SUB_PANEL</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_SECURE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MEMORY_TYPE_CHANGED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SOFT_INPUT_STATE_HIDDEN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>BRIGHTNESS_OVERRIDE_FULL</name>
            <comment></comment>
            <returntype>float</returntype>
        </field>
        <field>
            <name>FLAG_HARDWARE_ACCELERATED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>RIGHT</name>
            <comment>Special value for x position that represents the right of the screen.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_SCALED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>alpha</name>
            <comment></comment>
            <returntype>float</returntype>
        </field>
        <field>
            <name>SCREEN_BRIGHTNESS_CHANGED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_SHOW_WALLPAPER</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>LAST_APPLICATION_WINDOW</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FLAG_FULLSCREEN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>threshold</name>
            <comment>The distance that distinguishes a tap from a drag.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TOP</name>
            <comment>Special value for y position that represents the top of the screen.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>TYPE_SYSTEM_ERROR</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>verticalWeight</name>
            <comment></comment>
            <returntype>float</returntype>
        </field>
        <field>
            <name>FLAG_DITHER</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FIRST_APPLICATION_WINDOW</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>BRIGHTNESS_OVERRIDE_NONE</name>
            <comment></comment>
            <returntype>float</returntype>
        </field>
    </class>
    <class>
        <name>com.example.standout_b4a.R</name>
        <owner>process</owner>
    </class>
    <class>
        <name>com.example.standout_b4a.R.attr</name>
        <owner>process</owner>
    </class>
    <class>
        <name>com.example.standout_b4a.R.drawable</name>
        <owner>process</owner>
        <field>
            <name>ic_launcher</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ic_action_search</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.example.standout_b4a.R.string</name>
        <owner>process</owner>
        <field>
            <name>app_name</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.example.standout_b4a.R.style</name>
        <owner>process</owner>
        <field>
            <name>AppBaseTheme</name>
            <comment>Base application theme, dependent on API level. This theme is replaced
        by AppBaseTheme from res/values-vXX/styles.xml on newer devices.


            Theme customizations available in newer API levels can go in
            res/values-vXX/styles.xml, while customizations related to
            backward-compatibility can go here.


        Base application theme for API 11+. This theme completely replaces
        AppBaseTheme from res/values/styles.xml on API 11+ devices.

 API 11 theme customizations can go here. 

        Base application theme for API 14+. This theme completely replaces
        AppBaseTheme from BOTH res/values/styles.xml and
        res/values-v11/styles.xml on API 14+ devices.

 API 14 theme customizations can go here.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>AppTheme</name>
            <comment>Application theme. 
 All customizations that are NOT specific to a particular API-level can go here.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.example.standout_b4a.BuildConfig</name>
        <owner>process</owner>
        <field>
            <name>DEBUG</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </field>
    </class>
    <class>
        <name>wei.mark.standout.ui.Window</name>
        <comment>Special view that represents a floating window.</comment>
        <owner>process</owner>
        <method>
            <name>animate</name>
            <comment></comment>
            <returntype>android.view.ViewPropertyAnimator</returntype>
        </method>
        <method>
            <name>startActionMode</name>
            <comment></comment>
            <returntype>android.view.ActionMode</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.ActionMode.Callback</type>
            </parameter>
        </method>
        <method>
            <name>refreshDrawableState</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>onWindowFocusChanged</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>onStartTemporaryDetach</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>performLongClick</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>startLayoutAnimation</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>gatherTransparentRegion</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Region</type>
            </parameter>
        </method>
        <method>
            <name>hasFocus</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>removeViewAt</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>draw</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Canvas</type>
            </parameter>
        </method>
        <method>
            <name>computeScroll</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>dispatchKeyEvent</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>event</name>
                <type>android.view.KeyEvent</type>
            </parameter>
        </method>
        <method>
            <name>dispatchSystemUiVisibilityChanged</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>onKeyDown</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.view.KeyEvent</type>
            </parameter>
        </method>
        <method>
            <name>removeView</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>getFocusedRect</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>getLocationOnScreen</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int[]</type>
            </parameter>
        </method>
        <method>
            <name>updateViewLayout</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.view.ViewGroup.LayoutParams</type>
            </parameter>
        </method>
        <method>
            <name>getDrawingRect</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>removeOnLayoutChangeListener</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View.OnLayoutChangeListener</type>
            </parameter>
        </method>
        <method>
            <name>buildLayer</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>requestFocus</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>jumpDrawablesToCurrentState</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>isFocusable</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>requestChildRectangleOnScreen</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>isHorizontalScrollBarEnabled</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>postDelayed</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Runnable</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>getDefaultSize</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>onDragEvent</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.DragEvent</type>
            </parameter>
        </method>
        <method>
            <name>dispatchKeyShortcutEvent</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.KeyEvent</type>
            </parameter>
        </method>
        <method>
            <name>onFilterTouchEventForSecurity</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.MotionEvent</type>
            </parameter>
        </method>
        <method>
            <name>dispatchSetActivated</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>getChildMeasureSpec</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>dispatchConfigurationChanged</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.res.Configuration</type>
            </parameter>
        </method>
        <method>
            <name>isFocused</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>dispatchUnhandledMove</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>findViewById</name>
            <comment></comment>
            <returntype>android.view.View</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>dispatchDragEvent</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.DragEvent</type>
            </parameter>
        </method>
        <method>
            <name>dispatchKeyEventPreIme</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.KeyEvent</type>
            </parameter>
        </method>
        <method>
            <name>focusableViewAvailable</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>getHitRect</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>onKeyMultiple</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>android.view.KeyEvent</type>
            </parameter>
        </method>
        <method>
            <name>isDuplicateParentStateEnabled</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>onCreateInputConnection</name>
            <comment></comment>
            <returntype>android.view.inputmethod.InputConnection</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.inputmethod.EditorInfo</type>
            </parameter>
        </method>
        <method>
            <name>resolveSizeAndState</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>requestChildFocus</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>onInterceptTouchEvent</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>event</name>
                <type>android.view.MotionEvent</type>
            </parameter>
        </method>
        <method>
            <name>onKeyLongPress</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.view.KeyEvent</type>
            </parameter>
        </method>
        <method>
            <name>findViewWithTag</name>
            <comment></comment>
            <returntype>android.view.View</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>willNotDraw</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>generateLayoutParams</name>
            <comment></comment>
            <returntype>android.widget.FrameLayout.LayoutParams</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.util.AttributeSet</type>
            </parameter>
        </method>
        <method>
            <name>invalidateChild</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>isFocusableInTouchMode</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>combineMeasuredStates</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isShown</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>post</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Runnable</type>
            </parameter>
        </method>
        <method>
            <name>clearFocus</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>addTouchables</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.util.ArrayList</type>
            </parameter>
        </method>
        <method>
            <name>removeViews</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>checkInputConnectionProxy</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>isInEditMode</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>isOpaque</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>restoreHierarchyState</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.util.SparseArray</type>
            </parameter>
        </method>
        <method>
            <name>invalidate</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>isSaveFromParentEnabled</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>endViewTransition</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>indexOfChild</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>focusSearch</name>
            <comment></comment>
            <returntype>android.view.View</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>inflate</name>
            <comment></comment>
            <returntype>android.view.View</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.Context</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>android.view.ViewGroup</type>
            </parameter>
        </method>
        <method>
            <name>forceLayout</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>bringToFront</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>startDrag</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.content.ClipData</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.view.View.DragShadowBuilder</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>arg3</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getLocalVisibleRect</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>clearAnimation</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>playSoundEffect</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isDrawingCacheEnabled</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>onKeyPreIme</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.view.KeyEvent</type>
            </parameter>
        </method>
        <method>
            <name>addStatesFromChildren</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>childDrawableStateChanged</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>willNotCacheDrawing</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>requestDisallowInterceptTouchEvent</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>isMotionEventSplittingEnabled</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>removeViewInLayout</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>resolveSize</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>dispatchSetSelected</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>isPressed</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>createContextMenu</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.ContextMenu</type>
            </parameter>
        </method>
        <method>
            <name>isLayoutRequested</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>getFocusables</name>
            <comment></comment>
            <returntype>java.util.ArrayList</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setTag</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>isClickable</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>dispatchGenericMotionEvent</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.MotionEvent</type>
            </parameter>
        </method>
        <method>
            <name>addView</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>startAnimation</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.animation.Animation</type>
            </parameter>
        </method>
        <method>
            <name>offsetDescendantRectToMyCoords</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>onFocus</name>
            <comment>Request or remove the focus from this window.
focus: Whether we want to gain or lose focus.
Return type: @return:True if focus changed successfully, false if it failed.</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>focus</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>getChildAt</name>
            <comment></comment>
            <returntype>android.view.View</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>offsetTopAndBottom</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>clearDisappearingChildren</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>addFocusables</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.util.ArrayList</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>removeAllViews</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>isAnimationCacheEnabled</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>onKeyUp</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.view.KeyEvent</type>
            </parameter>
        </method>
        <method>
            <name>dispatchPopulateAccessibilityEvent</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.accessibility.AccessibilityEvent</type>
            </parameter>
        </method>
        <method>
            <name>isSoundEffectsEnabled</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>isVerticalScrollBarEnabled</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>bringChildToFront</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>isLongClickable</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>removeOnAttachStateChangeListener</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View.OnAttachStateChangeListener</type>
            </parameter>
        </method>
        <method>
            <name>isEnabled</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>onCheckIsTextEditor</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>addOnLayoutChangeListener</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View.OnLayoutChangeListener</type>
            </parameter>
        </method>
        <method>
            <name>getChildVisibleRect</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>android.graphics.Point</type>
            </parameter>
        </method>
        <method>
            <name>startActionModeForChild</name>
            <comment></comment>
            <returntype>android.view.ActionMode</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.view.ActionMode.Callback</type>
            </parameter>
        </method>
        <method>
            <name>sendAccessibilityEvent</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isSelected</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>onGenericMotionEvent</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.MotionEvent</type>
            </parameter>
        </method>
        <method>
            <name>removeViewsInLayout</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>onKeyShortcut</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.view.KeyEvent</type>
            </parameter>
        </method>
        <method>
            <name>dispatchTrackballEvent</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.MotionEvent</type>
            </parameter>
        </method>
        <method>
            <name>cancelLongPress</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>performClick</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>measure</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isDirty</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>addOnAttachStateChangeListener</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View.OnAttachStateChangeListener</type>
            </parameter>
        </method>
        <method>
            <name>getTag</name>
            <comment></comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>performHapticFeedback</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isHardwareAccelerated</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>hasFocusable</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>isSaveEnabled</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>setLayerType</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.graphics.Paint</type>
            </parameter>
        </method>
        <method>
            <name>requestLayout</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>hasWindowFocus</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>dispatchTouchEvent</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.MotionEvent</type>
            </parameter>
        </method>
        <method>
            <name>requestFocusFromTouch</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>dispatchWindowFocusChanged</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>getWindowVisibleDisplayFrame</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>findFocus</name>
            <comment></comment>
            <returntype>android.view.View</returntype>
        </method>
        <method>
            <name>showContextMenuForChild</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>layout</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg3</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>removeAllViewsInLayout</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>dispatchWindowVisibilityChanged</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getGlobalVisibleRect</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Rect</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.graphics.Point</type>
            </parameter>
        </method>
        <method>
            <name>isHapticFeedbackEnabled</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>isAlwaysDrawnWithCacheEnabled</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>getDrawingCache</name>
            <comment></comment>
            <returntype>android.graphics.Bitmap</returntype>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>isScrollbarFadingEnabled</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>destroyDrawingCache</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>scrollBy</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>onTrackballEvent</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.MotionEvent</type>
            </parameter>
        </method>
        <method>
            <name>isInTouchMode</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>showContextMenu</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>offsetLeftAndRight</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>scheduleLayoutAnimation</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>postInvalidate</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>clearChildFocus</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>isVerticalFadingEdgeEnabled</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>edit</name>
            <comment>Convenience method to start editting the size and position of this
 window. Make sure you call {@link Editor#commit()} when you are done to
 update the window.
Return type: @return:The Editor associated with this window.</comment>
            <returntype>wei.mark.standout.ui.Window.Editor</returntype>
        </method>
        <method>
            <name>saveHierarchyState</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.util.SparseArray</type>
            </parameter>
        </method>
        <method>
            <name>unscheduleDrawable</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>java.lang.Runnable</type>
            </parameter>
        </method>
        <method>
            <name>scrollTo</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>postInvalidateDelayed</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>getLocationInWindow</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int[]</type>
            </parameter>
        </method>
        <method>
            <name>offsetRectIntoDescendantCoords</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>requestTransparentRegion</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>recomputeViewAttributes</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>invalidateChildInParent</name>
            <comment></comment>
            <returntype>android.view.ViewParent</returntype>
            <parameter>
                <name>arg0</name>
                <type>int[]</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>sendAccessibilityEventUnchecked</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.accessibility.AccessibilityEvent</type>
            </parameter>
        </method>
        <method>
            <name>isActivated</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>onTouchEvent</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>event</name>
                <type>android.view.MotionEvent</type>
            </parameter>
        </method>
        <method>
            <name>isHorizontalFadingEdgeEnabled</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>dispatchDisplayHint</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setPadding</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>arg3</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>invalidateDrawable</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
        </method>
        <method>
            <name>requestRectangleOnScreen</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.Rect</type>
            </parameter>
        </method>
        <method>
            <name>scheduleDrawable</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <parameter>
                <name>arg1</name>
                <type>java.lang.Runnable</type>
            </parameter>
            <parameter>
                <name>arg2</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>removeCallbacks</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Runnable</type>
            </parameter>
        </method>
        <method>
            <name>buildDrawingCache</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>startViewTransition</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>onFinishTemporaryDetach</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>OnSystemUiVisibilityChangeListener</name>
            <parameter>
                <name>arg0</name>
                <type>android.view.View.OnSystemUiVisibilityChangeListener</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>VerticalScrollBarEnabled</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Matrix</name>
            <returntype>android.graphics.Matrix</returntype>
            <comment></comment>
        </property>
        <property>
            <name>AddStatesFromChildren</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>BackgroundResource</name>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Clickable</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>OnCreateContextMenuListener</name>
            <parameter>
                <name>arg0</name>
                <type>android.view.View.OnCreateContextMenuListener</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>VerticalScrollbarPosition</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>ChildCount</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>KeepScreenOn</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>MeasuredHeight</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>FadingEdgeLength</name>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>PaddingBottom</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ScrollBarStyle</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>SaveFromParentEnabled</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>WindowVisibility</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ScaleX</name>
            <returntype>float</returntype>
            <parameter>
                <name>arg0</name>
                <type>float</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>VerticalScrollbarWidth</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ScaleY</name>
            <returntype>float</returntype>
            <parameter>
                <name>arg0</name>
                <type>float</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Parent</name>
            <returntype>android.view.ViewParent</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Top</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Animation</name>
            <returntype>android.view.animation.Animation</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.animation.Animation</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Selected</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>DrawingTime</name>
            <returntype>long</returntype>
            <comment></comment>
        </property>
        <property>
            <name>PaddingRight</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Left</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>ScrollY</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Bottom</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Focusable</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>OnDragListener</name>
            <parameter>
                <name>arg0</name>
                <type>android.view.View.OnDragListener</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>ScrollX</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DuplicateParentStateEnabled</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>MeasuredState</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Rotation</name>
            <returntype>float</returntype>
            <parameter>
                <name>arg0</name>
                <type>float</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>LongClickable</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>NextFocusUpId</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>AlwaysDrawnWithCacheEnabled</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>KeyDispatcherState</name>
            <returntype>android.view.KeyEvent.DispatcherState</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Alpha</name>
            <returntype>float</returntype>
            <parameter>
                <name>arg0</name>
                <type>float</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>OnKeyListener</name>
            <parameter>
                <name>arg0</name>
                <type>android.view.View.OnKeyListener</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>ScrollContainer</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>FocusableInTouchMode</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>VerticalFadingEdgeEnabled</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Background</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <comment></comment>
        </property>
        <property>
            <name>BackgroundDrawable</name>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>WindowToken</name>
            <returntype>android.os.IBinder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>RotationY</name>
            <returntype>float</returntype>
            <parameter>
                <name>arg0</name>
                <type>float</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>RotationX</name>
            <returntype>float</returntype>
            <parameter>
                <name>arg0</name>
                <type>float</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>PaddingLeft</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>NextFocusRightId</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Touchables</name>
            <returntype>java.util.ArrayList</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ClipChildren</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Y</name>
            <returntype>float</returntype>
            <parameter>
                <name>arg0</name>
                <type>float</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>X</name>
            <returntype>float</returntype>
            <parameter>
                <name>arg0</name>
                <type>float</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Right</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>DescendantFocusability</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>OnLongClickListener</name>
            <parameter>
                <name>arg0</name>
                <type>android.view.View.OnLongClickListener</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>OnFocusChangeListener</name>
            <returntype>android.view.View.OnFocusChangeListener</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.View.OnFocusChangeListener</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>NextFocusDownId</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>LayoutParams</name>
            <returntype>wei.mark.standout.StandOutWindow.StandOutLayoutParams</returntype>
            <parameter>
                <name>params</name>
                <type>android.view.ViewGroup.LayoutParams</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>WillNotCacheDrawing</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>MeasuredWidth</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TranslationX</name>
            <returntype>float</returntype>
            <parameter>
                <name>arg0</name>
                <type>float</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>RootView</name>
            <returntype>android.view.View</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OnClickListener</name>
            <parameter>
                <name>arg0</name>
                <type>android.view.View.OnClickListener</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Baseline</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ConsiderGoneChildrenWhenMeasuring</name>
            <returntype>boolean</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TranslationY</name>
            <returntype>float</returntype>
            <parameter>
                <name>arg0</name>
                <type>float</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>LayerType</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Handler</name>
            <returntype>android.os.Handler</returntype>
            <comment></comment>
        </property>
        <property>
            <name>HapticFeedbackEnabled</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Foreground</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>OnHierarchyChangeListener</name>
            <parameter>
                <name>arg0</name>
                <type>android.view.ViewGroup.OnHierarchyChangeListener</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>NextFocusForwardId</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>SaveEnabled</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>ScrollbarFadingEnabled</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Activated</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>LayoutTransition</name>
            <returntype>android.animation.LayoutTransition</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.animation.LayoutTransition</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>FilterTouchesWhenObscured</name>
            <returntype>boolean</returntype>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>AnimationCacheEnabled</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>HorizontalScrollBarEnabled</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Context</name>
            <returntype>android.content.Context</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Width</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>FocusedChild</name>
            <returntype>android.view.View</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DrawingCache</name>
            <returntype>android.graphics.Bitmap</returntype>
            <comment></comment>
        </property>
        <property>
            <name>WillNotDraw</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>ClipToPadding</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>LayoutAnimationListener</name>
            <returntype>android.view.animation.Animation.AnimationListener</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.animation.Animation.AnimationListener</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Height</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TouchDelegate</name>
            <returntype>android.view.TouchDelegate</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.TouchDelegate</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>PivotX</name>
            <returntype>float</returntype>
            <parameter>
                <name>arg0</name>
                <type>float</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>SoundEffectsEnabled</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>MotionEventSplittingEnabled</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>PivotY</name>
            <returntype>float</returntype>
            <parameter>
                <name>arg0</name>
                <type>float</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>DrawableState</name>
            <returntype>int[]</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ViewTreeObserver</name>
            <returntype>android.view.ViewTreeObserver</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MeasureAllChildren</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>VerticalFadingEdgeLength</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Id</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Visibility</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>ForegroundGravity</name>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>MeasuredHeightAndState</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ApplicationWindowToken</name>
            <returntype>android.os.IBinder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SystemUiVisibility</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Resources</name>
            <returntype>android.content.res.Resources</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LayoutAnimation</name>
            <returntype>android.view.animation.LayoutAnimationController</returntype>
            <parameter>
                <name>arg0</name>
                <type>android.view.animation.LayoutAnimationController</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Enabled</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>HorizontalFadingEdgeLength</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>PaddingTop</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>BackgroundColor</name>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>DrawingCacheBackgroundColor</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>OverScrollMode</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>DrawingCacheEnabled</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Pressed</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>PersistentDrawingCache</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>MinimumWidth</name>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>NextFocusLeftId</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>SolidColor</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>OnTouchListener</name>
            <parameter>
                <name>arg0</name>
                <type>android.view.View.OnTouchListener</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>CameraDistance</name>
            <parameter>
                <name>arg0</name>
                <type>float</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>HorizontalFadingEdgeEnabled</name>
            <parameter>
                <name>arg0</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>OnGenericMotionListener</name>
            <parameter>
                <name>arg0</name>
                <type>android.view.View.OnGenericMotionListener</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>ContentDescription</name>
            <returntype>java.lang.CharSequence</returntype>
            <parameter>
                <name>arg0</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>MeasuredWidthAndState</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MinimumHeight</name>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>DrawingCacheQuality</name>
            <returntype>int</returntype>
            <parameter>
                <name>arg0</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <field>
            <name>PERSISTENT_ALL_CACHES</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>HAPTIC_FEEDBACK_ENABLED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>visibility</name>
            <comment>Whether the window is shown, hidden/closed, or in transition.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SCROLLBARS_INSIDE_INSET</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>OVER_SCROLL_IF_CONTENT_SCROLLS</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PERSISTENT_ANIMATION_CACHE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>originalParams</name>
            <comment>Original params from {@link StandOutWindow#getParams(int, Window)}.</comment>
            <returntype>wei.mark.standout.StandOutWindow.StandOutLayoutParams</returntype>
        </field>
        <field>
            <name>focused</name>
            <comment>Whether the window is focused.</comment>
            <returntype>boolean</returntype>
        </field>
        <field>
            <name>FOCUS_BEFORE_DESCENDANTS</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MEASURED_SIZE_MASK</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FOCUS_RIGHT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>STATUS_BAR_VISIBLE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>cls</name>
            <comment>Class of the window, indicating which application the window belongs to.</comment>
            <returntype>java.lang.Class</returntype>
        </field>
        <field>
            <name>FOCUS_LEFT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>LAYER_TYPE_SOFTWARE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>STATUS_BAR_HIDDEN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MEASURED_HEIGHT_STATE_SHIFT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>OVER_SCROLL_ALWAYS</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PERSISTENT_SCROLLING_CACHE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FOCUS_BLOCK_DESCENDANTS</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>VISIBILITY_TRANSITION</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FOCUSABLES_TOUCH_MODE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SCROLLBAR_POSITION_LEFT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>DRAWING_CACHE_QUALITY_HIGH</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SCROLLBARS_INSIDE_OVERLAY</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PERSISTENT_NO_CACHE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>OVER_SCROLL_NEVER</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>data</name>
            <comment>Data attached to the window.</comment>
            <returntype>android.os.Bundle</returntype>
        </field>
        <field>
            <name>FOCUSABLES_ALL</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FOCUS_UP</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SCROLLBAR_POSITION_DEFAULT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>id</name>
            <comment>Id of the window.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>VISIBLE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>DRAWING_CACHE_QUALITY_LOW</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SCROLLBARS_OUTSIDE_OVERLAY</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FOCUS_FORWARD</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>GONE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>KEEP_SCREEN_ON</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FOCUS_DOWN</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>LAYER_TYPE_HARDWARE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>flags</name>
            <comment>Original flags from {@link StandOutWindow#getFlags(int)}.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SOUND_EFFECTS_ENABLED</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>DRAWING_CACHE_QUALITY_AUTO</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SCROLLBARS_OUTSIDE_INSET</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MEASURED_STATE_TOO_SMALL</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>NO_ID</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>FOCUS_AFTER_DESCENDANTS</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>VISIBILITY_VISIBLE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SCROLLBAR_POSITION_RIGHT</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>INVISIBLE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>VISIBILITY_GONE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>LAYER_TYPE_NONE</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>touchInfo</name>
            <comment>Touch information of the window.</comment>
            <returntype>wei.mark.standout.ui.TouchInfo</returntype>
        </field>
        <field>
            <name>FOCUS_BACKWARD</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>MEASURED_STATE_MASK</name>
            <comment></comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>wei.mark.standout.ui.Window.Editor</name>
        <comment>Convenient way to resize or reposition a Window. The Editor allows you to
 easily resize and reposition the window around anchor points.</comment>
        <owner>process</owner>
        <method>
            <name>setSize</name>
            <comment>Set the size of this window as percentages of max screen size. The
 window will expand and shrink around the top-left corner, unless
 you've set a different anchor point with
 {@link #setAnchorPoint(float, float)}.
 
 Changes will not applied until you {@link #commit()}.
percentWidth: 
percentHeight: 
Return type: @return:The same Editor, useful for method chaining.</comment>
            <returntype>wei.mark.standout.ui.Window.Editor</returntype>
            <parameter>
                <name>percentWidth</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>percentHeight</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>commit</name>
            <comment>Commit the changes to this window. Updates the layout. This Editor
 cannot be used after you commit.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>setPosition</name>
            <comment>Set the position of this window as percentages of max screen size.
 The window's top-left corner will be positioned at the given x and y,
 unless you've set a different anchor point with
 {@link #setAnchorPoint(float, float)}.
 
 Changes will not applied until you {@link #commit()}.
percentWidth: 
percentHeight: 
Return type: @return:The same Editor, useful for method chaining.</comment>
            <returntype>wei.mark.standout.ui.Window.Editor</returntype>
            <parameter>
                <name>percentWidth</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>percentHeight</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setAnchorPoint</name>
            <comment></comment>
            <returntype>wei.mark.standout.ui.Window.Editor</returntype>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
        </method>
        <field>
            <name>UNCHANGED</name>
            <comment>Special value for width, height, x, or y positions that represents
 that the value should not be changed.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>wei.mark.standout.ui.Window.WindowDataKeys</name>
        <owner>process</owner>
        <field>
            <name>HEIGHT_BEFORE_MAXIMIZE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>Y_BEFORE_MAXIMIZE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>WIDTH_BEFORE_MAXIMIZE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>X_BEFORE_MAXIMIZE</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>IS_MAXIMIZED</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
    </class>
    <class>
        <name>wei.mark.standout.ui.TouchInfo</name>
        <comment>This class holds temporal touch and gesture information. Mainly used to hold
 temporary data for onTouchEvent(MotionEvent).</comment>
        <owner>process</owner>
        <method>
            <name>toString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <field>
            <name>scale</name>
            <comment></comment>
            <returntype>double</returntype>
        </field>
        <field>
            <name>moving</name>
            <comment>Whether we're past the move threshold already.</comment>
            <returntype>boolean</returntype>
        </field>
        <field>
            <name>firstY</name>
            <comment>The state of the window.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>ratio</name>
            <comment></comment>
            <returntype>float</returntype>
        </field>
        <field>
            <name>firstX</name>
            <comment>The state of the window.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>firstHeight</name>
            <comment></comment>
            <returntype>double</returntype>
        </field>
        <field>
            <name>lastX</name>
            <comment>The state of the window.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>lastY</name>
            <comment>The state of the window.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>firstWidth</name>
            <comment></comment>
            <returntype>double</returntype>
        </field>
        <field>
            <name>dist</name>
            <comment></comment>
            <returntype>double</returntype>
        </field>
    </class>
</root>
