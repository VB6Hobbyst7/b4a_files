<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.02</doclet-version-NOT-library-version>
    <class>
        <name>uk.co.martinpearman.b4a.text.method.LinkMovementMethod</name>
        <shortname>LinkMovementMethod</shortname>
        <owner>process</owner>
        <method>
            <name>GetInstance</name>
            <comment>Returns an instance of the LinkMovementMethod which is required by the LabelExtras.SetMovementMethod  method.</comment>
            <returntype>android.text.method.MovementMethod</returntype>
        </method>
    </class>
    <class>
        <name>uk.co.martinpearman.b4a.objects.labelextras.LabelExtras</name>
        <shortname>LabelExtras</shortname>
        <owner>process</owner>
        <method>
            <name>SetMovementMethod</name>
            <comment>Sets the movement method (arrow key handler) to be used for this TextView.
 To enable the LabelExtras click functionality you must set your Label movement method to an instance of LinkMovementMethod.
 The LinkMovementMethod.GetInstance method returns the instance required.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Label1</name>
                <type>android.widget.TextView</type>
            </parameter>
            <parameter>
                <name>MovementMethod1</name>
                <type>android.text.method.MovementMethod</type>
            </parameter>
        </method>
        <method>
            <name>SetDrawableBounds</name>
            <comment>Specifies a bounding rectangle for the drawable.
Required for the Html Object ImageGetter callback.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Drawable1</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <parameter>
                <name>Left</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Top</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Right</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Bottom</name>
                <type>int</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>uk.co.martinpearman.b4a.text.style.URLSpan</name>
        <shortname>URLSpan</shortname>
        <objectwrapper>android.text.style.URLSpan</objectwrapper>
        <owner>process</owner>
        <method>
            <name>GetURL</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
    </class>
    <class>
        <name>uk.co.martinpearman.b4a.text.style.UnderlineSpan</name>
        <shortname>UnderlineSpan</shortname>
        <objectwrapper>android.text.style.UnderlineSpan</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
    </class>
    <class>
        <name>uk.co.martinpearman.b4a.text.style.StyleSpan</name>
        <shortname>StyleSpan</shortname>
        <objectwrapper>android.text.style.StyleSpan</objectwrapper>
        <owner>process</owner>
        <method>
            <name>GetStyle</name>
            <comment>Returns the Typeface style of this StyleSpan.
 Typeface.STYLE_BOLD, Typeface.STYLE_ITALIC etc.</comment>
            <returntype>int</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
    </class>
    <class>
        <name>uk.co.martinpearman.b4a.text.style.ClickableSpan</name>
        <shortname>ClickableSpan</shortname>
        <objectwrapper>uk.co.martinpearman.b4a.text.style.ClickableSpanImpl</objectwrapper>
        <owner>process</owner>
        <event>Click(SelectionStart As Int, SelectionEnd As Int)</event>
        <event>Click2(SelectionStart As Int, SelectionEnd As Int, Tag As Object)</event>
        <method>
            <name>Initialize</name>
            <comment>Initialize the ClickableSpan.
 Color defines the color of the clickable text, pass -1 if you do not wish to change that text color.
 UnderlineText defines whether the clickable text shall be underlined.
 The Click(SelectionStart As Int, SelectionEnd As Int) event will be raised when this ClickableSpan is clicked.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mBA</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>UnderlineText</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Initialize2</name>
            <comment>Initialize the ClickableSpan.
 Color defines the color of the clickable text, pass -1 if you do not wish to change that text color.
 UnderlineText defines whether the clickable text shall be underlined.
 Pass any Object as the Tag and this Object will be returned to the Click2 event.
 The Click2(SelectionStart As Int, SelectionEnd As Int, Tag As Object) event will be raised when this ClickableSpan is clicked.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>mBA</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Color</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>UnderlineText</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>Tag</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
    </class>
    <class>
        <name>uk.co.martinpearman.b4a.text.Spanned</name>
        <shortname>Spanned</shortname>
        <owner>process</owner>
        <field>
            <name>SPAN_INCLUSIVE_INCLUSIVE</name>
            <comment>Constant which can be passed as the SpannableStringBuilder.SetSpan method Flags parameter.
 Spans of type SPAN_INCLUSIVE_INCLUSIVE expand to include text inserted at either their starting or ending point.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SPAN_INCLUSIVE_EXCLUSIVE</name>
            <comment>Constant which can be passed as the SpannableStringBuilder.SetSpan method Flags parameter.
 Non-0-length spans of type SPAN_INCLUSIVE_EXCLUSIVE expand to include text inserted at their starting point but not at their ending point.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SPAN_EXCLUSIVE_EXCLUSIVE</name>
            <comment>Constant which can be passed as the SpannableStringBuilder.SetSpan method Flags parameter.
 Spans of type SPAN_EXCLUSIVE_EXCLUSIVE do not expand to include text inserted at either their starting or ending point.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>SPAN_EXCLUSIVE_INCLUSIVE</name>
            <comment>Constant which can be passed as the SpannableStringBuilder.SetSpan method Flags parameter.
 Non-0-length spans of type SPAN_EXCLUSIVE_INCLUSIVE expand to include text inserted at their ending point but not at their starting point.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>uk.co.martinpearman.b4a.text.SpannableStringBuilder</name>
        <shortname>SpannableStringBuilder</shortname>
        <objectwrapper>android.text.SpannableStringBuilder</objectwrapper>
        <owner>process</owner>
        <method>
            <name>Clear</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>GetSpanFlags</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>Span1</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>NextURLSpanTransition</name>
            <comment>Return the next offset after Start but less than or equal to Limit where a URLSpan begins or ends.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>SetSpan</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>Span1</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>End</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Flags</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>NextStyleSpanTransition</name>
            <comment>Return the next offset after Start but less than or equal to Limit where a StyleSpan begins or ends.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Delete</name>
            <comment></comment>
            <returntype>uk.co.martinpearman.b4a.text.SpannableStringBuilder</returntype>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>End</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>ClearSpans</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initialize the SpannableStringBuilder with a CharSequence.
 A CharSequence can be obtained using the Html.FromHtml method, a String can also be passed as a CharacterSequence.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>CharSequence1</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>Append2</name>
            <comment></comment>
            <returntype>uk.co.martinpearman.b4a.text.SpannableStringBuilder</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>End</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Append3</name>
            <comment></comment>
            <returntype>uk.co.martinpearman.b4a.text.SpannableStringBuilder</returntype>
            <parameter>
                <name>Char1</name>
                <type>char</type>
            </parameter>
        </method>
        <method>
            <name>Replace2</name>
            <comment></comment>
            <returntype>uk.co.martinpearman.b4a.text.SpannableStringBuilder</returntype>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>End</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CharSequence1</name>
                <type>java.lang.CharSequence</type>
            </parameter>
            <parameter>
                <name>CharSequence1Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CharSequence1End</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Append</name>
            <comment></comment>
            <returntype>uk.co.martinpearman.b4a.text.SpannableStringBuilder</returntype>
            <parameter>
                <name>Text</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>GetUnderlineSpans</name>
            <comment></comment>
            <returntype>uk.co.martinpearman.b4a.text.style.UnderlineSpan[]</returntype>
            <parameter>
                <name>QueryStart</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>QueryEnd</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>NextUnderlineSpanTransition</name>
            <comment>Return the next offset after Start but less than or equal to Limit where an UnderlineSpan begins or ends.</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Limit</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Replace</name>
            <comment></comment>
            <returntype>uk.co.martinpearman.b4a.text.SpannableStringBuilder</returntype>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>End</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>CharSequence1</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>GetStyleSpans</name>
            <comment></comment>
            <returntype>uk.co.martinpearman.b4a.text.style.StyleSpan[]</returntype>
            <parameter>
                <name>QueryStart</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>QueryEnd</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetSpanEnd</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>Span1</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>CharAt</name>
            <comment></comment>
            <returntype>char</returntype>
            <parameter>
                <name>Where</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetURLSpans</name>
            <comment></comment>
            <returntype>uk.co.martinpearman.b4a.text.style.URLSpan[]</returntype>
            <parameter>
                <name>QueryStart</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>QueryEnd</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetChars</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>Start</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>End</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>Dest</name>
                <type>char[]</type>
            </parameter>
            <parameter>
                <name>DestOffset</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>RemoveSpan</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>Span1</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>GetSpanStart</name>
            <comment></comment>
            <returntype>int</returntype>
            <parameter>
                <name>Span1</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <property>
            <name>Length</name>
            <returntype>int</returntype>
            <comment>Return the number of Chars in the buffer.</comment>
        </property>
    </class>
    <class>
        <name>uk.co.martinpearman.b4a.text.Html</name>
        <shortname>Html</shortname>
        <owner>activity</owner>
        <event>GetDrawable(Source As String) As Object</event>
        <event>HandleTag(Opening As Boolean, Tag As String, SpannableStringBuilder1 As SpannableStringBuilder)</event>
        <method>
            <name>EscapeHtml</name>
            <comment>Returns an HTML escaped representation of the given plain text.
 Only available with Android AP version 16+.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>CharSequence1</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>FromHtml2</name>
            <comment>Returns displayable styled text from the provided HTML string.
 Using optional ImageGetter (to handle HTML IMG tags in the String) and TagHandler (to handle unrecognised tags in the String) callbacks. 
 The drawable returned by the ImageGetter sub has to be sized with setBounds.</comment>
            <returntype>java.lang.CharSequence</returntype>
            <parameter>
                <name>pBA</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>HtmlString</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ImageGetterEventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>TagHandlerEventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ToHtml</name>
            <comment>Returns an HTML representation of the provided Spanned text.</comment>
            <returntype>java.lang.CharSequence</returntype>
            <parameter>
                <name>CharSequence1</name>
                <type>java.lang.CharSequence</type>
            </parameter>
        </method>
        <method>
            <name>FromHtml</name>
            <comment>Returns displayable styled text from the provided HTML string.</comment>
            <returntype>java.lang.CharSequence</returntype>
            <parameter>
                <name>HtmlString</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
    </class>
    <version>1.12</version>
    <comment>LabelExtras enables you to apply click listeners to sub-strings of a Label text.
 A click on a sub-string raises an event and you can take whatever action you desire on such a click.</comment>
    <author>Martin Pearman</author>
</root>
