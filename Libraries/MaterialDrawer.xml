<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.05</doclet-version-NOT-library-version>
    <class>
        <name>de.donmanfred.AccountHeaderBuilderWrapper</name>
        <shortname>AccountHeaderBuilder</shortname>
        <objectwrapper>com.mikepenz.materialdrawer.AccountHeaderBuilder</objectwrapper>
        <owner>activity</owner>
        <method>
            <name>withHeaderBackgroundRes</name>
            <comment>set the background for the header as resource
headerBackgroundRes: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>headerBackgroundRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withCurrentProfileHiddenInList</name>
            <comment>hide the current selected profile from the list
currentProfileHiddenInList: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>currentProfileHiddenInList</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>withSelectionFirstLine</name>
            <comment>set this to define the first line in the selection area if there is no
 profile note this will block any values from profiles!
selectionFirstLine: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>selectionFirstLine</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>withNameTypeface</name>
            <comment>Define the typeface which will be used for name textView in the
 AccountHeader. Overrides typeface supplied to
 {@link AccountHeaderBuilder#withTypeface(android.graphics.Typeface)}
typeface: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
        </method>
        <method>
            <name>withAlternativeProfileHeaderSwitching</name>
            <comment>enable the alternative profile header switching
alternativeProfileHeaderSwitching: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>alternativeProfileHeaderSwitching</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withTranslucentStatusBar</name>
            <comment>Set or disable this if you use a translucent statusbar
translucentStatusBar: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>translucentStatusBar</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withThreeSmallProfileImages</name>
            <comment>enable the extended profile icon view with 3 small header images instead of
 two
threeSmallProfileImages: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>threeSmallProfileImages</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withDrawer</name>
            <comment>
drawer: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>drawer</name>
                <type>com.mikepenz.materialdrawer.Drawer</type>
            </parameter>
        </method>
        <method>
            <name>addProfiles</name>
            <comment>add single ore more DrawerItems to the Drawer
profiles: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>profiles</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IProfile[]</type>
            </parameter>
        </method>
        <method>
            <name>withHeightRes</name>
            <comment>set the height for the header by resource
heightRes: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>heightRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withAccountHeaderRes</name>
            <comment>You can pass a custom layout for the drawer lib. see the drawer.xml in
 layouts of this lib on GitHub
resLayout: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>resLayout</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withProfileImagesClickable</name>
            <comment>enable or disable the profile images to be clickable
profileImagesClickable: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>profileImagesClickable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withTextColorRes</name>
            <comment>set the background for the slider as resource
textColorRes: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>textColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withCloseDrawerOnProfileListClick</name>
            <comment>define if the drawer should close if the user clicks on a profile item if
 the selection list is shown
closeDrawerOnProfileListClick: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>closeDrawerOnProfileListClick</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withDividerBelowHeader</name>
            <comment>Set this to false if you want no divider below the Header
dividerBelowHeader: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>dividerBelowHeader</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withOnlySmallProfileImagesVisible</name>
            <comment>define if only the small profile images should be visible
onlySmallProfileImagesVisible: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>onlySmallProfileImagesVisible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withSavedInstance</name>
            <comment>create the drawer with the values of a savedInstance
savedInstance: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>savedInstance</name>
                <type>android.os.Bundle</type>
            </parameter>
        </method>
        <method>
            <name>withOnProfileClickDrawerCloseDelay</name>
            <comment>Define the delay for the drawer close operation after a click. This is a
 small trick to improve the speed (and remove lag) if you open a new
 activity after a DrawerItem was selected. NOTE: Disable this by passing -1
onProfileClickDrawerCloseDelay: the delay in MS (-1 to disable)
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>onProfileClickDrawerCloseDelay</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withResetDrawerOnProfileListClick</name>
            <comment>define if the drawer selection list should be reseted after the user clicks
 on a profile item if the selection list is shown
resetDrawerOnProfileListClick: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>resetDrawerOnProfileListClick</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withProfiles</name>
            <comment>set the arrayList of DrawerItems for the drawer
profiles: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>profiles</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>withHeaderBackgroundScaleType</name>
            <comment>define the ScaleType for the header background
headerBackgroundScaleType: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>headerBackgroundScaleType</name>
                <type EnumType="true">android.widget.ImageView.ScaleType</type>
            </parameter>
        </method>
        <method>
            <name>withSelectionFirstLineShown</name>
            <comment>set this to false if you want to hide the first line of the selection box
 in the header (first line would be the name)
selectionFirstLineShown: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>selectionFirstLineShown</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withCompactStyle</name>
            <comment>Defines if we should use the compact style for the header.
compactStyle: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>compactStyle</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withEmailTypeface</name>
            <comment>Define the typeface which will be used for email textView in the
 AccountHeader. Overrides typeface supplied to
 {@link AccountHeaderBuilder#withTypeface(android.graphics.Typeface)}
typeface: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
        </method>
        <method>
            <name>withHeightDp</name>
            <comment>set the height for the header
heightDp: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>heightDp</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withPaddingBelowHeader</name>
            <comment>Set this to false if you want no padding below the Header
paddingBelowHeader: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>paddingBelowHeader</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withTextColor</name>
            <comment>set the background for the slider as color
textColor: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>textColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withHeightPx</name>
            <comment>set the height for the header
heightPx: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>heightPx</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withHeaderBackground</name>
            <comment>set the background for the slider as color
headerBackground: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>headerBackground</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
        </method>
        <method>
            <name>withSelectionSecondLine</name>
            <comment>set this to define the second line in the selection area if there is no
 profile note this will block any values from profiles!
selectionSecondLine: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>selectionSecondLine</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>withHeaderBackground2</name>
            <comment>set the background for the header via the ImageHolder class
headerBackground: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>headerBackground</name>
                <type>com.mikepenz.materialdrawer.holder.ImageHolder</type>
            </parameter>
        </method>
        <method>
            <name>withSelectionListEnabledForSingleProfile</name>
            <comment>enable or disable the selection list if there is only a single profile
selectionListEnabledForSingleProfile: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>selectionListEnabledForSingleProfile</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withSelectionSecondLineShown</name>
            <comment>set this to false if you want to hide the second line of the selection box
 in the header (second line would be the e-mail)
selectionSecondLineShown: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>selectionSecondLineShown</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withProfileImagesVisible</name>
            <comment>define if the profile images in the header are shown or not
profileImagesVisible: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>profileImagesVisible</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withActivity</name>
            <comment>Pass the activity you use the drawer in ;)
activity: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>pba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>withSelectionListEnabled</name>
            <comment>enable or disable the selection list
selectionListEnabled: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>selectionListEnabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withAccountHeader</name>
            <comment>You can pass a custom view for the drawer lib. note this requires the same
 structure as the drawer.xml
accountHeader: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>accountHeader</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>withTypeface</name>
            <comment>Define the typeface which will be used for all textViews in the
 AccountHeader
typeface: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
        </method>
        <method>
            <name>build</name>
            <comment>method to build the header view
Return type: @return:</comment>
            <returntype>com.mikepenz.materialdrawer.AccountHeader</returntype>
        </method>
        <method>
            <name>withOnlyMainProfileImageVisible</name>
            <comment>define if only the main (current selected) profile image should be visible
onlyMainProfileImageVisible: 
Return type: @return:</comment>
            <returntype>de.donmanfred.AccountHeaderBuilderWrapper</returntype>
            <parameter>
                <name>onlyMainProfileImageVisible</name>
                <type>boolean</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>de.donmanfred.AccountHeaderWrapper</name>
        <shortname>AccountHeader</shortname>
        <objectwrapper>com.mikepenz.materialdrawer.AccountHeader</objectwrapper>
        <owner>process</owner>
        <method>
            <name>setActiveProfileByIdentifier</name>
            <comment>Selects a profile by its identifier
identifier: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>identifier</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>fireOnProfileChanged</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>addProfile</name>
            <comment>Add a new profile at a specific position to the list
profile: 
position: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>profile</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IProfile</type>
            </parameter>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>updateProfile</name>
            <comment>Helper method to update a profile using it's identifier
newProfile: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>newProfile</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IProfile</type>
            </parameter>
        </method>
        <method>
            <name>clear</name>
            <comment>Clear the header</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>toggleSelectionList</name>
            <comment>Toggle the selection list (show or hide it)
ctx: </comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>header</name>
                <type>com.mikepenz.materialdrawer.AccountHeader</type>
            </parameter>
        </method>
        <method>
            <name>isSelectionListShown</name>
            <comment>returns if the selection list is currently shown
Return type: @return:</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>removeProfile</name>
            <comment>remove a profile from the given position
position: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>removeProfileByIdentifier</name>
            <comment>remove the profile with the given identifier
identifier: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>identifier</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>setActiveProfile</name>
            <comment>Selects the given profile and sets it to the new active profile
profile: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>profile</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IProfile</type>
            </parameter>
            <parameter>
                <name>fireOnProfileChanged</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>addProfiles</name>
            <comment>Add new profiles to the existing list of profiles
profiles: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>profiles</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IProfile[]</type>
            </parameter>
        </method>
        <property>
            <name>SelectionSecondLine</name>
            <parameter>
                <name>selectionSecondLine</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>set this to define the second line in the selection area if there is no
 profile note this will block any values from profiles!</comment>
        </property>
        <property>
            <name>ActiveProfile</name>
            <returntype>com.mikepenz.materialdrawer.model.interfaces.IProfile</returntype>
            <comment>get the current active profile</comment>
        </property>
        <property>
            <name>Background</name>
            <parameter>
                <name>headerBackground</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment>Set the background for the Header</comment>
        </property>
        <property>
            <name>Drawer</name>
            <parameter>
                <name>drawer</name>
                <type>com.mikepenz.materialdrawer.Drawer</type>
            </parameter>
            <comment>Set the drawer for the AccountHeader so we can use it for the select</comment>
        </property>
        <property>
            <name>View</name>
            <returntype>android.view.View</returntype>
            <comment>Get the Root view for the Header</comment>
        </property>
        <property>
            <name>BackgroundRes</name>
            <parameter>
                <name>icon</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Set the background for the Header as resource</comment>
        </property>
        <property>
            <name>SelectionSecondLineShown</name>
            <parameter>
                <name>selectionSecondLineShown</name>
                <type>boolean</type>
            </parameter>
            <comment>set this to false if you want to hide the second line of the selection box
 in the header (second line would be the e-mail)</comment>
        </property>
        <property>
            <name>Profiles</name>
            <returntype>java.util.List</returntype>
            <parameter>
                <name>profiles</name>
                <type>java.util.List</type>
            </parameter>
            <comment>returns the current list of profiles set for this header</comment>
        </property>
        <property>
            <name>SelectionFirstLineShown</name>
            <parameter>
                <name>selectionFirstLineShown</name>
                <type>boolean</type>
            </parameter>
            <comment>set this to false if you want to hide the first line of the selection box
 in the header (first line would be the name)</comment>
        </property>
        <property>
            <name>SelectionFirstLine</name>
            <parameter>
                <name>selectionFirstLine</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>set this to define the first line in the selection area if there is no
 profile note this will block any values from profiles!</comment>
        </property>
        <property>
            <name>HeaderBackground</name>
            <parameter>
                <name>imageHolder</name>
                <type>com.mikepenz.materialdrawer.holder.ImageHolder</type>
            </parameter>
            <comment>set the background for the header via the ImageHolder class</comment>
        </property>
        <property>
            <name>HeaderBackgroundView</name>
            <returntype>android.widget.ImageView</returntype>
            <comment>Returns the header background view so the dev can set everything on it</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.BadgeDrawableBuilderWrapper</name>
        <shortname>BadgeDrawableBuilder</shortname>
        <objectwrapper>com.mikepenz.materialdrawer.model.utils.BadgeDrawableBuilder</objectwrapper>
        <owner>activity</owner>
        <method>
            <name>build</name>
            <comment></comment>
            <returntype>android.graphics.drawable.StateListDrawable</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>style</name>
                <type>com.mikepenz.materialdrawer.holder.BadgeStyle</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>de.donmanfred.BadgeStyleWrapper</name>
        <shortname>BadgeStyle</shortname>
        <objectwrapper>com.mikepenz.materialdrawer.holder.BadgeStyle</objectwrapper>
        <owner>process</owner>
        <method>
            <name>withCornersDp</name>
            <comment></comment>
            <returntype>de.donmanfred.BadgeStyleWrapper</returntype>
            <parameter>
                <name>corners</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withCorners</name>
            <comment></comment>
            <returntype>de.donmanfred.BadgeStyleWrapper</returntype>
            <parameter>
                <name>corners</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>withGradientDrawable</name>
            <comment></comment>
            <returntype>de.donmanfred.BadgeStyleWrapper</returntype>
            <parameter>
                <name>gradientDrawable</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withPaddingTopBottomPx</name>
            <comment></comment>
            <returntype>de.donmanfred.BadgeStyleWrapper</returntype>
            <parameter>
                <name>paddingTopBottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withColorPressedRes</name>
            <comment></comment>
            <returntype>de.donmanfred.BadgeStyleWrapper</returntype>
            <parameter>
                <name>colorPressed</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withTextColor</name>
            <comment></comment>
            <returntype>de.donmanfred.BadgeStyleWrapper</returntype>
            <parameter>
                <name>textColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withPaddingLeftRightPx</name>
            <comment></comment>
            <returntype>de.donmanfred.BadgeStyleWrapper</returntype>
            <parameter>
                <name>paddingLeftRight</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withPaddingLeftRightDp</name>
            <comment></comment>
            <returntype>de.donmanfred.BadgeStyleWrapper</returntype>
            <parameter>
                <name>paddingLeftRight</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withBadgeBackground</name>
            <comment></comment>
            <returntype>de.donmanfred.BadgeStyleWrapper</returntype>
            <parameter>
                <name>badgeBackground</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
        </method>
        <method>
            <name>withColor</name>
            <comment></comment>
            <returntype>de.donmanfred.BadgeStyleWrapper</returntype>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withTextColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.BadgeStyleWrapper</returntype>
            <parameter>
                <name>textColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withPaddingTopBottomDp</name>
            <comment></comment>
            <returntype>de.donmanfred.BadgeStyleWrapper</returntype>
            <parameter>
                <name>paddingTopBottom</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withMinWidth</name>
            <comment></comment>
            <returntype>de.donmanfred.BadgeStyleWrapper</returntype>
            <parameter>
                <name>minWidth</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.BadgeStyleWrapper</returntype>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withPadding</name>
            <comment></comment>
            <returntype>de.donmanfred.BadgeStyleWrapper</returntype>
            <parameter>
                <name>padding</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withColorPressed</name>
            <comment></comment>
            <returntype>de.donmanfred.BadgeStyleWrapper</returntype>
            <parameter>
                <name>colorPressed</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>style2</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>badgeTextView</name>
                <type>android.widget.TextView</type>
            </parameter>
            <parameter>
                <name>colorStateList</name>
                <type>android.content.res.ColorStateList</type>
            </parameter>
        </method>
        <method>
            <name>style</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>badgeTextView</name>
                <type>android.widget.TextView</type>
            </parameter>
        </method>
        <property>
            <name>PaddingTopBottom</name>
            <returntype>com.mikepenz.materialdrawer.holder.DimenHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>BadgeBackground</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <comment></comment>
        </property>
        <property>
            <name>PaddingLeftRight</name>
            <returntype>com.mikepenz.materialdrawer.holder.DimenHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Color</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ColorPressed</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TextColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Corners</name>
            <returntype>com.mikepenz.materialdrawer.holder.DimenHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MinWidth</name>
            <returntype>com.mikepenz.materialdrawer.holder.DimenHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>GradientDrawable</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.CommunityMaterialWrapper</name>
        <shortname>CommunityMaterial</shortname>
        <objectwrapper>com.mikepenz.community_material_typeface_library.CommunityMaterial</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getIcon</name>
            <comment></comment>
            <returntype>com.mikepenz.iconics.typeface.IIcon</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getTypeface</name>
            <comment></comment>
            <returntype>android.graphics.Typeface</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <property>
            <name>Description</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Characters</name>
            <returntype>java.util.HashMap</returntype>
            <comment></comment>
        </property>
        <property>
            <name>License</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Icons</name>
            <returntype>java.util.Collection</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Url</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LicenseUrl</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IconCount</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Version</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MappingPrefix</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>FontName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Author</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.DrawerBuilderWrapper</name>
        <shortname>DrawerBuilder</shortname>
        <objectwrapper>com.mikepenz.materialdrawer.DrawerBuilder</objectwrapper>
        <owner>activity</owner>
        <event>onDrawerOpened()</event>
        <event>onDrawerClosed()</event>
        <event>onDrawerSlide(slideOffset As Float)</event>
        <event>onItemClick(position As Int, drawerItem As IDrawerItem)</event>
        <method>
            <name>withDelayOnDrawerClose</name>
            <comment>Define the delay for the drawer close operation after a click. This is a
 small trick to improve the speed (and remove lag) if you open a new
 activity after a DrawerItem was selected. NOTE: Disable this by passing -1
delayOnDrawerClose: the delay in MS (-1 to disable)
Return type: @return:this</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>delayOnDrawerClose</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withDrawerLayoutRes</name>
            <comment>Pass a custom DrawerLayout Resource which will be used. NOTE: This requires
 the same structure as the drawer.xml
resLayout: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>resLayout</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withOnDrawerListener</name>
            <comment>Define a OnDrawerListener for this Drawer
onDrawerListener: 
Return type: @return:this</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
        </method>
        <method>
            <name>withScrollToTopAfterClick</name>
            <comment>defines if the drawer should scroll to top after click
scrollToTopAfterClick: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>scrollToTopAfterClick</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>inflateMenu</name>
            <comment>Inflates the DrawerItems from a menu.xml
menuRes: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>menuRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withFooter</name>
            <comment>Add a footer to the DrawerBuilder ListView. This can be any view
footerView: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>footerView</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>withAccountHeader2</name>
            <comment>Add a AccountSwitcherHeader which will be used in this drawer instance.
 Pass true if it should be sticky NOTE: This will overwrite any set
 headerView or stickyHeaderView (depends on the boolean).
accountHeader: 
accountHeaderSticky: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>accountHeader</name>
                <type>com.mikepenz.materialdrawer.AccountHeader</type>
            </parameter>
            <parameter>
                <name>accountHeaderSticky</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedItem</name>
            <comment>Set this to the identifier of the item, you would love to select upon start
selectedItemIdentifier: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>selectedItemIdentifier</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>withStickyFooterShadow</name>
            <comment>Set this to false if you don't want the shadow on top of the sticky footer
stickyFooterShadow: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>stickyFooterShadow</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withDrawerItems</name>
            <comment>Set the initial List of IDrawerItems for the Drawer
drawerItems: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>drawerItems</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>withOnDrawerNavigationListener</name>
            <comment>Define a OnDrawerNavigationListener for this Drawer
onDrawerNavigationListener: 
Return type: @return:this</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
        </method>
        <method>
            <name>withTranslucentStatusBar</name>
            <comment>Sets that the view which hosts the DrawerLayout should have a translucent
 statusBar This is true by default, so it's possible to display the drawer
 under the statusBar
translucentStatusBar: sets whether the statusBar is transparent (and the drawer is
          displayed under it) or not</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>translucentStatusBar</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withSliderBackgroundColorRes</name>
            <comment>Set the background color for the Slider from a Resource. This is the view
 containing the list.
sliderBackgroundColorRes: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>sliderBackgroundColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withHeaderPadding</name>
            <comment>Set this to false if you don't need the padding below the header
headerPadding: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>headerPadding</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withHasStableIds</name>
            <comment>define this if you want enable hasStableIds for the adapter which is
 generated. WARNING: only use this if you have set an identifer for all of
 your items else this could cause many weird things
hasStableIds: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>hasStableIds</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withStickyHeaderRes</name>
            <comment>Add a sticky header below the DrawerBuilder ListView defined by a resource.
stickyHeaderRes: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>stickyHeaderRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withSystemUIHidden</name>
            <comment>Set to true if you use your app in complete fullscreen mode with hidden
 statusBar and navigationBar
systemUIHidden: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>systemUIHidden</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedItemByPosition</name>
            <comment>Set this to the index of the item, you would love to select upon start
selectedItemPosition: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>selectedItemPosition</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withCloseOnClick</name>
            <comment>Set this to false if the drawer should stay opened after an item was
 clicked
closeOnClick: 
Return type: @return:this</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>closeOnClick</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withOnDrawerItemClickListener</name>
            <comment>Define a OnDrawerItemClickListener for this Drawer
onDrawerItemClickListener: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
        </method>
        <method>
            <name>addStickyDrawerItems</name>
            <comment>Add a initial DrawerItem or a DrawerItem Array for the StickyDrawerFooter
stickyDrawerItems: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>stickyDrawerItems</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem[]</type>
            </parameter>
        </method>
        <method>
            <name>withTranslucentNavigationBarProgrammatically</name>
            <comment>set this to true if you want a translucent navigation bar.
translucentNavigationBarProgrammatically: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>translucentNavigationBarProgrammatically</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withHeader</name>
            <comment>Add a header to the DrawerBuilder ListView. This can be any view
headerView: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>headerView</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>addDrawerItems</name>
            <comment>Add a initial DrawerItem or a DrawerItem Array for the Drawer
drawerItems: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>drawerItems</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem[]</type>
            </parameter>
        </method>
        <method>
            <name>withDrawerLayout</name>
            <comment>Pass a custom DrawerLayout which will be used. NOTE: This requires the same
 structure as the drawer.xml
drawerLayout: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>drawerLayout</name>
                <type>android.support.v4.widget.DrawerLayout</type>
            </parameter>
        </method>
        <method>
            <name>withHeaderHeight</name>
            <comment>Sets the header height for the header provided via `withHeader()`
headerHeight: the DimenHolder with the height we want to set for the header
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>headerHeight</name>
                <type>com.mikepenz.materialdrawer.holder.DimenHolder</type>
            </parameter>
        </method>
        <method>
            <name>withFooterDivider</name>
            <comment>Set this to false if you don't need the divider above the footer
footerDivider: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>footerDivider</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withFullscreen</name>
            <comment>Set to true if the used theme has a translucent statusBar and navigationBar
 and you want to manage the padding on your own.
fullscreen: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>fullscreen</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withStickyFooter</name>
            <comment>Add a sticky footer below the DrawerBuilder ListView. This can be any view
stickyFooter: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>stickyFooter</name>
                <type>android.view.ViewGroup</type>
            </parameter>
        </method>
        <method>
            <name>withFooterRes</name>
            <comment>Add a footer to the DrawerBuilder ListView defined by a resource.
footerViewRes: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>footerViewRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withStickyDrawerItems</name>
            <comment>Set the initial List of IDrawerItems for the StickyDrawerFooter
stickyDrawerItems: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>stickyDrawerItems</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>withHeaderDivider</name>
            <comment>Set this to false if you don't need the divider below the header
headerDivider: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>headerDivider</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withGenerateMiniDrawer</name>
            <comment>define if the DrawerBuilder should also generate a MiniDrawer for th
generateMiniDrawer: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>generateMiniDrawer</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withDrawerWidthRes</name>
            <comment>Set the DrawerBuilder width with a dimension resource
drawerWidthRes: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>drawerWidthRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withOnDrawerItemLongClickListener</name>
            <comment>Define a OnDrawerItemLongClickListener for this Drawer
onDrawerItemLongClickListener: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
        </method>
        <method>
            <name>withDrawerGravity</name>
            <comment>Set the gravity for the drawer. START, LEFT | RIGHT, END
gravity: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>gravity</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>buildView</name>
            <comment>build the drawers content only. This will still return a Result object, but
 only with the content set. No inflating of a DrawerLayout.
Return type: @return:Result object with only the content set</comment>
            <returntype>com.mikepenz.materialdrawer.Drawer</returntype>
        </method>
        <method>
            <name>withSliderBackgroundDrawable</name>
            <comment>Set the background drawable for the Slider. This is the view containing the
 list.
sliderBackgroundDrawable: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>sliderBackgroundDrawable</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
        </method>
        <method>
            <name>withActionBarDrawerToggle</name>
            <comment>Set this to false if you don't need the included ActionBarDrawerToggle
actionBarDrawerToggleEnabled: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>actionBarDrawerToggleEnabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withStickyHeaderShadow</name>
            <comment>Set this to false if you don't want the shadow below the sticky header
stickyHeaderShadow: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>stickyHeaderShadow</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withRootView</name>
            <comment>Sets the rootView which will host the DrawerLayout The content of this view
 will be extracted and added as the new content inside the drawerLayout
rootView: a view which will get switched out by the DrawerLayout and added
          as its child</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>rootView</name>
                <type>android.view.ViewGroup</type>
            </parameter>
        </method>
        <method>
            <name>withCustomView</name>
            <comment>Pass a custom view if you need a completely custom drawer content
customView: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>customView</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>withTranslucentNavigationBar</name>
            <comment>Set to true if you use a translucent NavigationBar
translucentNavigationBar: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>translucentNavigationBar</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withAdapterWrapper</name>
            <comment>Defines a Adapter which wraps the main Adapter used in the RecyclerView to
 allow extended navigation and other stuff
adapterWrapper: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>adapterWrapper</name>
                <type>android.support.v7.widget.RecyclerView.Adapter</type>
            </parameter>
        </method>
        <method>
            <name>withHeaderRes</name>
            <comment>Add a header to the DrawerBuilder ListView defined by a resource.
headerViewRes: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>headerViewRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withStickyHeader</name>
            <comment>Add a sticky header below the DrawerBuilder ListView. This can be any view
stickyHeader: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>stickyHeader</name>
                <type>android.view.View</type>
            </parameter>
        </method>
        <method>
            <name>withDisplayBelowStatusBar</name>
            <comment>Sets that the slider of this Drawer should be displayed below the statusBar
 even with a translucentStatusBar
displayBelowStatusBar: sets wheter the slider of the drawer is displayed below the
          statusBar or not</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>displayBelowStatusBar</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withActionBarDrawerToggleAnimated</name>
            <comment>Set this to true if you want the ActionBarDrawerToggle to be animated.
 NOTE: This will only work if the built in ActionBarDrawerToggle is used.
 Enable it by setting withActionBarDrawerToggle to true
actionBarDrawerToggleAnimated: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>actionBarDrawerToggleAnimated</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withItemAnimator</name>
            <comment>defines the itemAnimator to be used in conjunction with the RecyclerView
itemAnimator: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>itemAnimator</name>
                <type>android.support.v7.widget.RecyclerView.ItemAnimator</type>
            </parameter>
        </method>
        <method>
            <name>withInnerShadow</name>
            <comment>sets if the drawer should show an inner shadow or not
innerShadow: sets wheter the drawer should display an inner shadow or not
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>innerShadow</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withFooterClickable</name>
            <comment>Set this to true if you want the footer to be clickable
footerClickable: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>footerClickable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withSliderBackgroundDrawableRes</name>
            <comment>Set the background drawable for the Slider from a Resource. This is the
 view containing the list.
sliderBackgroundDrawableRes: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>sliderBackgroundDrawableRes</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>withSliderBackgroundColor</name>
            <comment>Set the background color for the Slider. This is the view containing the
 list.
sliderBackgroundColor: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>sliderBackgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withStickyFooterDivider</name>
            <comment>Set this to true if you want the divider above the sticky footer
stickyFooterDivider: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>stickyFooterDivider</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withFireOnInitialOnClick</name>
            <comment>Set this to true if you love to get an initial onClick event after the
 build method is called
fireOnInitialOnClick: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>fireOnInitialOnClick</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withAccountHeader</name>
            <comment>Add a AccountSwitcherHeader which will be used in this drawer instance.
 NOTE: This will overwrite any set headerView.
accountHeader: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>accountHeader</name>
                <type>com.mikepenz.materialdrawer.AccountHeader</type>
            </parameter>
        </method>
        <method>
            <name>withStickyFooterRes</name>
            <comment>Add a sticky footer below the DrawerBuilder ListView defined by a resource.
stickyFooterRes: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>stickyFooterRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withShowDrawerOnFirstLaunch</name>
            <comment>define if the DrawerBuilder is shown on the first launch
showDrawerOnFirstLaunch: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>showDrawerOnFirstLaunch</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>buildForFragment</name>
            <comment>Build and add the DrawerBuilder to your activity
Return type: @return:</comment>
            <returntype>com.mikepenz.materialdrawer.Drawer</returntype>
        </method>
        <method>
            <name>build</name>
            <comment>Build and add the DrawerBuilder to your activity
Return type: @return:</comment>
            <returntype>com.mikepenz.materialdrawer.Drawer</returntype>
        </method>
        <method>
            <name>withDrawerWidthDp</name>
            <comment>Set the DrawerBuilder width with a dp value
drawerWidthDp: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>drawerWidthDp</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withToolbar</name>
            <comment>Sets the toolbar which should be used in combination with the drawer This
 will handle the ActionBarDrawerToggle for you. Do not set this if you are
 in a sub activity and want to handle the back arrow on your own
toolbar: the toolbar which is used in combination with the drawer</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>toolbar</name>
                <type>android.support.v7.widget.Toolbar</type>
            </parameter>
        </method>
        <method>
            <name>withDrawerWidthPx</name>
            <comment>Set the DrawerBuilder width with a pixel value
drawerWidthPx: 
Return type: @return:</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>drawerWidthPx</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withDelayDrawerClickEvent</name>
            <comment>Define the delay for the drawer click event after a click. This can be used
 to improve performance and prevent lag, especially when you switch
 fragments inside the listener. This will ignore the boolean value you can
 return in the listener, as the listener is called after the drawer was
 closed. NOTE: Disable this to pass -1
delayDrawerClickEvent: -1 to disable
Return type: @return:this</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>delayDrawerClickEvent</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withMultiSelect</name>
            <comment>set this to true if you want to enable multiSelect mode inside the drawer.
 Note you will have to programmatically deselect if you want to remove all
 selections! You can disable this at a later time via
 .getAdapter().withMultiSelect(false) You can also modify all other settings
 of the FastAdapter via this method
multiSelect: true if multiSelect is enabled (default: false)
Return type: @return:this</comment>
            <returntype>de.donmanfred.DrawerBuilderWrapper</returntype>
            <parameter>
                <name>multiSelect</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>append</name>
            <comment>Call this method to append a new DrawerBuilder to a existing Drawer.
result: the Drawer.Result of an existing Drawer
Return type: @return:</comment>
            <returntype>com.mikepenz.materialdrawer.Drawer</returntype>
            <parameter>
                <name>result</name>
                <type>com.mikepenz.materialdrawer.Drawer</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>de.donmanfred.DrawerImageLoaderWrapper</name>
        <shortname>DrawerImageLoader</shortname>
        <objectwrapper>com.mikepenz.materialdrawer.util.DrawerImageLoader</objectwrapper>
        <owner>process</owner>
        <method>
            <name>withHandleAllUris</name>
            <comment></comment>
            <returntype>de.donmanfred.DrawerImageLoaderWrapper</returntype>
            <parameter>
                <name>handleAllUris</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>cancelImage</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>imageView</name>
                <type>android.widget.ImageView</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>setImage</name>
            <comment>
imageView: 
uri: 
tag: 
Return type: @return:false if not consumed</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>imageView</name>
                <type>android.widget.ImageView</type>
            </parameter>
            <parameter>
                <name>uri</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>tag</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>ImageLoader</name>
            <returntype>com.mikepenz.materialdrawer.util.DrawerImageLoader.IDrawerImageLoader</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.DrawerWrapper</name>
        <shortname>Drawer</shortname>
        <objectwrapper>com.mikepenz.materialdrawer.Drawer</objectwrapper>
        <owner>activity</owner>
        <method>
            <name>setItemAtPosition</name>
            <comment>Set a drawerItem at a specific position
drawerItem: 
position: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>drawerItem</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem</type>
            </parameter>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>switchDrawerContent</name>
            <comment>method to switch the drawer content to new elements
onDrawerItemClickListener: 
drawerItems: 
drawerSelection: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>onDrawerItemClickListener</name>
                <type>com.mikepenz.materialdrawer.Drawer.OnDrawerItemClickListener</type>
            </parameter>
            <parameter>
                <name>onDrawerItemLongClickListener</name>
                <type>com.mikepenz.materialdrawer.Drawer.OnDrawerItemLongClickListener</type>
            </parameter>
            <parameter>
                <name>drawerItems</name>
                <type>java.util.List</type>
            </parameter>
            <parameter>
                <name>drawerSelection</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>d</name>
                <type>com.mikepenz.materialdrawer.Drawer</type>
            </parameter>
        </method>
        <method>
            <name>setSelection2</name>
            <comment>set the current selection in the drawer
 NOTE: This will trigger onDrawerItemSelected without a view if you pass fireOnClick = true;
identifier: the identifier to search for
fireOnClick: true if the click listener should be called</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>identifier</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>fireOnClick</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setSelection3</name>
            <comment>set the current selection in the drawer
 NOTE: This will trigger onDrawerItemSelected without a view if you pass fireOnClick = true;
drawerItem: the drawerItem to select (this requires a set identifier)
fireOnClick: true if the click listener should be called</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>drawerItem</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem</type>
            </parameter>
            <parameter>
                <name>fireOnClick</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>removeItemByPosition</name>
            <comment>Remove a drawerItem at a specific position
position: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isDrawerOpen</name>
            <comment>Get the current state of the drawer.
 True if the drawer is currently open.
Return type: @return:</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>closeDrawer</name>
            <comment>close the drawer</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>setSelectionAtPosition2</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>fireOnClick</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>updateStickyFooterItem</name>
            <comment>update a specific footerDrawerItem :D
 automatically identified by it's id
drawerItem: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>drawerItem</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem</type>
            </parameter>
        </method>
        <method>
            <name>getDrawerItem</name>
            <comment>returns the DrawerItem by the given identifier
identifier: 
Return type: @return:</comment>
            <returntype>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem</returntype>
            <parameter>
                <name>identifier</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>setHeader4</name>
            <comment>method to replace a previous set header
view: 
padding: 
divider: 
height: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>view</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>padding</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>divider</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>height</name>
                <type>com.mikepenz.materialdrawer.holder.DimenHolder</type>
            </parameter>
        </method>
        <method>
            <name>setHeader3</name>
            <comment>method to replace a previous set header
view: 
padding: 
divider: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>view</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>padding</name>
                <type>boolean</type>
            </parameter>
            <parameter>
                <name>divider</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setHeader2</name>
            <comment>method to replace a previous set header
view: 
divider: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>view</name>
                <type>android.view.View</type>
            </parameter>
            <parameter>
                <name>divider</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>addItemsAtPosition</name>
            <comment>add new items to the current DrawerItem list at a specific position
position: 
drawerItems: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>drawerItems</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem[]</type>
            </parameter>
        </method>
        <method>
            <name>updateItem</name>
            <comment>update a specific drawer item :D
 automatically identified by its id
drawerItem: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>drawerItem</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem</type>
            </parameter>
        </method>
        <method>
            <name>removeAllItems</name>
            <comment>Removes all items from drawer</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>updateName</name>
            <comment>update the name for a specific drawerItem
 identified by its id
identifier: 
name: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>identifier</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>removeHeader</name>
            <comment>method to remove the header of the list</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>setSelection</name>
            <comment>set the current selection in the drawer
 NOTE: This will trigger onDrawerItemSelected without a view!
identifier: the identifier to search for</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>identifier</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>updateIcon</name>
            <comment>update the name for a specific drawerItem
 identified by its id
identifier: 
image: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>identifier</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>image</name>
                <type>com.mikepenz.materialdrawer.holder.ImageHolder</type>
            </parameter>
        </method>
        <method>
            <name>updateItemAtPosition</name>
            <comment>Update a drawerItem at a specific position
drawerItem: 
position: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>drawerItem</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem</type>
            </parameter>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>addItems</name>
            <comment>add new Items to the current DrawerItem List
drawerItems: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>drawerItems</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem[]</type>
            </parameter>
        </method>
        <method>
            <name>getStickyFooterPosition</name>
            <comment>calculates the position of an drawerItem. searching by it's identifier
drawerItem: 
Return type: @return:</comment>
            <returntype>int</returntype>
            <parameter>
                <name>drawerItem</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem</type>
            </parameter>
        </method>
        <method>
            <name>setStickyFooterSelectionAtPosition2</name>
            <comment>set the current selection in the footer of the drawer
 NOTE: This will trigger onDrawerItemSelected without a view if you pass fireOnClick = true;
position: 
fireOnClick: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>fireOnClick</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>removeItem</name>
            <comment>Remove a drawerItem by the identifier
identifier: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>identifier</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>resetDrawerContent</name>
            <comment>helper method to reset to the original drawerContent</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>addItemAtPosition</name>
            <comment>Add a drawerItem at a specific position
drawerItem: 
position: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>drawerItem</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem</type>
            </parameter>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>addStickyFooterItem</name>
            <comment>Add a footerDrawerItem at the end
drawerItem: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>drawerItem</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem</type>
            </parameter>
        </method>
        <method>
            <name>getDrawerItem2</name>
            <comment>returns the found drawerItem by the given tag
tag: 
Return type: @return:</comment>
            <returntype>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>switchedDrawerContent</name>
            <comment>information if the current drawer content is switched by alternative content (profileItems)
Return type: @return:</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>addStickyFooterItemAtPosition</name>
            <comment>Add a footerDrawerItem at a specific position
drawerItem: 
position: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>drawerItem</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem</type>
            </parameter>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setStickyFooterItemAtPosition</name>
            <comment>Set a footerDrawerItem at a specific position
drawerItem: 
position: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>drawerItem</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem</type>
            </parameter>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>openDrawer</name>
            <comment>Open the drawer</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>addItem</name>
            <comment>Add a drawerItem at the end
drawerItem: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>drawerItem</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem</type>
            </parameter>
        </method>
        <method>
            <name>removeItems</name>
            <comment>remove a list of drawerItems by ther identifiers
identifiers: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>identifiers</name>
                <type>long[]</type>
            </parameter>
        </method>
        <method>
            <name>setSelectionAtPosition</name>
            <comment>set the current selection in the drawer
 NOTE: This will trigger onDrawerItemSelected without a view!
position: the position to select</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getPosition2</name>
            <comment>calculates the position of an drawerItem. searching by it's identifier
identifier: 
Return type: @return:</comment>
            <returntype>int</returntype>
            <parameter>
                <name>identifier</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>setStickyFooterSelection</name>
            <comment>set the current selection in the footer of the drawer
 NOTE: This will trigger onDrawerItemSelected without a view if you pass fireOnClick = true;
identifier: the identifier to search for
fireOnClick: true if the click listener should be called</comment>
            <returntype>void</returntype>
            <parameter>
                <name>identifier</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>fireOnClick</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>getStickyFooterPosition2</name>
            <comment>calculates the position of an drawerItem inside the footer. searching by it's identfier
identifier: 
Return type: @return:</comment>
            <returntype>int</returntype>
            <parameter>
                <name>identifier</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>setToolbar2</name>
            <comment>Sets the toolbar which should be used in combination with the drawer
 This will handle the ActionBarDrawerToggle for you.
 Do not set this if you are in a sub activity and want to handle the back arrow on your own
activity: 
toolbar: the toolbar which is used in combination with the drawer
recreateActionBarDrawerToggle: defines if the ActionBarDrawerToggle needs to be recreated with the new set Toolbar</comment>
            <returntype>void</returntype>
            <parameter>
                <name>activity</name>
                <type>android.app.Activity</type>
            </parameter>
            <parameter>
                <name>toolbar</name>
                <type>android.support.v7.widget.Toolbar</type>
            </parameter>
            <parameter>
                <name>recreateActionBarDrawerToggle</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>removeStickyFooterItemAtPosition</name>
            <comment>Remove a footerDrawerItem at a specific position
position: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>removeAllStickyFooterItems</name>
            <comment>Removes all footerItems from drawer</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>updateBadge</name>
            <comment>update the badge for a specific drawerItem
 identified by its id
identifier: 
badge: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>identifier</name>
                <type>long</type>
            </parameter>
            <parameter>
                <name>badge</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>deselect2</name>
            <comment>deselects the item with the given identifier
identifier: the identifier to search for</comment>
            <returntype>void</returntype>
            <parameter>
                <name>identifier</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>updateStickyFooterItemAtPosition</name>
            <comment>update a footerDrawerItem at a specific position
drawerItem: 
position: </comment>
            <returntype>void</returntype>
            <parameter>
                <name>drawerItem</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem</type>
            </parameter>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setToolbar</name>
            <comment>Sets the toolbar which should be used in combination with the drawer
 This will handle the ActionBarDrawerToggle for you.
 Do not set this if you are in a sub activity and want to handle the back arrow on your own
activity: 
toolbar: the toolbar which is used in combination with the drawer</comment>
            <returntype>void</returntype>
            <parameter>
                <name>activity</name>
                <type>android.app.Activity</type>
            </parameter>
            <parameter>
                <name>toolbar</name>
                <type>android.support.v7.widget.Toolbar</type>
            </parameter>
        </method>
        <method>
            <name>getPosition</name>
            <comment>calculates the position of an drawerItem. searching by it's identifier
drawerItem: 
Return type: @return:</comment>
            <returntype>int</returntype>
            <parameter>
                <name>drawerItem</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem</type>
            </parameter>
        </method>
        <method>
            <name>deselect</name>
            <comment>deselects all selected items</comment>
            <returntype>void</returntype>
        </method>
        <property>
            <name>Slider</name>
            <returntype>com.mikepenz.materialize.view.ScrimInsetsRelativeLayout</returntype>
            <comment>get the slider layout of the current drawer.
 This is the layout containing the ListView</comment>
        </property>
        <property>
            <name>StickyFooter</name>
            <returntype>android.view.View</returntype>
            <comment>get the StickyFooter View if set else NULL</comment>
        </property>
        <property>
            <name>ActionBarDrawerToggle</name>
            <returntype>android.support.v7.app.ActionBarDrawerToggle</returntype>
            <parameter>
                <name>actionBarDrawerToggle</name>
                <type>android.support.v7.app.ActionBarDrawerToggle</type>
            </parameter>
            <comment>get the ActionBarDrawerToggle</comment>
        </property>
        <property>
            <name>DrawerItems</name>
            <returntype>java.util.List</returntype>
            <comment>get all drawerItems of the current drawer</comment>
        </property>
        <property>
            <name>Adapter</name>
            <returntype>com.mikepenz.fastadapter.FastAdapter</returntype>
            <comment>get the FastAdapter of the current drawer</comment>
        </property>
        <property>
            <name>StickyFooterSelectionAtPosition</name>
            <parameter>
                <name>position</name>
                <type>int</type>
            </parameter>
            <comment>set the current selection in the footer of the drawer
 NOTE: This will trigger onDrawerItemSelected without a view!</comment>
        </property>
        <property>
            <name>HeaderAdapter</name>
            <returntype>com.mikepenz.fastadapter.adapters.HeaderAdapter</returntype>
            <comment>get the HeaderAdapter of the current drawer</comment>
        </property>
        <property>
            <name>Items</name>
            <parameter>
                <name>drawerItems</name>
                <type>java.util.List</type>
            </parameter>
            <comment>Replace the current DrawerItems with a new ArrayList of items</comment>
        </property>
        <property>
            <name>DrawerLayout</name>
            <returntype>android.support.v4.widget.DrawerLayout</returntype>
            <comment>Get the DrawerLayout of the current drawer</comment>
        </property>
        <property>
            <name>Materialize</name>
            <returntype>com.mikepenz.materialize.Materialize</returntype>
            <comment>get the Materialize object used to beautify your activity</comment>
        </property>
        <property>
            <name>MiniDrawer</name>
            <returntype>com.mikepenz.materialdrawer.MiniDrawer</returntype>
            <comment>gets the already generated MiniDrawer or creates a new one</comment>
        </property>
        <property>
            <name>ItemAdapter</name>
            <returntype>com.mikepenz.fastadapter.adapters.ItemAdapter</returntype>
            <comment>get the ItemAdapter of the current drawer</comment>
        </property>
        <property>
            <name>CurrentStickyFooterSelectedPosition</name>
            <returntype>int</returntype>
            <comment>get the current position of the selected sticky footer element</comment>
        </property>
        <property>
            <name>CurrentSelectedPosition</name>
            <returntype>int</returntype>
            <comment>get the current position of the selected drawer element</comment>
        </property>
        <property>
            <name>FooterAdapter</name>
            <returntype>com.mikepenz.fastadapter.adapters.FooterAdapter</returntype>
            <comment>get the FooterAdapter of the current drawer</comment>
        </property>
        <property>
            <name>CurrentSelection</name>
            <returntype>long</returntype>
            <comment>get the current selected item identifier</comment>
        </property>
        <property>
            <name>OriginalDrawerItems</name>
            <returntype>java.util.List</returntype>
            <comment>get the original list of drawerItems</comment>
        </property>
        <property>
            <name>StickyHeader</name>
            <returntype>android.view.View</returntype>
            <comment>get the StickyHeader View if set else NULL</comment>
        </property>
        <property>
            <name>Header</name>
            <returntype>android.view.View</returntype>
            <parameter>
                <name>view</name>
                <type>android.view.View</type>
            </parameter>
            <comment>get the Header View if set else NULL</comment>
        </property>
        <property>
            <name>Content</name>
            <returntype>android.widget.FrameLayout</returntype>
            <comment>get the container frameLayout of the current drawer</comment>
        </property>
        <property>
            <name>Footer</name>
            <returntype>android.view.View</returntype>
            <comment>get the Footer View if set else NULL</comment>
        </property>
        <property>
            <name>Fullscreen</name>
            <parameter>
                <name>fullscreen</name>
                <type>boolean</type>
            </parameter>
            <comment>set the insetsFrameLayout to display the content in fullscreen
 under the statusBar and navigationBar</comment>
        </property>
        <property>
            <name>RecyclerView</name>
            <returntype>android.support.v7.widget.RecyclerView</returntype>
            <comment>get the listView of the current drawer</comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.ExpandableDrawerItemWrapper</name>
        <shortname>ExpandableDrawerItem</shortname>
        <objectwrapper>com.mikepenz.materialdrawer.model.ExpandableDrawerItem</objectwrapper>
        <owner>process</owner>
        <method>
            <name>isExpanded</name>
            <comment>
Return type: @return:if this item is currently expaneded</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withSubItems</name>
            <comment>a list of subItems
subItems: 
Return type: @return:</comment>
            <returntype>de.donmanfred.ExpandableDrawerItemWrapper</returntype>
            <parameter>
                <name>subItems</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>withEnabled</name>
            <comment>set if this item is enabled
enabled: true if this item is enabled
Return type: @return:</comment>
            <returntype>de.donmanfred.ExpandableDrawerItemWrapper</returntype>
            <parameter>
                <name>enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withTextColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.ExpandableDrawerItemWrapper</returntype>
            <parameter>
                <name>textColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>withTypeface</name>
            <comment></comment>
            <returntype>de.donmanfred.ExpandableDrawerItemWrapper</returntype>
            <parameter>
                <name>typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
        </method>
        <method>
            <name>isEnabled</name>
            <comment>
Return type: @return:if this item is enabled</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withTextColor</name>
            <comment></comment>
            <returntype>de.donmanfred.ExpandableDrawerItemWrapper</returntype>
            <parameter>
                <name>textColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withIsExpanded</name>
            <comment>
expanded: defines if this item is now expanded or not
Return type: @return:this</comment>
            <returntype>de.donmanfred.ExpandableDrawerItemWrapper</returntype>
            <parameter>
                <name>expanded</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withName</name>
            <comment></comment>
            <returntype>de.donmanfred.ExpandableDrawerItemWrapper</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>SubItems</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Typeface</name>
            <returntype>android.graphics.Typeface</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TextColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>com.mikepenz.materialdrawer.holder.StringHolder</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.FontAwesomeWrapper</name>
        <shortname>FontAwesome</shortname>
        <objectwrapper>com.mikepenz.fontawesome_typeface_library.FontAwesome</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getIcon</name>
            <comment></comment>
            <returntype>com.mikepenz.iconics.typeface.IIcon</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getTypeface</name>
            <comment></comment>
            <returntype>android.graphics.Typeface</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <property>
            <name>Description</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Characters</name>
            <returntype>java.util.HashMap</returntype>
            <comment></comment>
        </property>
        <property>
            <name>License</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Icons</name>
            <returntype>java.util.Collection</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Url</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LicenseUrl</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IconCount</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Version</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MappingPrefix</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>FontName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Author</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.GoogleMaterialWrapper</name>
        <shortname>GoogleMaterial</shortname>
        <objectwrapper>com.mikepenz.google_material_typeface_library.GoogleMaterial</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getIcon</name>
            <comment></comment>
            <returntype>com.mikepenz.iconics.typeface.IIcon</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getTypeface</name>
            <comment></comment>
            <returntype>android.graphics.Typeface</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <property>
            <name>Description</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Characters</name>
            <returntype>java.util.HashMap</returntype>
            <comment></comment>
        </property>
        <property>
            <name>License</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Icons</name>
            <returntype>java.util.Collection</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Url</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LicenseUrl</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IconCount</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Version</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MappingPrefix</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>FontName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Author</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.IconicsDrawableWrapper</name>
        <shortname>IconicsDrawable</shortname>
        <objectwrapper>com.mikepenz.iconics.IconicsDrawable</objectwrapper>
        <owner>process</owner>
        <method>
            <name>color</name>
            <comment>Set the color of the drawable.
color: The color, usually from android.graphics.Color or 0xFF012345.
Return type: @return:The current IconExtDrawable for chaining.</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>contourWidthRes</name>
            <comment>Set contour width from an dimen res for the icon
contourWidthRes: 
Return type: @return:The current IconExtDrawable for chaining.</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>contourWidthRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>colorFilter</name>
            <comment>Set the colorFilter
cf: 
Return type: @return:The current IconExtDrawable for chaining.</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>cf</name>
                <type>android.graphics.ColorFilter</type>
            </parameter>
        </method>
        <method>
            <name>actionBarSize</name>
            <comment>Set the size of this icon to the standard Android ActionBar.
Return type: @return:The current IconExtDrawable for chaining.</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>icon</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>clearColorFilter</name>
            <comment></comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>paddingRes</name>
            <comment>Set the padding of the drawable from res
dimenRes: 
Return type: @return:The current IconExtDrawable for chaining.</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>dimenRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>sizeDp</name>
            <comment>Set the size of the drawable.
size: The size in density-independent pixels (dp).
Return type: @return:The current IconExtDrawable for chaining.</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>size</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>iconOffsetYRes</name>
            <comment>set the icon offset for Y from resource
iconOffsetYRes: 
Return type: @return:</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>iconOffsetYRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>sizePx</name>
            <comment>Set the size of the drawable.
size: The size in pixels (px).
Return type: @return:The current IconExtDrawable for chaining.</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>size</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>contourColorRes</name>
            <comment>Set contour color from color res.
contourColorRes: 
Return type: @return:The current IconExtDrawable for chaining.</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>contourColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>backgroundColorRes</name>
            <comment>set background color from res
backgroundColorRes: 
Return type: @return:</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>backgroundColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>contourColor</name>
            <comment>Set contour color for the.
contourColor: 
Return type: @return:The current IconExtDrawable for chaining.</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>contourColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isStateful</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>sizeRes</name>
            <comment>Set the size of the drawable.
dimenRes: The dimension resource.
Return type: @return:The current IconExtDrawable for chaining.</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>dimenRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>backgroundColor</name>
            <comment>set background color
backgroundColor: 
Return type: @return:</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>backgroundColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>drawContour</name>
            <comment>Enable/disable contour drawing.
drawContour: 
Return type: @return:The current IconExtDrawable for chaining.</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>drawContour</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>iconOffsetYDp</name>
            <comment>set the icon offset for Y as dp
iconOffsetYDp: 
Return type: @return:</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>iconOffsetYDp</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>iconOffsetXDp</name>
            <comment>set the icon offset for X as dp
iconOffsetXDp: 
Return type: @return:</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>iconOffsetXDp</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>contourWidthPx</name>
            <comment>Set contour width for the icon.
contourWidth: 
Return type: @return:The current IconExtDrawable for chaining.</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>contourWidth</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>iconOffsetYPx</name>
            <comment>set the icon offset for Y
iconOffsetY: 
Return type: @return:</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>iconOffsetY</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>paddingPx</name>
            <comment>Set a padding for the.
iconPadding: 
Return type: @return:The current IconExtDrawable for chaining.</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>iconPadding</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>iconOffsetXPx</name>
            <comment>set the icon offset for X
iconOffsetX: 
Return type: @return:</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>iconOffsetX</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>contourWidthDp</name>
            <comment>Set contour width from dp for the icon
contourWidthDp: 
Return type: @return:The current IconExtDrawable for chaining.</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>contourWidthDp</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>icon3</name>
            <comment>Loads and draws given.
icon: 
Return type: @return:The current IconExtDrawable for chaining.</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>icon</name>
                <type>com.mikepenz.iconics.typeface.IIcon</type>
            </parameter>
        </method>
        <method>
            <name>paddingDp</name>
            <comment>Set the padding in dp for the drawable
iconPadding: 
Return type: @return:The current IconExtDrawable for chaining.</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>iconPadding</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>actionBar</name>
            <comment>Sets the size and the Padding to the correct values to be used for the actionBar / toolBar
Return type: @return:</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
        </method>
        <method>
            <name>iconOffsetXRes</name>
            <comment>set the icon offset for X from resource
iconOffsetXRes: 
Return type: @return:</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>iconOffsetXRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>toBitmap</name>
            <comment>Creates a BitMap to use in Widgets or anywhere else
Return type: @return:bitmap to set</comment>
            <returntype>android.graphics.Bitmap</returntype>
        </method>
        <method>
            <name>colorRes</name>
            <comment>Set the color of the drawable.
colorRes: The color resource, from your R file.
Return type: @return:The current IconExtDrawable for chaining.</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>colorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setState</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>stateSet</name>
                <type>int[]</type>
            </parameter>
        </method>
        <method>
            <name>style</name>
            <comment>Sets the style
style: 
Return type: @return:The current IconExtDrawable for chaining.</comment>
            <returntype>de.donmanfred.IconicsDrawableWrapper</returntype>
            <parameter>
                <name>style</name>
                <type EnumType="true">android.graphics.Paint.Style</type>
            </parameter>
        </method>
        <property>
            <name>CompatAlpha</name>
            <returntype>int</returntype>
            <comment>just a helper method to get the alpha value</comment>
        </property>
        <property>
            <name>IntrinsicWidth</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IntrinsicHeight</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Alpha</name>
            <returntype>int</returntype>
            <parameter>
                <name>alpha</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Opacity</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.IconicsWrapper</name>
        <shortname>Iconics</shortname>
        <objectwrapper>com.mikepenz.iconics.Iconics</objectwrapper>
        <owner>activity</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>registerFont</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>font</name>
                <type>com.mikepenz.iconics.typeface.ITypeface</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>de.donmanfred.ImageHolderWrapper</name>
        <shortname>ImageHolder</shortname>
        <objectwrapper>com.mikepenz.materialdrawer.holder.ImageHolder</objectwrapper>
        <owner>process</owner>
        <method>
            <name>applyTo</name>
            <comment>sets an existing image to the imageView
imageView: 
Return type: @return:true if an image was set</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>imageView</name>
                <type>android.widget.ImageView</type>
            </parameter>
        </method>
        <method>
            <name>decideIcon</name>
            <comment>this only handles Drawables
ctx: 
iconColor: 
tint: 
Return type: @return:</comment>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>iconColor</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>tint</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>applyTo2</name>
            <comment>sets an existing image to the imageView
imageView: 
tag: used to identify imageViews and define different placeholders
Return type: @return:true if an image was set</comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>imageView</name>
                <type>android.widget.ImageView</type>
            </parameter>
            <parameter>
                <name>tag</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>IconRes</name>
            <parameter>
                <name>Icon</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Bitmap</name>
            <returntype>android.graphics.Bitmap</returntype>
            <parameter>
                <name>mBitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Icon</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <parameter>
                <name>mIcon</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Uri</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.MaterialDrawerFontWrapper</name>
        <shortname>MaterialDrawerFont</shortname>
        <objectwrapper>com.mikepenz.materialdrawer.icons.MaterialDrawerFont</objectwrapper>
        <owner>process</owner>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getIcon</name>
            <comment></comment>
            <returntype>com.mikepenz.iconics.typeface.IIcon</returntype>
            <parameter>
                <name>key</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getTypeface</name>
            <comment></comment>
            <returntype>android.graphics.Typeface</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <property>
            <name>Description</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Characters</name>
            <returntype>java.util.HashMap</returntype>
            <comment></comment>
        </property>
        <property>
            <name>License</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Icons</name>
            <returntype>java.util.Collection</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Url</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LicenseUrl</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IconCount</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Version</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>MappingPrefix</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>FontName</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Author</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.PrimaryDrawerItemWrapper</name>
        <shortname>PrimaryDrawerItem</shortname>
        <objectwrapper>com.mikepenz.materialdrawer.model.PrimaryDrawerItem</objectwrapper>
        <owner>process</owner>
        <method>
            <name>withIconColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>iconColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withIconColor</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>iconColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withLevel</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>level</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>withIconRes</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>iconRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withIconTinted</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>iconTinted</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withIdentifier</name>
            <comment>set the identifier of this item
identifier: 
Return type: @return:</comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>identifier</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>withIcon2</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>icon</name>
                <type>com.mikepenz.materialdrawer.holder.ImageHolder</type>
            </parameter>
        </method>
        <method>
            <name>withName</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isSelectable</name>
            <comment>
Return type: @return:if this item is selectable</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withIcon3</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>icon</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isIconTinted</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>isExpanded</name>
            <comment>
Return type: @return:if this item is currently expaneded</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withDisabledIconColor</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>disabledIconColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedIcon</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>selectedIcon</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
        </method>
        <method>
            <name>withEnabled</name>
            <comment>set if this item is enabled
enabled: true if this item is enabled
Return type: @return:</comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withNameRes</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>nameRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withTextColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>textColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withTag</name>
            <comment>set the tag of this item
object: 
Return type: @return:</comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>withIcon</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>icon</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
        </method>
        <method>
            <name>isEnabled</name>
            <comment>
Return type: @return:if this item is enabled</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withSubItems2</name>
            <comment>a list of subItems
subItems: 
Return type: @return:</comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>subItems</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>withBadge</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>badge</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>withDescriptionTextColor</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withDisabledIconColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>disabledIconColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedIconColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>selectedColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withDescriptionRes</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>descriptionRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withTintSelectedIcon</name>
            <comment>for backwards compatibility - withIconTinted..
iconTinted: 
Return type: @return:</comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>iconTinted</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withDescription</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>description</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedTextColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>selectedColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedColor</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>selectedColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedIconColor</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>selectedIconColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isSelected</name>
            <comment>
Return type: @return:if this item is selected</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withTextColor</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>textColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withIsExpanded</name>
            <comment>
expanded: defines if this item is now expanded or not
Return type: @return:this</comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>expanded</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withSelectable</name>
            <comment>set if this item is selectable
selectable: true if this item is selectable
Return type: @return:</comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>selectable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withIconTintingEnabled</name>
            <comment>will tint the icon with the default (or set) colors
 (default and selected state)
iconTintingEnabled: 
Return type: @return:</comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>iconTintingEnabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withBadgeStyle</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>badgeStyle</name>
                <type>com.mikepenz.materialdrawer.holder.BadgeStyle</type>
            </parameter>
        </method>
        <method>
            <name>withSubItems</name>
            <comment>an array of subItems
subItems: 
Return type: @return:</comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>subItems</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem[]</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>selectedColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withDisabledTextColor</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>disabledTextColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withDisabledTextColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>disabledTextColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedTextColor</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>selectedTextColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withSetSelected</name>
            <comment>set if this item is selected
selected: true if this item is selected
Return type: @return:</comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>selected</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withTypeface</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
        </method>
        <method>
            <name>withDescriptionTextColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>colorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedIconRes</name>
            <comment></comment>
            <returntype>de.donmanfred.PrimaryDrawerItemWrapper</returntype>
            <parameter>
                <name>selectedIconRes</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Description</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SelectedIconColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DisabledTextColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Typeface</name>
            <returntype>android.graphics.Typeface</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SelectedIcon</name>
            <returntype>com.mikepenz.materialdrawer.holder.ImageHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SelectedTextColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SelectedColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Badge</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>com.mikepenz.materialdrawer.holder.StringHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IconColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SubItems</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DescriptionTextColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LayoutRes</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Identifier</name>
            <returntype>long</returntype>
            <comment>returns the identifier of this item
 -1 is the default not set state</comment>
        </property>
        <property>
            <name>BadgeStyle</name>
            <returntype>com.mikepenz.materialdrawer.holder.BadgeStyle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DisabledIconColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Level</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TextColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Icon</name>
            <returntype>com.mikepenz.materialdrawer.holder.ImageHolder</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.Profile</name>
        <shortname>Profile</shortname>
        <owner>process</owner>
        <method>
            <name>withEmail</name>
            <comment></comment>
            <returntype>de.donmanfred.Profile</returntype>
            <parameter>
                <name>var1</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>withIcon</name>
            <comment></comment>
            <returntype>de.donmanfred.Profile</returntype>
            <parameter>
                <name>icon</name>
                <type>com.mikepenz.materialdrawer.holder.ImageHolder</type>
            </parameter>
        </method>
        <method>
            <name>withIdentifier</name>
            <comment></comment>
            <returntype>de.donmanfred.Profile</returntype>
            <parameter>
                <name>var1</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withName</name>
            <comment></comment>
            <returntype>de.donmanfred.Profile</returntype>
            <parameter>
                <name>var1</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isSelectable</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withSelectable</name>
            <comment></comment>
            <returntype>de.donmanfred.Profile</returntype>
            <parameter>
                <name>var1</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>setSelectable</name>
            <comment></comment>
            <returntype>de.donmanfred.Profile</returntype>
            <parameter>
                <name>var1</name>
                <type>boolean</type>
            </parameter>
        </method>
        <property>
            <name>Email</name>
            <returntype>com.mikepenz.materialdrawer.holder.StringHolder</returntype>
            <parameter>
                <name>var1</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Identifier</name>
            <returntype>long</returntype>
            <parameter>
                <name>var1</name>
                <type>int</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Icon</name>
            <returntype>com.mikepenz.materialdrawer.holder.ImageHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>com.mikepenz.materialdrawer.holder.StringHolder</returntype>
            <parameter>
                <name>var1</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.ProfileDrawerItemWrapper</name>
        <shortname>ProfileDrawerItem</shortname>
        <objectwrapper>com.mikepenz.materialdrawer.model.ProfileDrawerItem</objectwrapper>
        <owner>process</owner>
        <method>
            <name>withIconUrl</name>
            <comment></comment>
            <returntype>de.donmanfred.ProfileDrawerItemWrapper</returntype>
            <parameter>
                <name>url</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>withEmail</name>
            <comment></comment>
            <returntype>de.donmanfred.ProfileDrawerItemWrapper</returntype>
            <parameter>
                <name>email</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedTextColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.ProfileDrawerItemWrapper</returntype>
            <parameter>
                <name>selectedColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withIconRes</name>
            <comment></comment>
            <returntype>de.donmanfred.ProfileDrawerItemWrapper</returntype>
            <parameter>
                <name>icon</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedColor</name>
            <comment></comment>
            <returntype>de.donmanfred.ProfileDrawerItemWrapper</returntype>
            <parameter>
                <name>selectedColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withIdentifier</name>
            <comment></comment>
            <returntype>de.donmanfred.ProfileDrawerItemWrapper</returntype>
            <parameter>
                <name>identifier</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>withTextColor</name>
            <comment></comment>
            <returntype>de.donmanfred.ProfileDrawerItemWrapper</returntype>
            <parameter>
                <name>textColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withName</name>
            <comment></comment>
            <returntype>de.donmanfred.ProfileDrawerItemWrapper</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>withIconUri</name>
            <comment></comment>
            <returntype>de.donmanfred.ProfileDrawerItemWrapper</returntype>
            <parameter>
                <name>uri</name>
                <type>android.net.Uri</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.ProfileDrawerItemWrapper</returntype>
            <parameter>
                <name>selectedColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withDisabledTextColor</name>
            <comment></comment>
            <returntype>de.donmanfred.ProfileDrawerItemWrapper</returntype>
            <parameter>
                <name>disabledTextColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isNameShown</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withTextColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.ProfileDrawerItemWrapper</returntype>
            <parameter>
                <name>textColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withNameShown</name>
            <comment></comment>
            <returntype>de.donmanfred.ProfileDrawerItemWrapper</returntype>
            <parameter>
                <name>nameShown</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withDisabledTextColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.ProfileDrawerItemWrapper</returntype>
            <parameter>
                <name>disabledTextColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedTextColor</name>
            <comment></comment>
            <returntype>de.donmanfred.ProfileDrawerItemWrapper</returntype>
            <parameter>
                <name>selectedTextColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withTypeface</name>
            <comment></comment>
            <returntype>de.donmanfred.ProfileDrawerItemWrapper</returntype>
            <parameter>
                <name>typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
        </method>
        <method>
            <name>withIcon</name>
            <comment></comment>
            <returntype>de.donmanfred.ProfileDrawerItemWrapper</returntype>
            <parameter>
                <name>icon</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
        </method>
        <method>
            <name>withIconBitmap</name>
            <comment></comment>
            <returntype>de.donmanfred.ProfileDrawerItemWrapper</returntype>
            <parameter>
                <name>iconBitmap</name>
                <type>android.graphics.Bitmap</type>
            </parameter>
        </method>
        <property>
            <name>Email</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DisabledTextColor</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Typeface</name>
            <returntype>android.graphics.Typeface</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SelectedTextColor</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SelectedColor</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TextColor</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Icon</name>
            <returntype>android.graphics.drawable.Drawable</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Profile</name>
            <returntype>com.mikepenz.materialdrawer.model.interfaces.IProfile</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <designerProperty>key:Checked, displayname:Checked, defaultvalue:False, fieldtype:Boolean</designerProperty>
    </class>
    <class>
        <name>de.donmanfred.SecondaryDrawerItemWrapper</name>
        <shortname>SecondaryDrawerItem</shortname>
        <objectwrapper>com.mikepenz.materialdrawer.model.SecondaryDrawerItem</objectwrapper>
        <owner>process</owner>
        <method>
            <name>withIconColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>iconColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withIconColor</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>iconColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withLevel</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>level</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>withIconRes</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>iconRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withIconTinted</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>iconTinted</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withIdentifier</name>
            <comment>set the identifier of this item
identifier: 
Return type: @return:</comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>identifier</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>withIcon2</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>icon</name>
                <type>com.mikepenz.materialdrawer.holder.ImageHolder</type>
            </parameter>
        </method>
        <method>
            <name>withName</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isSelectable</name>
            <comment>
Return type: @return:if this item is selectable</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>isIconTinted</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>isExpanded</name>
            <comment>
Return type: @return:if this item is currently expaneded</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withDisabledIconColor</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>disabledIconColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedIcon</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>selectedIcon</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
        </method>
        <method>
            <name>withEnabled</name>
            <comment>set if this item is enabled
enabled: true if this item is enabled
Return type: @return:</comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withNameRes</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>nameRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withTextColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>textColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withTag</name>
            <comment>set the tag of this item
object: 
Return type: @return:</comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>withIcon</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>icon</name>
                <type>android.graphics.drawable.Drawable</type>
            </parameter>
        </method>
        <method>
            <name>isEnabled</name>
            <comment>
Return type: @return:if this item is enabled</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withSubItems2</name>
            <comment>a list of subItems
subItems: 
Return type: @return:</comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>subItems</name>
                <type>java.util.List</type>
            </parameter>
        </method>
        <method>
            <name>withBadge</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>badge</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>withDescriptionTextColor</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>color</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withDisabledIconColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>disabledIconColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedIconColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>selectedColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withDescriptionRes</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>descriptionRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withTintSelectedIcon</name>
            <comment>for backwards compatibility - withIconTinted..
iconTinted: 
Return type: @return:</comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>iconTinted</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withDescription</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>description</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedTextColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>selectedColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedColor</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>selectedColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedIconColor</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>selectedIconColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>isSelected</name>
            <comment>
Return type: @return:if this item is selected</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withTextColor</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>textColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withIsExpanded</name>
            <comment>
expanded: defines if this item is now expanded or not
Return type: @return:this</comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>expanded</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withSelectable</name>
            <comment>set if this item is selectable
selectable: true if this item is selectable
Return type: @return:</comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>selectable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withIconTintingEnabled</name>
            <comment>will tint the icon with the default (or set) colors
 (default and selected state)
iconTintingEnabled: 
Return type: @return:</comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>iconTintingEnabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withBadgeStyle</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>badgeStyle</name>
                <type>com.mikepenz.materialdrawer.holder.BadgeStyle</type>
            </parameter>
        </method>
        <method>
            <name>withSubItems</name>
            <comment>an array of subItems
subItems: 
Return type: @return:</comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>subItems</name>
                <type>com.mikepenz.materialdrawer.model.interfaces.IDrawerItem[]</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>selectedColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withDisabledTextColor</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>disabledTextColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withDisabledTextColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>disabledTextColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedTextColor</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>selectedTextColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withSetSelected</name>
            <comment>set if this item is selected
selected: true if this item is selected
Return type: @return:</comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>selected</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withTypeface</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
        </method>
        <method>
            <name>withDescriptionTextColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>colorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withSelectedIconRes</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryDrawerItemWrapper</returntype>
            <parameter>
                <name>selectedIconRes</name>
                <type>int</type>
            </parameter>
        </method>
        <property>
            <name>Description</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SelectedIconColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DisabledTextColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Typeface</name>
            <returntype>android.graphics.Typeface</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SelectedIcon</name>
            <returntype>com.mikepenz.materialdrawer.holder.ImageHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SelectedTextColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SelectedColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Badge</name>
            <returntype>java.lang.String</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>com.mikepenz.materialdrawer.holder.StringHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>IconColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>SubItems</name>
            <returntype>java.util.List</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DescriptionTextColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Type</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>LayoutRes</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Identifier</name>
            <returntype>long</returntype>
            <comment>returns the identifier of this item
 -1 is the default not set state</comment>
        </property>
        <property>
            <name>BadgeStyle</name>
            <returntype>com.mikepenz.materialdrawer.holder.BadgeStyle</returntype>
            <comment></comment>
        </property>
        <property>
            <name>DisabledIconColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Level</name>
            <returntype>int</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TextColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Icon</name>
            <returntype>com.mikepenz.materialdrawer.holder.ImageHolder</returntype>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.SecondarySwitchDrawerItemWrapper</name>
        <shortname>SecondarySwitchDrawerItem</shortname>
        <objectwrapper>com.mikepenz.materialdrawer.model.SecondarySwitchDrawerItem</objectwrapper>
        <owner>process</owner>
        <method>
            <name>withChecked</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondarySwitchDrawerItemWrapper</returntype>
            <parameter>
                <name>checked</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withTextColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondarySwitchDrawerItemWrapper</returntype>
            <parameter>
                <name>textColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withCheckable</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondarySwitchDrawerItemWrapper</returntype>
            <parameter>
                <name>checkable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withSwitchEnabled</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondarySwitchDrawerItemWrapper</returntype>
            <parameter>
                <name>switchEnabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isChecked</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withTypeface</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondarySwitchDrawerItemWrapper</returntype>
            <parameter>
                <name>typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
        </method>
        <method>
            <name>withTextColor</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondarySwitchDrawerItemWrapper</returntype>
            <parameter>
                <name>textColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withName</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondarySwitchDrawerItemWrapper</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isSwitchEnabled</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Typeface</name>
            <returntype>android.graphics.Typeface</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TextColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>com.mikepenz.materialdrawer.holder.StringHolder</returntype>
            <comment></comment>
        </property>
        <designerProperty>key:Checked, displayname:Checked, defaultvalue:False, fieldtype:Boolean</designerProperty>
    </class>
    <class>
        <name>de.donmanfred.SecondaryToggleDrawerItemWrapper</name>
        <shortname>SecondaryToggleDrawerItem</shortname>
        <objectwrapper>com.mikepenz.materialdrawer.model.SecondaryToggleDrawerItem</objectwrapper>
        <owner>process</owner>
        <method>
            <name>withChecked</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryToggleDrawerItemWrapper</returntype>
            <parameter>
                <name>checked</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withToggleEnabled</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryToggleDrawerItemWrapper</returntype>
            <parameter>
                <name>toggleEnabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withEnabled</name>
            <comment>set if this item is enabled
enabled: true if this item is enabled
Return type: @return:</comment>
            <returntype>de.donmanfred.SecondaryToggleDrawerItemWrapper</returntype>
            <parameter>
                <name>enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withTextColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryToggleDrawerItemWrapper</returntype>
            <parameter>
                <name>textColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isChecked</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>isToggleEnabled</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withTag</name>
            <comment>set the tag of this item
object: 
Return type: @return:</comment>
            <returntype>de.donmanfred.SecondaryToggleDrawerItemWrapper</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>withTypeface</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryToggleDrawerItemWrapper</returntype>
            <parameter>
                <name>typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
        </method>
        <method>
            <name>isEnabled</name>
            <comment>
Return type: @return:if this item is enabled</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withTextColor</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryToggleDrawerItemWrapper</returntype>
            <parameter>
                <name>textColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withName</name>
            <comment></comment>
            <returntype>de.donmanfred.SecondaryToggleDrawerItemWrapper</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>Checked</name>
            <parameter>
                <name>checked</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Typeface</name>
            <returntype>android.graphics.Typeface</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TextColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>com.mikepenz.materialdrawer.holder.StringHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ToggleEnabled</name>
            <parameter>
                <name>toggleEnabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <designerProperty>key:Checked, displayname:Checked, defaultvalue:False, fieldtype:Boolean</designerProperty>
    </class>
    <class>
        <name>de.donmanfred.SectionDrawerItemWrapper</name>
        <shortname>SectionDrawerItem</shortname>
        <objectwrapper>com.mikepenz.materialdrawer.model.SectionDrawerItem</objectwrapper>
        <owner>process</owner>
        <method>
            <name>withTextColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.SectionDrawerItemWrapper</returntype>
            <parameter>
                <name>textColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>hasDivider</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withTypeface</name>
            <comment></comment>
            <returntype>de.donmanfred.SectionDrawerItemWrapper</returntype>
            <parameter>
                <name>typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
        </method>
        <method>
            <name>isEnabled</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>isSelected</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withTextColor</name>
            <comment></comment>
            <returntype>de.donmanfred.SectionDrawerItemWrapper</returntype>
            <parameter>
                <name>textColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withName</name>
            <comment></comment>
            <returntype>de.donmanfred.SectionDrawerItemWrapper</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>withDivider</name>
            <comment></comment>
            <returntype>de.donmanfred.SectionDrawerItemWrapper</returntype>
            <parameter>
                <name>divider</name>
                <type>boolean</type>
            </parameter>
        </method>
        <property>
            <name>Typeface</name>
            <returntype>android.graphics.Typeface</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TextColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>com.mikepenz.materialdrawer.holder.StringHolder</returntype>
            <comment></comment>
        </property>
        <designerProperty>key:Checked, displayname:Checked, defaultvalue:False, fieldtype:Boolean</designerProperty>
    </class>
    <class>
        <name>de.donmanfred.StringHolderWrapper</name>
        <shortname>StringHolder</shortname>
        <objectwrapper>com.mikepenz.materialdrawer.holder.StringHolder</objectwrapper>
        <owner>process</owner>
        <method>
            <name>applyToOrHide</name>
            <comment></comment>
            <returntype>boolean</returntype>
            <parameter>
                <name>textView</name>
                <type>android.widget.TextView</type>
            </parameter>
        </method>
        <method>
            <name>applyTo</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>textView</name>
                <type>android.widget.TextView</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>text</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>getTextCtx</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>ctx</name>
                <type>android.content.Context</type>
            </parameter>
        </method>
        <property>
            <name>Text</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>mText</name>
                <type>java.lang.String</type>
            </parameter>
            <comment></comment>
        </property>
    </class>
    <class>
        <name>de.donmanfred.SwitchDrawerItemWrapper</name>
        <shortname>SwitchDrawerItem</shortname>
        <objectwrapper>com.mikepenz.materialdrawer.model.SwitchDrawerItem</objectwrapper>
        <owner>process</owner>
        <method>
            <name>withChecked</name>
            <comment></comment>
            <returntype>de.donmanfred.SwitchDrawerItemWrapper</returntype>
            <parameter>
                <name>checked</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withTextColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.SwitchDrawerItemWrapper</returntype>
            <parameter>
                <name>textColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withCheckable</name>
            <comment></comment>
            <returntype>de.donmanfred.SwitchDrawerItemWrapper</returntype>
            <parameter>
                <name>checkable</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withSwitchEnabled</name>
            <comment></comment>
            <returntype>de.donmanfred.SwitchDrawerItemWrapper</returntype>
            <parameter>
                <name>switchEnabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isChecked</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withTypeface</name>
            <comment></comment>
            <returntype>de.donmanfred.SwitchDrawerItemWrapper</returntype>
            <parameter>
                <name>typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
        </method>
        <method>
            <name>withTextColor</name>
            <comment></comment>
            <returntype>de.donmanfred.SwitchDrawerItemWrapper</returntype>
            <parameter>
                <name>textColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withName</name>
            <comment></comment>
            <returntype>de.donmanfred.SwitchDrawerItemWrapper</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isSwitchEnabled</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Typeface</name>
            <returntype>android.graphics.Typeface</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TextColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>com.mikepenz.materialdrawer.holder.StringHolder</returntype>
            <comment></comment>
        </property>
        <designerProperty>key:Checked, displayname:Checked, defaultvalue:False, fieldtype:Boolean</designerProperty>
    </class>
    <class>
        <name>de.donmanfred.ToggleDrawerItemWrapper</name>
        <shortname>ToggleDrawerItem</shortname>
        <objectwrapper>com.mikepenz.materialdrawer.model.ToggleDrawerItem</objectwrapper>
        <owner>process</owner>
        <method>
            <name>withChecked</name>
            <comment></comment>
            <returntype>de.donmanfred.ToggleDrawerItemWrapper</returntype>
            <parameter>
                <name>checked</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withToggleEnabled</name>
            <comment></comment>
            <returntype>de.donmanfred.ToggleDrawerItemWrapper</returntype>
            <parameter>
                <name>toggleEnabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withEnabled</name>
            <comment>set if this item is enabled
enabled: true if this item is enabled
Return type: @return:</comment>
            <returntype>de.donmanfred.ToggleDrawerItemWrapper</returntype>
            <parameter>
                <name>enabled</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>withTextColorRes</name>
            <comment></comment>
            <returntype>de.donmanfred.ToggleDrawerItemWrapper</returntype>
            <parameter>
                <name>textColorRes</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>isChecked</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>isToggleEnabled</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withTag</name>
            <comment>set the tag of this item
object: 
Return type: @return:</comment>
            <returntype>de.donmanfred.ToggleDrawerItemWrapper</returntype>
            <parameter>
                <name>tag</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>withTypeface</name>
            <comment></comment>
            <returntype>de.donmanfred.ToggleDrawerItemWrapper</returntype>
            <parameter>
                <name>typeface</name>
                <type>android.graphics.Typeface</type>
            </parameter>
        </method>
        <method>
            <name>isEnabled</name>
            <comment>
Return type: @return:if this item is enabled</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>withTextColor</name>
            <comment></comment>
            <returntype>de.donmanfred.ToggleDrawerItemWrapper</returntype>
            <parameter>
                <name>textColor</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>withName</name>
            <comment></comment>
            <returntype>de.donmanfred.ToggleDrawerItemWrapper</returntype>
            <parameter>
                <name>name</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>Checked</name>
            <parameter>
                <name>checked</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Typeface</name>
            <returntype>android.graphics.Typeface</returntype>
            <comment></comment>
        </property>
        <property>
            <name>TextColor</name>
            <returntype>com.mikepenz.materialdrawer.holder.ColorHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Tag</name>
            <returntype>java.lang.Object</returntype>
            <comment></comment>
        </property>
        <property>
            <name>Name</name>
            <returntype>com.mikepenz.materialdrawer.holder.StringHolder</returntype>
            <comment></comment>
        </property>
        <property>
            <name>ToggleEnabled</name>
            <parameter>
                <name>toggleEnabled</name>
                <type>boolean</type>
            </parameter>
            <comment></comment>
        </property>
        <designerProperty>key:Checked, displayname:Checked, defaultvalue:False, fieldtype:Boolean</designerProperty>
    </class>
    <version>0.9</version>
    <author>Mike Penz (Github) / DonManfred (wrapper)</author>
    <dependsOn>com.android.support:support-v4</dependsOn>
    <dependsOn>com.android.support:appcompat-v7</dependsOn>
    <dependsOn>com.android.support:recyclerview-v7</dependsOn>
    <dependsOn>materialize-1.0.0.aar</dependsOn>
    <dependsOn>fastadapter-2.1.5.aar</dependsOn>
    <dependsOn>fastadapter-extensions-2.1.0.aar</dependsOn>
    <dependsOn>fontawesome-typeface-4.7.0.0.aar</dependsOn>
    <dependsOn>iconics-1.6.2.aar</dependsOn>
    <dependsOn>iconics-core-2.8.1.aar</dependsOn>
</root>
