<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.02</doclet-version-NOT-library-version>
    <class>
        <name>com.nineoldandroids_b4a.view.ViewHelper</name>
        <shortname>noaViewHelper</shortname>
        <owner>process</owner>
        <method>
            <name>setScaleY</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
            <parameter>
                <name>scaleY</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setScaleX</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
            <parameter>
                <name>scaleX</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>getScaleY</name>
            <comment></comment>
            <returntype>float</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>setTranslationY</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
            <parameter>
                <name>translationY</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>getScaleX</name>
            <comment></comment>
            <returntype>float</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>setTranslationX</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
            <parameter>
                <name>translationX</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setRotation</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
            <parameter>
                <name>rotation</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>getAlpha</name>
            <comment></comment>
            <returntype>float</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>getScrollX</name>
            <comment></comment>
            <returntype>float</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>getScrollY</name>
            <comment></comment>
            <returntype>float</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>setRotationX</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
            <parameter>
                <name>rotationX</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setRotationY</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
            <parameter>
                <name>rotationY</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setAlpha</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
            <parameter>
                <name>alpha</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setPivotY</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
            <parameter>
                <name>pivotY</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setPivotX</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
            <parameter>
                <name>pivotX</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>getRotation</name>
            <comment></comment>
            <returntype>float</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>getTranslationX</name>
            <comment></comment>
            <returntype>float</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>getTranslationY</name>
            <comment></comment>
            <returntype>float</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>getPivotY</name>
            <comment></comment>
            <returntype>float</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>getPivotX</name>
            <comment></comment>
            <returntype>float</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>setScrollY</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
            <parameter>
                <name>scrollY</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>setScrollX</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
            <parameter>
                <name>scrollX</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>getY</name>
            <comment></comment>
            <returntype>float</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>setX</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
            <parameter>
                <name>x</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>getRotationY</name>
            <comment></comment>
            <returntype>float</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>setY</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
            <parameter>
                <name>y</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>getX</name>
            <comment></comment>
            <returntype>float</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
        </method>
        <method>
            <name>getRotationX</name>
            <comment></comment>
            <returntype>float</returntype>
            <parameter>
                <name>view</name>
                <type>anywheresoftware.b4a.objects.ConcreteViewWrapper</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.nineoldandroids_b4a.animation.ValueAnimator</name>
        <shortname>noaValueAnimator</shortname>
        <comment>This class provides a simple timing engine for running animations
 which calculate animated values and set them on target objects.

 There is a single timing pulse that all animations use. It runs in a
 custom handler to ensure that property changes happen on the UI thread.

 By default, ValueAnimator uses non-linear time interpolation, via the
 {@link AccelerateDecelerateInterpolator} class, which accelerates into and decelerates
 out of an animation. This behavior can be changed by calling
 {@link ValueAnimator#setInterpolator(TimeInterpolator)}.</comment>
        <owner>process</owner>
        <event>Start</event>
        <event>Cancel</event>
        <event>End</event>
        <event>Repeat</event>
        <event>Update</event>
        <method>
            <name>setupEndValues</name>
            <comment>This method tells the object to use appropriate information to extract
 ending values for the animation. For example, a AnimatorSet object will pass
 this call to its child objects to tell them to set up the values. A
 ObjectAnimator object will use the information it has about its target object
 and PropertyValuesHolder objects to get the start values for its properties.
 A ValueAnimator object will ignore the request since it does not have enough
 information (such as a target object) to gather these values.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>End</name>
            <comment>Ends the animation. This causes the animation to assign the end value of the property being
 animated, then sending the End event to its listeners.

 This method must be called on the thread that is running the animation.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_OVERSHOOT</name>
            <comment></comment>
            <returntype>android.view.animation.OvershootInterpolator</returntype>
        </method>
        <method>
            <name>Start</name>
            <comment>Starts this animation. If the animation has a nonzero startDelay, the animation will start
 running after that delay elapses. A non-delayed animation will have its initial value(s)
 set immediately, followed by sending a Start event to any listeners of this animator.

 The animation started by calling this method will be run on the thread that called
 this method. This thread should have a Looper on it (a runtime exception will be thrown if
 this is not the case). Also, if the animation will animate properties of objects in the view
 hierarchy, then the calling thread should be the UI thread for that view hierarchy.

 Calls to Start after the first are ignored. If you want to restart the animation, call Cancel
 or End before.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_DECELERATE</name>
            <comment></comment>
            <returntype>android.view.animation.DecelerateInterpolator</returntype>
        </method>
        <method>
            <name>setupStartValues</name>
            <comment>This method tells the object to use appropriate information to extract
 starting values for the animation. For example, a AnimatorSet object will pass
 this call to its child objects to tell them to set up the values. A
 ObjectAnimator object will use the information it has about its target object
 and PropertyValuesHolder objects to get the start values for its properties.
 A ValueAnimator object will ignore the request since it does not have enough
 information (such as a target object) to gather these values.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_CYCLE</name>
            <comment></comment>
            <returntype>android.view.animation.CycleInterpolator</returntype>
            <parameter>
                <name>cycles</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setDuration</name>
            <comment>Sets the length of the animation. The default duration is 300 milliseconds.</comment>
            <returntype>com.nineoldandroids_b4a.animation.ValueAnimator</returntype>
            <parameter>
                <name>duration</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>INTERPOLATOR_LINEAR</name>
            <comment></comment>
            <returntype>android.view.animation.LinearInterpolator</returntype>
        </method>
        <method>
            <name>Cancel</name>
            <comment>Cancels the animation. Unlike End(), &lt;code&gt;Cancel()&lt;/code&gt; causes the animation to
 stop in its tracks, sending a Cancel event to its listeners, followed by an End event.

 &lt;p&gt;This method must be called on the thread that is running the animation.&lt;/p&gt;</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_BOUNCE</name>
            <comment></comment>
            <returntype>android.view.animation.BounceInterpolator</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_ANTICIPATE</name>
            <comment></comment>
            <returntype>android.view.animation.AnticipateInterpolator</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_ANTICIPATE_OVERSHOOT</name>
            <comment></comment>
            <returntype>android.view.animation.AnticipateOvershootInterpolator</returntype>
        </method>
        <method>
            <name>Values</name>
            <comment>Returns the values that this Animator animates between.</comment>
            <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
        </method>
        <method>
            <name>isRunning</name>
            <comment>Returns whether this Animator is currently running (having been started and gone past any
 initial startDelay period and not yet ended).</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>InitializeFloat</name>
            <comment>Initializes a ValueAnimator that animates between float values.</comment>
            <returntype>com.nineoldandroids_b4a.animation.ValueAnimator</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>StartValue</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>EndValue</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>EventPrefix</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>InitializeObject</name>
            <comment>Initializes a ValueAnimator that animates between object values.
 Since ValueAnimator does not know how to animate between arbitrary Objects, this
 method also takes a TypeEvaluator object that the ValueAnimator will use to perform
 that interpolation.</comment>
            <returntype>com.nineoldandroids_b4a.animation.ValueAnimator</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>evaluator</name>
                <type>com.nineoldandroids_b4a.animation.TypeEvaluator</type>
            </parameter>
            <parameter>
                <name>StartValue</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>EndValue</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>EventPrefix</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>INTERPOLATOR_ACCELERATE_DECELERATE</name>
            <comment></comment>
            <returntype>android.view.animation.AccelerateDecelerateInterpolator</returntype>
        </method>
        <method>
            <name>Reverse</name>
            <comment>Plays the Animator in reverse. If the animation is already running,
 it will stop itself and play backwards from the point reached when reverse was called.
 If the animation is not currently running, then it will start from the end and
 play backwards. This behavior is only set for the current animation; future playing
 of the animation will use the default behavior of playing forward.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_ACCELERATE</name>
            <comment></comment>
            <returntype>android.view.animation.AccelerateInterpolator</returntype>
        </method>
        <method>
            <name>toString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>isStarted</name>
            <comment>Returns whether this Animator has been started and not yet ended. This state is a superset
 of the state of isRunning(), because an Animator with a nonzero startDelay will return true
 for isStarted() during the delay phase, whereas isRunning() will return true only after the
 delay phase is complete.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>InitializeInt</name>
            <comment>Initializes a ValueAnimator that animates between int values.</comment>
            <returntype>com.nineoldandroids_b4a.animation.ValueAnimator</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>StartValue</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>EndValue</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>EventPrefix</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>FloatValues</name>
            <parameter>
                <name>values</name>
                <type>float[]</type>
            </parameter>
            <comment>Sets float values that will be animated between. A single
 value implies that that value is the one being animated to. However, this is not typically
 useful in a ValueAnimator object because there is no way for the object to determine the
 starting value for the animation (unlike ObjectAnimator, which can derive that value
 from the target object and property being animated). Therefore, there should typically
 be two or more values.</comment>
        </property>
        <property>
            <name>RepeatMode</name>
            <returntype>int</returntype>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
            <comment>Defines what this animation should do when it reaches the end.</comment>
        </property>
        <property>
            <name>ObjectValues</name>
            <parameter>
                <name>values</name>
                <type>java.lang.Object[]</type>
            </parameter>
            <comment>Sets the values to animate between for this animation. A single
 value implies that that value is the one being animated to. However, this is not typically
 useful in a ValueAnimator object because there is no way for the object to determine the
 starting value for the animation (unlike ObjectAnimator, which can derive that value
 from the target object and property being animated). Therefore, there should typically
 be two or more values.

 There should be a TypeEvaluator set on the ValueAnimator that knows how to interpolate
 between these value objects. ValueAnimator only knows how to interpolate between the
 primitive types specified in the other setValues() methods.</comment>
        </property>
        <property>
            <name>StartDelay</name>
            <returntype>long</returntype>
            <parameter>
                <name>startDelay</name>
                <type>long</type>
            </parameter>
            <comment>The amount of time, in milliseconds, to delay starting the animation after Start() is called.</comment>
        </property>
        <property>
            <name>IntValues</name>
            <parameter>
                <name>values</name>
                <type>int[]</type>
            </parameter>
            <comment>Sets int values that will be animated between. A single
 value implies that that value is the one being animated to. However, this is not typically
 useful in a ValueAnimator object because there is no way for the object to determine the
 starting value for the animation (unlike ObjectAnimator, which can derive that value
 from the target object and property being animated). Therefore, there should typically
 be two or more values.</comment>
        </property>
        <property>
            <name>Evaluator</name>
            <parameter>
                <name>evaluator</name>
                <type>com.nineoldandroids_b4a.animation.TypeEvaluator</type>
            </parameter>
            <comment>The type evaluator to be used when calculating the animated values of this animation.
 The system will automatically assign a float or int evaluator based on the type
 of StartValue and EndValue in Initialize. But if these values are not one of these
 primitive types, or if different evaluation is desired (such as is necessary with
 int values that represent colors), a custom evaluator needs to be assigned. For
 example, when running an animation on color values, the noaColorARGBEvaluator
 should be used to get correct RGB color interpolation.</comment>
        </property>
        <property>
            <name>RepeatCount</name>
            <returntype>int</returntype>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
            <comment>Defines how many times the animation should repeat. The default value
 is 0.</comment>
        </property>
        <property>
            <name>AnimatedFraction</name>
            <returntype>float</returntype>
            <comment>Returns the current animation fraction, which is the elapsed/interpolated fraction used in
 the most recent frame update on the animation.</comment>
        </property>
        <property>
            <name>Duration</name>
            <returntype>long</returntype>
            <comment>Gets the length of the animation. The default duration is 300 milliseconds.</comment>
        </property>
        <property>
            <name>CurrentPlayTime</name>
            <returntype>long</returntype>
            <parameter>
                <name>playTime</name>
                <type>long</type>
            </parameter>
            <comment>Gets the current position of the animation in time, which is equal to the current
 time minus the time that the animation started. An animation that is not yet started will
 return a value of zero.</comment>
        </property>
        <property>
            <name>FrameDelay</name>
            <returntype>long</returntype>
            <parameter>
                <name>frameDelay</name>
                <type>long</type>
            </parameter>
            <comment>The amount of time, in milliseconds, between each frame of the animation. This is a
 requested time that the animation will attempt to honor, but the actual delay between
 frames may be different, depending on system load and capabilities.
 NOTE: the same delay is applied to all animations, since they are all run off of a
 single timing loop.</comment>
        </property>
        <property>
            <name>AnimatedValue</name>
            <returntype>java.lang.Object</returntype>
            <comment>The most recent value calculated by this Animator when there is just one property being
 animated. This value is only sensible while the animation is running. The main purpose for
 this read-only property is to retrieve the value from the Animator in the Update event
 handler, which is called during each animation frame, immediately after the value is
 calculated.</comment>
        </property>
        <property>
            <name>Interpolator</name>
            <returntype>android.view.animation.Interpolator</returntype>
            <parameter>
                <name>interpolator</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the time interpolator that this Animator uses.
 The interpolator determines whether the animation runs with linear or non-linear motion,
 such as acceleration and deceleration. The default value is AccelerateDecelerateInterpolator.</comment>
        </property>
        <field>
            <name>REPEATCOUNT_INFINITE</name>
            <comment>This value used used with the RepeatCount property to repeat
 the animation indefinitely.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>REPEATMODE_RESTART</name>
            <comment>When the animation reaches the end and RepeatCount is INFINITE
 or a positive value, the animation restarts from the beginning.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>REPEATMODE_REVERSE</name>
            <comment>When the animation reaches the end and RepeatCount is INFINITE
 or a positive value, the animation reverses direction on every iteration.</comment>
            <returntype>int</returntype>
        </field>
    </class>
    <class>
        <name>com.nineoldandroids_b4a.animation.TimeAnimWrapper</name>
        <shortname>noaTimeAnimator</shortname>
        <owner>process</owner>
        <event>Start</event>
        <event>Cancel</event>
        <event>End</event>
        <event>TimeUpdate(TotalTime As Long, DeltaTime As Long)</event>
        <method>
            <name>Initialize</name>
            <comment>Initializes a TimeAnimator.
 There is no duration, interpolation, or object value-setting with this Animator.
 Instead, it is simply started, after which it proceeds to send out events on every animation
 frame to its TimeUpdate listener, with information about the total elapsed time, and the
 elapsed time since the previous animation frame.</comment>
            <returntype>com.nineoldandroids_b4a.animation.TimeAnimWrapper</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventPrefix</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>End</name>
            <comment>Ends this Animator.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Start</name>
            <comment>Starts this Animator.
 Calls to Start after the first are ignored. If you want to restart the animation, call Cancel
 or End before.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>isRunning</name>
            <comment>Returns whether this Animator is currently running (having been started and gone past any
 initial startDelay period and not yet ended).</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>Cancel</name>
            <comment>Cancels this Animator.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>isStarted</name>
            <comment>Returns whether this Animator has been started and not yet ended.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>FrameDelay</name>
            <returntype>long</returntype>
            <parameter>
                <name>frameDelay</name>
                <type>long</type>
            </parameter>
            <comment>The amount of time, in milliseconds, between each frame of the animation. This is a
 requested time that the animation will attempt to honor, but the actual delay between
 frames may be different, depending on system load and capabilities.
 NOTE: the same delay is applied to all animations, since they are all run off of a
 single timing loop.</comment>
        </property>
        <property>
            <name>StartDelay</name>
            <returntype>long</returntype>
            <parameter>
                <name>startDelay</name>
                <type>long</type>
            </parameter>
            <comment>The amount of time, in milliseconds, to delay starting the animation after Start() is called.</comment>
        </property>
    </class>
    <class>
        <name>com.nineoldandroids_b4a.animation.ObjectAnimator</name>
        <shortname>noaObjectAnimator</shortname>
        <comment>This subclass of {@link ValueAnimator} provides support for animating properties on target objects.
 The constructors of this class take parameters to define the target object that will be animated
 as well as the name of the property that will be animated. Appropriate set/get functions
 are then determined internally and the animation will call these functions as necessary to
 animate the property.</comment>
        <owner>activity</owner>
        <event>Start</event>
        <event>Cancel</event>
        <event>End</event>
        <event>Repeat</event>
        <event>Update</event>
        <method>
            <name>setupEndValues</name>
            <comment>This method tells the object to use appropriate information to extract
 ending values for the animation. For example, a AnimatorSet object will pass
 this call to its child objects to tell them to set up the values. A
 ObjectAnimator object will use the information it has about its target object
 and PropertyValuesHolder objects to get the start values for its properties.
 A ValueAnimator object will ignore the request since it does not have enough
 information (such as a target object) to gather these values.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>End</name>
            <comment>Ends the animation. This causes the animation to assign the end value of the property being
 animated, then sending the End event to its listeners.

 This method must be called on the thread that is running the animation.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_OVERSHOOT</name>
            <comment></comment>
            <returntype>android.view.animation.OvershootInterpolator</returntype>
        </method>
        <method>
            <name>Start</name>
            <comment>Starts this animation. If the animation has a nonzero startDelay, the animation will start
 running after that delay elapses. A non-delayed animation will have its initial value(s)
 set immediately, followed by sending a Start event to any listeners of this animator.

 The animation started by calling this method will be run on the thread that called
 this method. This thread should have a Looper on it (a runtime exception will be thrown if
 this is not the case). Also, if the animation will animate properties of objects in the view
 hierarchy, then the calling thread should be the UI thread for that view hierarchy.

 Calls to Start after the first are ignored. If you want to restart the animation, call Cancel
 or End before.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_DECELERATE</name>
            <comment></comment>
            <returntype>android.view.animation.DecelerateInterpolator</returntype>
        </method>
        <method>
            <name>setupStartValues</name>
            <comment>This method tells the object to use appropriate information to extract
 starting values for the animation. For example, a AnimatorSet object will pass
 this call to its child objects to tell them to set up the values. A
 ObjectAnimator object will use the information it has about its target object
 and PropertyValuesHolder objects to get the start values for its properties.
 A ValueAnimator object will ignore the request since it does not have enough
 information (such as a target object) to gather these values.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_CYCLE</name>
            <comment></comment>
            <returntype>android.view.animation.CycleInterpolator</returntype>
            <parameter>
                <name>cycles</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setDuration</name>
            <comment>Sets the length of the animation. The default duration is 300 milliseconds.</comment>
            <returntype>com.nineoldandroids_b4a.animation.ObjectAnimator</returntype>
            <parameter>
                <name>duration</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>INTERPOLATOR_LINEAR</name>
            <comment></comment>
            <returntype>android.view.animation.LinearInterpolator</returntype>
        </method>
        <method>
            <name>Cancel</name>
            <comment>Cancels the animation. Unlike End(), &lt;code&gt;Cancel()&lt;/code&gt; causes the animation to
 stop in its tracks, sending a Cancel event to its listeners, followed by an End event.

 &lt;p&gt;This method must be called on the thread that is running the animation.&lt;/p&gt;</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_BOUNCE</name>
            <comment></comment>
            <returntype>android.view.animation.BounceInterpolator</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_ANTICIPATE</name>
            <comment></comment>
            <returntype>android.view.animation.AnticipateInterpolator</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_ANTICIPATE_OVERSHOOT</name>
            <comment></comment>
            <returntype>android.view.animation.AnticipateOvershootInterpolator</returntype>
        </method>
        <method>
            <name>Values</name>
            <comment>Returns the values that this Animator animates between.</comment>
            <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
        </method>
        <method>
            <name>isRunning</name>
            <comment>Returns whether this Animator is currently running (having been started and gone past any
 initial startDelay period and not yet ended).</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>InitializeFloat</name>
            <comment>Initializes an ObjectAnimator that animates between float values.
target: The object whose property is to be animated.
propertyName: The name of the property being animated.
values: A set of values that the animation will animate between over time.</comment>
            <returntype>com.nineoldandroids_b4a.animation.ObjectAnimator</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>target</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>propertyName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>StartValue</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>EndValue</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>EventPrefix</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>InitializeObject</name>
            <comment>Initializes an ObjectAnimator that animates between object values.
 Since ObjectAnimator does not know how to animate between arbitrary Objects, this
 method also takes a TypeEvaluator object that the ObjectAnimator will use to perform
 that interpolation.
target: The object whose property is to be animated.
property: The property being animated.
evaluator: A TypeEvaluator that will be called on each animation frame to provide
 the necessary interpolation between the Object values to derive the animated value.
values: A set of values that the animation will animate between over time.</comment>
            <returntype>com.nineoldandroids_b4a.animation.ObjectAnimator</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>target</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>propertyName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>evaluator</name>
                <type>com.nineoldandroids_b4a.animation.TypeEvaluator</type>
            </parameter>
            <parameter>
                <name>StartValue</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>EndValue</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>EventPrefix</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>INTERPOLATOR_ACCELERATE_DECELERATE</name>
            <comment></comment>
            <returntype>android.view.animation.AccelerateDecelerateInterpolator</returntype>
        </method>
        <method>
            <name>Reverse</name>
            <comment>Plays the Animator in reverse. If the animation is already running,
 it will stop itself and play backwards from the point reached when reverse was called.
 If the animation is not currently running, then it will start from the end and
 play backwards. This behavior is only set for the current animation; future playing
 of the animation will use the default behavior of playing forward.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_ACCELERATE</name>
            <comment></comment>
            <returntype>android.view.animation.AccelerateInterpolator</returntype>
        </method>
        <method>
            <name>toString</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </method>
        <method>
            <name>isStarted</name>
            <comment>Returns whether this Animator has been started and not yet ended. This state is a superset
 of the state of isRunning(), because an Animator with a nonzero startDelay will return true
 for isStarted() during the delay phase, whereas isRunning() will return true only after the
 delay phase is complete.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>InitializeInt</name>
            <comment>Initializes an ObjectAnimator that animates between int values.
target: The object whose property is to be animated.
propertyName: The name of the property being animated.
values: A set of values that the animation will animate between over time.</comment>
            <returntype>com.nineoldandroids_b4a.animation.ObjectAnimator</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>target</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>propertyName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>StartValue</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>EndValue</name>
                <type>int</type>
            </parameter>
            <parameter>
                <name>EventPrefix</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <property>
            <name>FloatValues</name>
            <parameter>
                <name>values</name>
                <type>float[]</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>RepeatMode</name>
            <returntype>int</returntype>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
            <comment>Defines what this animation should do when it reaches the end.</comment>
        </property>
        <property>
            <name>ObjectValues</name>
            <parameter>
                <name>values</name>
                <type>java.lang.Object[]</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>StartDelay</name>
            <returntype>long</returntype>
            <parameter>
                <name>startDelay</name>
                <type>long</type>
            </parameter>
            <comment>The amount of time, in milliseconds, to delay starting the animation after Start() is called.</comment>
        </property>
        <property>
            <name>PropertyName</name>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>propertyName</name>
                <type>java.lang.String</type>
            </parameter>
            <comment>Gets or sets the name of the property that will be animated. This name will be used to
 derive a setter function that will be called to set animated values.
 For example, a property name of foo will result
 in a call to the function setFoo() on the target object. If either
 valueFrom or valueTo is null, then a getter function will
 also be derived and called.

 Note that the setter function derived from this property name
 must take the same parameter type as the
 valueFrom and valueTo properties, otherwise the call to
 the setter function will fail.</comment>
        </property>
        <property>
            <name>IntValues</name>
            <parameter>
                <name>values</name>
                <type>int[]</type>
            </parameter>
            <comment></comment>
        </property>
        <property>
            <name>Evaluator</name>
            <parameter>
                <name>evaluator</name>
                <type>com.nineoldandroids_b4a.animation.TypeEvaluator</type>
            </parameter>
            <comment>The type evaluator to be used when calculating the animated values of this animation.
 The system will automatically assign a float or int evaluator based on the type
 of StartValue and EndValue in Initialize. But if these values are not one of these
 primitive types, or if different evaluation is desired (such as is necessary with
 int values that represent colors), a custom evaluator needs to be assigned. For
 example, when running an animation on color values, the noaColorARGBEvaluator
 should be used to get correct RGB color interpolation.</comment>
        </property>
        <property>
            <name>RepeatCount</name>
            <returntype>int</returntype>
            <parameter>
                <name>value</name>
                <type>int</type>
            </parameter>
            <comment>Defines how many times the animation should repeat. The default value
 is 0.</comment>
        </property>
        <property>
            <name>AnimatedFraction</name>
            <returntype>float</returntype>
            <comment>Returns the current animation fraction, which is the elapsed/interpolated fraction used in
 the most recent frame update on the animation.</comment>
        </property>
        <property>
            <name>Target</name>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>target</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>The target object whose property will be animated by this animation</comment>
        </property>
        <property>
            <name>Duration</name>
            <returntype>long</returntype>
            <comment>Gets the length of the animation. The default duration is 300 milliseconds.</comment>
        </property>
        <property>
            <name>CurrentPlayTime</name>
            <returntype>long</returntype>
            <parameter>
                <name>playTime</name>
                <type>long</type>
            </parameter>
            <comment>Gets the current position of the animation in time, which is equal to the current
 time minus the time that the animation started. An animation that is not yet started will
 return a value of zero.</comment>
        </property>
        <property>
            <name>FrameDelay</name>
            <returntype>long</returntype>
            <parameter>
                <name>frameDelay</name>
                <type>long</type>
            </parameter>
            <comment>The amount of time, in milliseconds, between each frame of the animation. This is a
 requested time that the animation will attempt to honor, but the actual delay between
 frames may be different, depending on system load and capabilities.
 NOTE: the same delay is applied to all animations, since they are all run off of a
 single timing loop.</comment>
        </property>
        <property>
            <name>Interpolator</name>
            <returntype>android.view.animation.Interpolator</returntype>
            <parameter>
                <name>interpolator</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Gets or sets the time interpolator that this Animator uses.
 The interpolator determines whether the animation runs with linear or non-linear motion,
 such as acceleration and deceleration. The default value is AccelerateDecelerateInterpolator.</comment>
        </property>
        <property>
            <name>AnimatedValue</name>
            <returntype>java.lang.Object</returntype>
            <comment>The most recent value calculated by this Animator when there is just one property being
 animated. This value is only sensible while the animation is running. The main purpose for
 this read-only property is to retrieve the value from the Animator in the Update event
 handler, which is called during each animation frame, immediately after the value is
 calculated.</comment>
        </property>
        <field>
            <name>REPEATCOUNT_INFINITE</name>
            <comment>This value used used with the RepeatCount property to repeat
 the animation indefinitely.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PROPERTY_X</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>PROPERTY_Y</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>PROPERTY_PIVOT_Y</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>PROPERTY_PIVOT_X</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>PROPERTY_SCALE_Y</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>PROPERTY_SCALE_X</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>PROPERTY_SCROLL_X</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>PROPERTY_SCROLL_Y</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>PROPERTY_ALPHA</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>REPEATMODE_RESTART</name>
            <comment>When the animation reaches the end and RepeatCount is INFINITE
 or a positive value, the animation restarts from the beginning.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PROPERTY_ROTATION</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>REPEATMODE_REVERSE</name>
            <comment>When the animation reaches the end and RepeatCount is INFINITE
 or a positive value, the animation reverses direction on every iteration.</comment>
            <returntype>int</returntype>
        </field>
        <field>
            <name>PROPERTY_ROTATION_X</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>PROPERTY_TRANSLATION_X</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>PROPERTY_ROTATION_Y</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
        <field>
            <name>PROPERTY_TRANSLATION_Y</name>
            <comment></comment>
            <returntype>java.lang.String</returntype>
        </field>
    </class>
    <class>
        <name>com.nineoldandroids_b4a.animation.IntEvaluator</name>
        <shortname>noaIntEvaluator</shortname>
        <comment>This evaluator can be used to perform type interpolation between int values.</comment>
        <owner>process</owner>
        <method>
            <name>evaluate</name>
            <comment>This function returns the result of linearly interpolating the start and end values, with
 fraction representing the proportion between the start and end values. The
 calculation is a simple parametric calculation: result = x0 + t * (v1 - v0),
 where x0 is startValue, x1 is endValue, and t is fraction.
fraction: The fraction from the starting to the ending values
startValue: The start value; should be of type int
endValue: The end value; should be of type int
 
 Returns a linear interpolation between the start and end values, given the fraction parameter.</comment>
            <returntype>java.lang.Integer</returntype>
            <parameter>
                <name>fraction</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>startValue</name>
                <type>java.lang.Integer</type>
            </parameter>
            <parameter>
                <name>endValue</name>
                <type>java.lang.Integer</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.nineoldandroids_b4a.animation.FloatEvaluator</name>
        <shortname>noaFloatEvaluator</shortname>
        <comment>This evaluator can be used to perform type interpolation between float values.</comment>
        <owner>process</owner>
        <method>
            <name>evaluate</name>
            <comment>This function returns the result of linearly interpolating the start and end values, with
 fraction representing the proportion between the start and end values. The
 calculation is a simple parametric calculation: result = x0 + t * (v1 - v0),
 where x0 is startValue, x1 is endValue, and t is fraction.
fraction: The fraction from the starting to the ending values
startValue: The start value; should be of type float
endValue: The end value; should be of type float
 
 Returns a linear interpolation between the start and end values, given the fraction parameter.</comment>
            <returntype>java.lang.Float</returntype>
            <parameter>
                <name>fraction</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>startValue</name>
                <type>java.lang.Number</type>
            </parameter>
            <parameter>
                <name>endValue</name>
                <type>java.lang.Number</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.nineoldandroids_b4a.animation.ArgbEvaluator</name>
        <shortname>noaColorARGBEvaluator</shortname>
        <comment>This evaluator can be used to perform type interpolation between integer
 values that represent ARGB colors.</comment>
        <owner>process</owner>
        <method>
            <name>evaluate</name>
            <comment>This function returns the calculated in-between value for a color
 given integers that represent the start and end values in the four
 bytes of the 32-bit int. Each channel is separately linearly interpolated
 and the resulting calculated values are recombined into the return value.
fraction: The fraction from the starting to the ending values.
startValue: A 32-bit int value representing colors in the
 separate bytes of the parameter.
endValue: A 32-bit int value representing colors in the
 separate bytes of the parameter.
 
 Returns a value that is calculated to be the linearly interpolated
 result, derived by separating the start and end values into separate
 color channels and interpolating each one separately, recombining the
 resulting values in the same way.</comment>
            <returntype>java.lang.Object</returntype>
            <parameter>
                <name>fraction</name>
                <type>float</type>
            </parameter>
            <parameter>
                <name>startValue</name>
                <type>java.lang.Object</type>
            </parameter>
            <parameter>
                <name>endValue</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
    </class>
    <class>
        <name>com.nineoldandroids_b4a.animation.AnimatorSet</name>
        <shortname>noaAnimatorSet</shortname>
        <comment>This class plays a set of {@link Animator} objects in the specified order. Animations
 can be set up to play together, in sequence, or after a specified delay.

 There are two different approaches to adding animations to a AnimatorSet:
 either the playTogether(Animator[]) or
 playSequentially(Animator[]) methods can be called to add
 a set of animations all at once, or the play(Animator) can be
 used in conjunction with methods in the Builder class to add
 animations one by one.

 It is possible to set up a AnimatorSet with circular dependencies between
 its animations. For example, an animation a1 could be set up to start before animation a2, a2
 before a3, and a3 before a1. The results of this configuration are undefined, but will typically
 result in none of the affected animations being played. Because of this (and because
 circular dependencies do not make logical sense anyway), circular dependencies
 should be avoided, and the dependency flow of animations should only be in one direction.</comment>
        <owner>process</owner>
        <method>
            <name>setupEndValues</name>
            <comment>This method tells the object to use appropriate information to extract
 ending values for the animation. For example, a AnimatorSet object will pass
 this call to its child objects to tell them to set up the values. A
 ObjectAnimator object will use the information it has about its target object
 and PropertyValuesHolder objects to get the start values for its properties.
 A ValueAnimator object will ignore the request since it does not have enough
 information (such as a target object) to gather these values.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>End</name>
            <comment>Ends the animation. This causes the animation to assign the end value of the property being
 animated, then sending the End event to its listeners.

 This method must be called on the thread that is running the animation.

 Note that ending a AnimatorSet also ends all of the animations that it is
 responsible for.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_OVERSHOOT</name>
            <comment></comment>
            <returntype>android.view.animation.OvershootInterpolator</returntype>
        </method>
        <method>
            <name>Start</name>
            <comment>Starts this animation. If the animation has a nonzero startDelay, the animation will start
 running after that delay elapses. A non-delayed animation will have its initial
 value(s) set immediately, followed by sending a Start event to any listeners of this animator.

 The animation started by calling this method will be run on the thread that called
 this method. This thread should have a Looper on it (a runtime exception will be thrown if
 this is not the case). Also, if the animation will animate properties of objects in the view
 hierarchy, then the calling thread should be the UI thread for that view hierarchy.

 Starting this AnimatorSet will, in turn, start the animations for which
 it is responsible. The details of when exactly those animations are started depends on
 the dependency relationships that have been set up between the animations.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>PlaySequentially</name>
            <comment>Sets up this AnimatorSet to play each of the supplied animations when the
 previous animation ends.
items: The animations that will be started one after another.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>items</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>PlayTogether</name>
            <comment>Sets up this AnimatorSet to play all of the supplied animations at the same time.
items: The animations that will be started simultaneously.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>items</name>
                <type>java.lang.Object[]</type>
            </parameter>
        </method>
        <method>
            <name>INTERPOLATOR_DECELERATE</name>
            <comment></comment>
            <returntype>android.view.animation.DecelerateInterpolator</returntype>
        </method>
        <method>
            <name>setupStartValues</name>
            <comment>This method tells the object to use appropriate information to extract
 starting values for the animation. For example, a AnimatorSet object will pass
 this call to its child objects to tell them to set up the values. A
 ObjectAnimator object will use the information it has about its target object
 and PropertyValuesHolder objects to get the start values for its properties.
 A ValueAnimator object will ignore the request since it does not have enough
 information (such as a target object) to gather these values.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_CYCLE</name>
            <comment></comment>
            <returntype>android.view.animation.CycleInterpolator</returntype>
            <parameter>
                <name>cycles</name>
                <type>float</type>
            </parameter>
        </method>
        <method>
            <name>setDuration</name>
            <comment>Sets the length of each of the current child animations of this AnimatorSet. By default,
 each child animation will use its own duration. If the duration is set on the AnimatorSet,
 then each child animation inherits this duration.
duration: The length of the animation, in milliseconds, of each of the child
 animations of this AnimatorSet.</comment>
            <returntype>com.nineoldandroids_b4a.animation.AnimatorSet</returntype>
            <parameter>
                <name>duration</name>
                <type>long</type>
            </parameter>
        </method>
        <method>
            <name>INTERPOLATOR_LINEAR</name>
            <comment></comment>
            <returntype>android.view.animation.LinearInterpolator</returntype>
        </method>
        <method>
            <name>Cancel</name>
            <comment>Cancels the animation. Unlike End(), Cancel() causes the animation to
 stop in its tracks, sending a Cancel event to its listeners, followed by an End event.

 This method must be called on the thread that is running the animation.

 Note that canceling a AnimatorSet also cancels all of the animations that it
 is responsible for.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_BOUNCE</name>
            <comment></comment>
            <returntype>android.view.animation.BounceInterpolator</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_ANTICIPATE</name>
            <comment></comment>
            <returntype>android.view.animation.AnticipateInterpolator</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_ANTICIPATE_OVERSHOOT</name>
            <comment></comment>
            <returntype>android.view.animation.AnticipateOvershootInterpolator</returntype>
        </method>
        <method>
            <name>Play</name>
            <comment>This method creates a Builder object, which is used to set up playing constraints.
 This initial play() method tells the Builder the animation that is the dependency
 for the succeeding commands to the Builder. For example, calling play(a1).with(a2)
 sets up the AnimatorSet to play a1 and a2 at the same time, play(a1).before(a2)
 sets up the AnimatorSet to play a1 first, followed by a2, and play(a1).after(a2)
 sets up the AnimatorSet to play a2 first, followed by a1.
 
 Note that play() is the only way to tell the Builder the animation upon which
 the dependency is created, so successive calls to the various functions in Builder
 will all refer to the initial parameter supplied in play() as the dependency of the
 other animations. For example, calling play(a1).before(a2).before(a3) will play both a2
 and a3 when a1 ends; it does not set up a dependency between a2 and a3.</comment>
            <returntype>com.nineoldandroids_b4a.animation.AnimatorSet.Builder</returntype>
            <parameter>
                <name>anim</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>isRunning</name>
            <comment>Returns true if any of the child animations of this AnimatorSet have been started and have
 not yet ended.</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_ACCELERATE_DECELERATE</name>
            <comment></comment>
            <returntype>android.view.animation.AccelerateDecelerateInterpolator</returntype>
        </method>
        <method>
            <name>INTERPOLATOR_ACCELERATE</name>
            <comment></comment>
            <returntype>android.view.animation.AccelerateInterpolator</returntype>
        </method>
        <method>
            <name>isStarted</name>
            <comment>Returns whether this Animator has been started and not yet ended. This state is a superset
 of the state of isRunning(), because an Animator with a nonzero startDelay will return true
 for isStarted() during the delay phase, whereas isRunning() will return true only after the
 delay phase is complete.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Target</name>
            <parameter>
                <name>target</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Sets the target object for all current child animations of this AnimatorSet that take targets (ObjectAnimator and AnimatorSet).</comment>
        </property>
        <property>
            <name>Duration</name>
            <returntype>long</returntype>
            <comment>Gets the length of each of the child animations of this AnimatorSet. This value may
 be less than 0, which indicates that no duration has been set on this AnimatorSet
 and each of the child animations will use their own duration.</comment>
        </property>
        <property>
            <name>StartDelay</name>
            <returntype>long</returntype>
            <parameter>
                <name>startDelay</name>
                <type>long</type>
            </parameter>
            <comment>The amount of time, in milliseconds, to delay starting the animation after
 Start is called.</comment>
        </property>
        <property>
            <name>Interpolator</name>
            <parameter>
                <name>interpolator</name>
                <type>java.lang.Object</type>
            </parameter>
            <comment>Sets the time interpolator for all current child animations
 of this AnimatorSet.</comment>
        </property>
        <property>
            <name>ChildAnimations</name>
            <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
            <comment>Returns the current list of child Animator objects controlled by this
 AnimatorSet. This is a copy of the internal list; modifications to the returned list
 will not affect the AnimatorSet, although changes to the underlying Animator objects
 will affect those objects being managed by the AnimatorSet.</comment>
        </property>
    </class>
    <class>
        <name>com.nineoldandroids_b4a.animation.AnimatorSet.Builder</name>
        <comment>The Builder object is a utility class to facilitate adding animations to a
 AnimatorSet along with the relationships between the various animations. The
 intention of the Builder methods, along with the play(Animator) method of AnimatorSet is to make it possible
 to express the dependency relationships of animations in a natural way. Developers can also
 use the playTogether(Animator[]) and playSequentially(Animator[]) methods if these suit the need,
 but it might be easier in some situations to express the AnimatorSet of animations in pairs.
 &lt;p/&gt;
 The Builder object cannot be constructed directly, but is rather constructed
 internally via a call to play(Animator).
 &lt;p/&gt;
 For example, this sets up a AnimatorSet to play anim1 and anim2 at the same time, anim3 to
 play when anim2 finishes, and anim4 to play when anim3 finishes:
 &lt;pre&gt;
     AnimatorSet s = new AnimatorSet();
     s.play(anim1).with(anim2);
     s.play(anim2).before(anim3);
     s.play(anim4).after(anim3);
 &lt;/pre&gt;
 &lt;p/&gt;
 Note in the example that both before(Animator) and after(Animator) are used. These are just different ways of expressing the same
 relationship and are provided to make it easier to say things in a way that is more natural,
 depending on the situation.
 &lt;p/&gt;
 It is possible to make several calls into the same Builder object to express
 multiple relationships. However, note that it is only the animation passed into the initial
 play(Animator) method that is the dependency in any of the successive
 calls to the Builder object. For example, the following code starts both anim2
 and anim3 when anim1 ends; there is no direct dependency relationship between anim2 and
 anim3:
 &lt;pre&gt;
   AnimatorSet s = new AnimatorSet();
   s.play(anim1).before(anim2).before(anim3);
 &lt;/pre&gt;
 If the desired result is to play anim1 then anim2 then anim3, this code expresses the
 relationship correctly:
 &lt;pre&gt;
   AnimatorSet s = new AnimatorSet();
   s.play(anim1).before(anim2);
   s.play(anim2).before(anim3);
 &lt;/pre&gt;
 Note that it is possible to express relationships that cannot be resolved and will not
 result in sensible results. For example, play(anim1).after(anim1) makes no
 sense. In general, circular dependencies like this one (or more indirect ones where a depends
 on b, which depends on c, which depends on a) should be avoided. Only create AnimatorSets
 that can boil down to a simple, one-way relationship of animations starting with, before, and
 after other, different, animations.</comment>
        <owner>process</owner>
        <method>
            <name>after</name>
            <comment>Sets up the given animation to play when the animation supplied in the
 play(Animator) call that created this Builder object
 to start when the animation supplied in this method call ends.
anim: The animation whose end will cause the animation supplied to the
 play(Animator) method to play.</comment>
            <returntype>com.nineoldandroids_b4a.animation.AnimatorSet.Builder</returntype>
            <parameter>
                <name>animator</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>with</name>
            <comment>Sets up the given animation to play at the same time as the animation supplied in the
 play(Animator) call that created this Builder object.
anim: The animation that will play when the animation supplied to the
 play(Animator) method starts.</comment>
            <returntype>com.nineoldandroids_b4a.animation.AnimatorSet.Builder</returntype>
            <parameter>
                <name>animator</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
        <method>
            <name>before</name>
            <comment>Sets up the given animation to play when the animation supplied in the
 play(Animator) call that created this Builder object ends.
anim: The animation that will play when the animation supplied to the
 play(Animator) method ends.</comment>
            <returntype>com.nineoldandroids_b4a.animation.AnimatorSet.Builder</returntype>
            <parameter>
                <name>animator</name>
                <type>java.lang.Object</type>
            </parameter>
        </method>
    </class>
    <version>0.93</version>
    <author>Jake Wharton, The Android Open Source Project, F. Leneuf-Magaud</author>
</root>
