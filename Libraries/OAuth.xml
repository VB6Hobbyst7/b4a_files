<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
    <class>
        <name>anywheresoftware.b4a.objects.OAuth</name>
        <shortname>OAuth</shortname>
        <comment>OAuth object wraps the open source project &lt;link&gt;oauth-signpost|http://code.google.com/p/oauth-signpost/&lt;/link&gt;.
This object allows you to sign Http requests according to OAuth v1.0 protocol.</comment>
        <objectwrapper>oauth.signpost.OAuthConsumer</objectwrapper>
        <owner>process</owner>
        <method>
            <name>Initialize</name>
            <comment>Initializes the object and sets the developer key and secret values.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Key</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Secret</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Sign</name>
            <comment>Signs a HttpRequest before it is sent.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Request</name>
                <type>anywheresoftware.b4a.http.HttpClientWrapper.HttpUriRequestWrapper</type>
            </parameter>
        </method>
        <method>
            <name>SetTokenWithSecret</name>
            <comment>Sets the access token and secret. These values are usually retrieved from the service server.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Token</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Secret</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>GetAuthorizationHeaderValue</name>
            <comment>Returns the header value that was previously added during signing.
This can be used if the signature of one request should be used with a different request.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Request</name>
                <type>anywheresoftware.b4a.http.HttpClientWrapper.HttpUriRequestWrapper</type>
            </parameter>
        </method>
    </class>
    <version>1.0</version>
</root>
