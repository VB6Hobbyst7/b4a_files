<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.05</doclet-version-NOT-library-version>
    <class>
        <name>anywheresoftware.b4a.sql.SQL</name>
        <shortname>SQL</shortname>
        <comment>The main object that accesses the database.</comment>
        <owner CheckForReinitialize="true">process</owner>
        <event>QueryComplete (Success As Boolean, Crsr As Cursor)</event>
        <event>NonQueryComplete (Success As Boolean)</event>
        <method>
            <name>Initialize</name>
            <comment>Opens the database file. A new database will be created if it does not exist and CreateIfNecessary is true.
IMPORTANT: this object should be declared in Sub Process_Globals.
Example:&lt;code&gt;
Dim SQL1 As SQL
SQL1.Initialize(File.InternalDir, "MyDb.db", True)&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Dir</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>FileName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>CreateIfNecessary</name>
                <type>boolean</type>
            </parameter>
        </method>
        <method>
            <name>ExecNonQuery2</name>
            <comment>Executes a single non query SQL statement.
The statement can include question marks which will be replaced by the items in the given list.
Note that Basic4android converts arrays to lists implicitly.
The values in the list should be strings, numbers or bytes arrays.
Example:&lt;code&gt;
SQL1.ExecNonQuery2("INSERT INTO table1 VALUES (?, ?, 0)", Array As Object("some text", 2))&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Statement</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Args</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>BeginTransaction</name>
            <comment>Begins a transaction. A transaction is a set of multiple "writing" statements that are atomically committed,
hence all changes will be made or no changes will be made.
As a side effect those statements will be executed significantly faster (in the default case a transaction is implicitly created for
each statement).
It is very important to handle transaction carefully and close them.
The transaction is considered successful only if TransactionSuccessful is called. Otherwise no changes will be made.
Typical usage:&lt;code&gt;
SQL1.BeginTransaction
Try
	'block of statements like:
	For i = 1 to 1000
		SQL1.ExecNonQuery("INSERT INTO table1 VALUES(...)
	Next
	SQL1.TransactionSuccessful
Catch
	Log(LastException.Message) 'no changes will be made
End Try
SQL1.EndTransaction&lt;/code&gt;</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>ExecQuerySingleResult</name>
            <comment>Executes the query and returns the value in the first column and the first row (in the result set).
Returns Null if no results were found.
Example:&lt;code&gt;
Dim NumberOfMatches As Int
NumberOfMatches = SQL1.ExecQuerySingleResult("SELECT count(*) FROM table1 WHERE col2 &gt; 300")&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Query</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ExecNonQueryBatch</name>
            <comment>Asynchronously executes a batch of non-query statements (such as INSERT).
The NonQueryComplete event is raised after the statements are completed.
You should call AddNonQueryToBatch one or more times before calling this method to add statements to the batch.
Note that this method internally begins and ends a transaction.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>EndTransaction</name>
            <comment>Ends the transaction.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>ExecQueryAsync</name>
            <comment>Asynchronously executes the given query. The QueryComplete event will be raised when the results are ready.
Example:&lt;code&gt;
sql1.ExecQueryAsync("SQL", "SELECT * FROM table1", Null)
...
Sub SQL_QueryComplete (Success As Boolean, Crsr As Cursor)
	If Success Then
		For i = 0 To Crsr.RowCount - 1
			Crsr.Position = i
			Log(Crsr.GetInt2(0))
		Next
	Else
		Log(LastException)
	End If
End Sub&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Query</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>StringArgs</name>
                <type>java.lang.String[]</type>
            </parameter>
        </method>
        <method>
            <name>TransactionSuccessful</name>
            <comment>Marks the transaction as a successful transaction. No further statements should be executed till calling EndTransaction.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>AddNonQueryToBatch</name>
            <comment>Adds a non-query statement to the batch of statements.
The statements are (asynchronously) executed when you call ExecNonQueryBatch.
Args parameter can be Null if it is not needed.
Example:&lt;code&gt;
For i = 1 To 10000
		sql1.AddNonQueryToBatch("INSERT INTO table1 VALUES (?)", Array As Object(Rnd(0, 100000)))
Next
sql1.ExecNonQueryBatch("SQL")
...	
Sub SQL_NonQueryComplete (Success As Boolean)
	Log("NonQuery: " &amp; Success)
	If Success = False Then Log(LastException)
End Sub&lt;/code&gt;</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Statement</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Args</name>
                <type>anywheresoftware.b4a.objects.collections.List</type>
            </parameter>
        </method>
        <method>
            <name>Close</name>
            <comment>Closes the database.
Does not do anything if the database is not opened or was closed before.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>ExecQuery</name>
            <comment>Executes the query and returns a cursor which is used to go over the results.
Example:&lt;code&gt;
Dim Cursor As Cursor
Cursor = SQL1.ExecQuery("SELECT col1, col2 FROM table1")
For i = 0 To Cursor.RowCount - 1
	Cursor.Position = i
	Log(Cursor.GetString("col1"))
	Log(Cursor.GetInt("col2"))
Next&lt;/code&gt;</comment>
            <returntype>android.database.Cursor</returntype>
            <parameter>
                <name>Query</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ExecQuerySingleResult2</name>
            <comment>Executes the query and returns the value in the first column and the first row (in the result set).
Returns Null if no results were found.
Example:&lt;code&gt;
Dim NumberOfMatches As Int
NumberOfMatches = SQL1.ExecQuerySingleResult2("SELECT count(*) FROM table1 WHERE col2 &gt; ?", Array As String(300))&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Query</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>StringArgs</name>
                <type>java.lang.String[]</type>
            </parameter>
        </method>
        <method>
            <name>ExecNonQuery</name>
            <comment>Executes a single non query SQL statement.
Example:&lt;code&gt;
SQL1.ExecNonQuery("CREATE TABLE table1 (col1 TEXT , col2 INTEGER, col3 INTEGER)")&lt;/code&gt;
If you plan to do many "writing" queries one after another, then you should consider using BeginTransaction / EndTransaction.
It will execute significantly faster.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Statement</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>ExecQuery2</name>
            <comment>Executes the query and returns a cursor which is used to go over the results.
The query can include question marks which will be replaced with the values in the array.
Example:&lt;code&gt;
Dim Cursor As Cursor
Cursor = sql1.ExecQuery2("SELECT col1 FROM table1 WHERE col3 = ?", Array As String(22))&lt;/code&gt;
SQLite will try to convert the string values based on the columns types.</comment>
            <returntype>android.database.Cursor</returntype>
            <parameter>
                <name>Query</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>StringArgs</name>
                <type>java.lang.String[]</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment>Tests whether the database is initialized and opened.</comment>
            <returntype>boolean</returntype>
        </method>
    </class>
    <class>
        <name>anywheresoftware.b4a.sql.SQL.CursorWrapper</name>
        <shortname>Cursor</shortname>
        <objectwrapper>android.database.Cursor</objectwrapper>
        <owner>process</owner>
        <method>
            <name>GetInt</name>
            <comment>Returns the Int value stored in the given column.
The value will be converted to Int if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetInt("col2"))&lt;/code&gt;</comment>
            <returntype>int</returntype>
            <parameter>
                <name>ColumnName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetColumnName</name>
            <comment>Returns the name of the column at the specified index.
The first column index is 0.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetLong</name>
            <comment>Returns the Long value stored in the given column.
The value will be converted to Long if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetLong("col2"))&lt;/code&gt;</comment>
            <returntype>java.lang.Long</returntype>
            <parameter>
                <name>ColumnName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetBlob2</name>
            <comment>Returns the blob stored in the column at the given ordinal.
Example:&lt;code&gt;
Dim Buffer() As Byte
Buffer = Cursor.GetBlob2(0)&lt;/code&gt;</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetLong2</name>
            <comment>Returns the Long value stored in the column at the given ordinal.
The value will be converted to Long if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetLong2(0))&lt;/code&gt;</comment>
            <returntype>java.lang.Long</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetDouble</name>
            <comment>Returns the Double value stored in the given column.
The value will be converted to Double if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetDouble("col2"))&lt;/code&gt;</comment>
            <returntype>java.lang.Double</returntype>
            <parameter>
                <name>ColumnName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetBlob</name>
            <comment>Returns the blob stored in the given column.
Example:&lt;code&gt;
Dim Buffer() As Byte
Buffer = Cursor.GetBlob("col1")&lt;/code&gt;</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>ColumnName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Close</name>
            <comment>Closes the cursor and frees resources.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>GetInt2</name>
            <comment>Returns the Int value stored in the column at the given ordinal.
The value will be converted to Int if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetInt2(0))&lt;/code&gt;</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetString</name>
            <comment>Returns the String value stored in the given column.
The value will be converted to String if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetString("col2"))&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>ColumnName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetString2</name>
            <comment>Returns the String value stored in the column at the given ordinal.
The value will be converted to String if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetString2(0))&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetDouble2</name>
            <comment>Returns the Double value stored in the column at the given ordinal.
The value will be converted to Double if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetDouble2(0))&lt;/code&gt;</comment>
            <returntype>java.lang.Double</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>RowCount</name>
            <returntype>int</returntype>
            <comment>Gets the numbers or rows available in the result set.</comment>
        </property>
        <property>
            <name>Position</name>
            <returntype>int</returntype>
            <parameter>
                <name>Value</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the current position (row).
Note that the starting position of a cursor returned from a query is -1.
The first valid position is 0.
Example:&lt;code&gt;
Dim Cursor As Cursor
Cursor = SQL1.ExecQuery("SELECT col1, col2 FROM table1")
For i = 0 To Cursor.RowCount - 1
	Cursor.Position = i
	Log(Cursor.GetString("col1"))
	Log(Cursor.GetInt("col2"))
Next
Cursor.Close&lt;/code&gt;</comment>
        </property>
        <property>
            <name>ColumnCount</name>
            <returntype>int</returntype>
            <comment>Gets the number of columns available in the result set.</comment>
        </property>
    </class>
    <class>
        <name>anywheresoftware.b4a.sql.SQL.ResultSetWrapper</name>
        <shortname>ResultSet</shortname>
        <comment>This type is an extension to the Cursor type.
It adds a single method (NextRow).
Its interface is the same as B4J and B4i ResultSet type.</comment>
        <objectwrapper>android.database.Cursor</objectwrapper>
        <owner>process</owner>
        <method>
            <name>GetInt</name>
            <comment>Returns the Int value stored in the given column.
The value will be converted to Int if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetInt("col2"))&lt;/code&gt;</comment>
            <returntype>int</returntype>
            <parameter>
                <name>ColumnName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetColumnName</name>
            <comment>Returns the name of the column at the specified index.
The first column index is 0.</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetLong</name>
            <comment>Returns the Long value stored in the given column.
The value will be converted to Long if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetLong("col2"))&lt;/code&gt;</comment>
            <returntype>java.lang.Long</returntype>
            <parameter>
                <name>ColumnName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetBlob2</name>
            <comment>Returns the blob stored in the column at the given ordinal.
Example:&lt;code&gt;
Dim Buffer() As Byte
Buffer = Cursor.GetBlob2(0)&lt;/code&gt;</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetLong2</name>
            <comment>Returns the Long value stored in the column at the given ordinal.
The value will be converted to Long if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetLong2(0))&lt;/code&gt;</comment>
            <returntype>java.lang.Long</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetDouble</name>
            <comment>Returns the Double value stored in the given column.
The value will be converted to Double if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetDouble("col2"))&lt;/code&gt;</comment>
            <returntype>java.lang.Double</returntype>
            <parameter>
                <name>ColumnName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetBlob</name>
            <comment>Returns the blob stored in the given column.
Example:&lt;code&gt;
Dim Buffer() As Byte
Buffer = Cursor.GetBlob("col1")&lt;/code&gt;</comment>
            <returntype>byte[]</returntype>
            <parameter>
                <name>ColumnName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Close</name>
            <comment>Closes the cursor and frees resources.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>GetInt2</name>
            <comment>Returns the Int value stored in the column at the given ordinal.
The value will be converted to Int if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetInt2(0))&lt;/code&gt;</comment>
            <returntype>int</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetString</name>
            <comment>Returns the String value stored in the given column.
The value will be converted to String if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetString("col2"))&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>ColumnName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetString2</name>
            <comment>Returns the String value stored in the column at the given ordinal.
The value will be converted to String if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetString2(0))&lt;/code&gt;</comment>
            <returntype>java.lang.String</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>GetDouble2</name>
            <comment>Returns the Double value stored in the column at the given ordinal.
The value will be converted to Double if it is of different type.
Example:&lt;code&gt;
Log(Cursor.GetDouble2(0))&lt;/code&gt;</comment>
            <returntype>java.lang.Double</returntype>
            <parameter>
                <name>Index</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>NextRow</name>
            <comment>Moves the cursor to the next result. Returns false when the cursor reaches the end.
Example:&lt;code&gt;
Do While ResultSet1.Next
 'Work with Row
Loop&lt;/code&gt;</comment>
            <returntype>boolean</returntype>
        </method>
        <method>
            <name>IsInitialized</name>
            <comment></comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>RowCount</name>
            <returntype>int</returntype>
            <comment>Gets the numbers or rows available in the result set.</comment>
        </property>
        <property>
            <name>Position</name>
            <returntype>int</returntype>
            <parameter>
                <name>Value</name>
                <type>int</type>
            </parameter>
            <comment>Gets or sets the current position (row).
Note that the starting position of a cursor returned from a query is -1.
The first valid position is 0.
Example:&lt;code&gt;
Dim Cursor As Cursor
Cursor = SQL1.ExecQuery("SELECT col1, col2 FROM table1")
For i = 0 To Cursor.RowCount - 1
	Cursor.Position = i
	Log(Cursor.GetString("col1"))
	Log(Cursor.GetInt("col2"))
Next
Cursor.Close&lt;/code&gt;</comment>
        </property>
        <property>
            <name>ColumnCount</name>
            <returntype>int</returntype>
            <comment>Gets the number of columns available in the result set.</comment>
        </property>
    </class>
    <version>1.3</version>
    <comment>The SQL library allows you to create and manage SQL databases.
See the &lt;link&gt;SQL tutorial|http://www.basic4ppc.com/forum/basic4android-getting-started-tutorials/6736-sql-tutorial.html&lt;/link&gt; for more information.</comment>
</root>
